["```py\n>>> from sklearn.datasets import load_boston\n>>> boston = load_boston()\n\n```", "```py\n>>> from matplotlib import pyplot as plt\n>>> plt.scatter(boston.data[:,5], boston.target, color='r')\n\n```", "```py\n>>> from sklearn.linear_model import LinearRegression\n>>> lr = LinearRegression()\n\n```", "```py\n>>> x = boston.data[:,5]\n>>> y = boston.target\n>>> x = np.transpose(np.atleast_2d(x))\n>>> lr.fit(x, y)\n>>> y_predicted = lr.predict(x)\n\n```", "```py\n>>> from sklearn.metrics import mean_squared_error\n\n```", "```py\n>>> mse = mean_squared_error(y, lr.predict(x))\n>>> print(\"Mean squared error (of training data): {:.3}\".format(mse))\nMean squared error (of training data): 58.4\n\n```", "```py\n>>> rmse = np.sqrt(mse)\n>>> print(\"RMSE (of training data): {:.3}\".format(rmse))\nRMSE (of training data): 6.6\n\n```", "```py\n>>> from sklearn.metrics import r2_score\n>>> r2 = r2_score(y, lr.predict(x))\n>>> print(\"R2 (on training data): {:.2}\".format(r2))\nR2 (on training data): 0.31\n\n```", "```py\n>>> r2 = lr.score(x,y)\n\n```", "```py\n>>> x = boston.data\n>>> y = boston.target\n>>> lr.fit(x, y)\n\n```", "```py\n>>> p = lr.predict(x)\n>>> plt.scatter(p, y)\n>>> plt.xlabel('Predicted price')\n>>> plt.ylabel('Actual price')\n>>> plt.plot([y.min(), y.max()], [[y.min()], [y.max()]])\n\n```", "```py\n>>> from sklearn.cross_validation import Kfold\n>>> kf = KFold(len(x), n_folds=5)\n>>> p = np.zeros_like(y)\n>>> for train,test in kf:\n...    lr.fit(x[train], y[train])\n...    p[test] = lr.predict(x[test])\n>>> rmse_cv = np.sqrt(mean_squared_error(p, y))\n>>> print('RMSE on 5-fold CV: {:.2}'.format(rmse_cv))\nRMSE on 5-fold CV: 5.6\n\n```", "```py\n>>> from sklearn.linear_model import ElasticNet, Lasso\n>>> en = ElasticNet(alpha=0.5)\n\n```", "```py\n>>> las = Lasso(normalize=1)\n>>> alphas = np.logspace(-5, 2, 1000)\n>>> alphas, coefs, _= las.path(x, y, alphas=alphas)\n\n```", "```py\n>>> fig,ax = plt.subplots()\n>>> ax.plot(alphas, coefs.T)\n>>> # Set log scale\n>>> ax.set_xscale('log')\n>>> # Make alpha decrease from left to right\n>>> ax.set_xlim(alphas.max(), alphas.min())\n\n```", "```py\n>>> from sklearn.datasets import load_svmlight_file\n>>> data,target = load_svmlight_file('E2006.train')\n\n```", "```py\n>>> print('Min target value: {}'.format(target.min()))\nMin target value: -7.89957807347\n>>> print('Max target value: {}'.format(target.max()))\nMax target value: -0.51940952694\n>>> print('Mean target value: {}'.format(target.mean()))\nMean target value: -3.51405313669\n>>> print('Std. dev. target: {}'.format(target.std()))\nStd. dev. target: 0.632278353911\n\n```", "```py\n>>> from sklearn.linear_model import LinearRegression\n>>> lr = LinearRegression()\n>>> lr.fit(data,target)\n>>> pred = lr.predict(data)\n>>> rmse_train = np.sqrt(mean_squared_error(target, pred))\n>>> print('RMSE on training: {:.2}'.format(rmse_train))\nRMSE on training: 0.0025\n>>> print('R2 on training: {:.2}'.format(r2_score(target, pred)))\nR2 on training: 1.0\n\n```", "```py\n>>> from sklearn.linear_model import ElasticNet\n>>> met = ElasticNet(alpha=0.1)\n\n>>> kf = KFold(len(target), n_folds=5)\n>>> pred = np.zeros_like(target)\n>>> for train, test in kf:\n...    met.fit(data[train], target[train])\n...    pred[test] = met.predict(data[test])\n\n>>> # Compute RMSE\n>>> rmse = np.sqrt(mean_squared_error(target, pred))\n>>> print('[EN 0.1] RMSE on testing (5 fold): {:.2}'.format(rmse))\n[EN 0.1] RMSE on testing (5 fold): 0.4\n\n>>> # Compute Coefficient of determination\n>>> r2 = r2_score(target, pred)\n>>> print('[EN 0.1] R2 on testing (5 fold): {:.2}'.format(r2))\n[EN 0.1] R2 on testing (5 fold): 0.61\n\n```", "```py\n>>> from sklearn.linear_model import ElasticNetCV\n>>> met = ElasticNetCV()\n>>> kf = KFold(len(target), n_folds=5)\n>>> p = np.zeros_like(target)\n>>> for train,test in kf:\n...    met.fit(data[train],target[train])\n...    p[test] = met.predict(data[test])\n>>> r2_cv = r2_score(target, p)\n>>> print(\"R2 ElasticNetCV: {:.2}\".format(r2_cv))\nR2 ElasticNetCV: 0.65\n\n```", "```py\n>>> met = ElasticNetCV(n_jobs=4)\n\n```", "```py\n>>> met = ElasticNetCV(n_jobs=-1)\n\n```", "```py\n>>> l1_ratio=[.01, .05, .25, .5, .75, .95, .99]\n>>> met = ElasticNetCV(\n l1_ratio=l1_ratio,\n n_jobs=-1)\n\n```", "```py\n>>> l1_ratio = [.01, .05, .25, .5, .75, .95, .99]\n>>> met = ElasticNetCV(\n l1_ratio=l1_ratio,\n n_jobs=-1)\n>>> p = np.zeros_like(target)\n>>> for train,test in kf:\n...     met.fit(data[train],target[train])\n...    p[test] = met.predict(data[test])\n>>> plt.scatter(p, y)\n>>> # Add diagonal line for reference\n>>> # (represents perfect agreement)\n>>> plt.plot([p.min(), p.max()], [p.min(), p.max()])\n\n```"]