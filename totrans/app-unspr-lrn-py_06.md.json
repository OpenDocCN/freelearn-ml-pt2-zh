["```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.decomposition import PCA\n    from sklearn.manifold import TSNE\n    ```", "```py\n    with open('mnist.pkl', 'rb') as f:\n        mnist = pickle.load(f)\n    plt.figure(figsize=(10, 7))\n    for i in range(9):\n        plt.subplot(3, 3, i + 1)\n        plt.imshow(mnist['images'][i], cmap='gray')\n        plt.title(mnist['labels'][i])\n        plt.axis('off')\n    plt.show()\n    ```", "```py\n    model_pca = PCA(n_components=30)\n    mnist_pca = model_pca.fit(mnist['images'].reshape((-1, 28 ** 2)))\n    ```", "```py\n    mnist_30comp = model_pca.transform(mnist['images'].reshape((-1, 28 ** 2)))\n    mnist_30comp_vis = model_pca.inverse_transform(mnist_30comp)\n    mnist_30comp_vis = mnist_30comp_vis.reshape((-1, 28, 28))\n    plt.figure(figsize=(10, 7))\n    for i in range(9):\n        plt.subplot(3, 3, i + 1)\n        plt.imshow(mnist_30comp_vis[i], cmap='gray')\n        plt.title(mnist['labels'][i])\n        plt.axis('off')\n    plt.show()\n    ```", "```py\n    model_tsne = TSNE(random_state=0, verbose=1)\n    model_tsne\n    ```", "```py\n    mnist_tsne = model_tsne.fit_transform(mnist_30comp)\n    ```", "```py\n    mnist_tsne.shape\n    ```", "```py\n    1000,2\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.scatter(mnist_tsne[:,0], mnist_tsne[:,1], s=5)\n    plt.title('Low Dimensional Representation of MNIST');\n    ```", "```py\n    MARKER = ['o', 'v', '1', 'p' ,'*', '+', 'x', 'd', '4', '.']\n    plt.figure(figsize=(10, 7))\n    plt.title('Low Dimensional Representation of MNIST');\n    for i in range(10):\n        selections = mnist_tsne[mnist['labels'] == i]\n        plt.scatter(selections[:,0], selections[:,1], alpha=0.2, marker=MARKER[i], s=5);\n        x, y = selections.mean(axis=0)\n        plt.text(x, y, str(i), fontdict={'weight': 'bold', 'size': 30})\n    plt.show()\n    ```", "```py\n    threes = np.where(mnist['labels'] == 3)[0]\n    threes\n    ```", "```py\n    tsne_threes = mnist_tsne[threes]\n    far_threes = np.where(tsne_threes[:,0]< 0)[0]\n    far_threes\n    ```", "```py\n    tsne_threes[far_threes]\n    ```", "```py\n    plt.imshow(mnist['images'][10], cmap='gray')\n    plt.axis('off');\n    plt.show()\n    ```", "```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.decomposition import PCA\n    from sklearn.manifold import TSNE\n    ```", "```py\n    with open('mnist.pkl', 'rb') as f:\n        mnist = pickle.load(f)\n    ```", "```py\n    model_pca = PCA(n_components=30)\n    mnist_pca = model_pca.fit_transform(mnist['images'].reshape((-1, 28 ** 2)))\n    ```", "```py\n    MARKER = ['o', 'v', '1', 'p' ,'*', '+', 'x', 'd', '4', '.']\n    for perp in [3, 30, 300]:\n        model_tsne = TSNE(random_state=0, verbose=1, perplexity=perp)\n        mnist_tsne = model_tsne.fit_transform(mnist_pca)\n        plt.figure(figsize=(10, 7))\n        plt.title(f'Low Dimensional Representation of MNIST (perplexity = {perp})');\n        for i in range(10):\n            selections = mnist_tsne[mnist['labels'] == i]\n            plt.scatter(selections[:,0], selections[:,1], alpha=0.2, marker=MARKER[i], s=5);\n            x, y = selections.mean(axis=0)\n            plt.text(x, y, str(i), fontdict={'weight': 'bold', 'size': 30})    \n    ```", "```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.decomposition import PCA\n    from sklearn.manifold import TSNE\n    ```", "```py\n    with open('mnist.pkl', 'rb') as f:\n        mnist = pickle.load(f)\n    ```", "```py\n    model_pca = PCA(n_components=30)\n    mnist_pca = model_pca.fit_transform(mnist['images'].reshape((-1, 28 ** 2)))\n    ```", "```py\n    MARKER = ['o', 'v', '1', 'p' ,'*', '+', 'x', 'd', '4', '.']\n    for iterations in [250, 500, 1000]:\n        model_tsne = TSNE(random_state=0, verbose=1, n_iter=iterations, n_iter_without_progress=iterations)\n        mnist_tsne = model_tsne.fit_transform(mnist_pca)\n    ```", "```py\n        plt.figure(figsize=(10, 7))\n        plt.title(f'Low Dimensional Representation of MNIST (iterations = {iterations})');\n        for i in range(10):\n            selections = mnist_tsne[mnist['labels'] == i]\n            plt.scatter(selections[:,0], selections[:,1], alpha=0.2, marker=MARKER[i], s=5);\n            x, y = selections.mean(axis=0)\n            plt.text(x, y, str(i), fontdict={'weight': 'bold', 'size': 30})    \n    ```"]