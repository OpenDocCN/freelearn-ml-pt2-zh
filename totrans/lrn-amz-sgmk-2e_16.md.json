["```py\n    AWSTemplateFormatVersion: 2010-09-09\n    Parameters:\n        ModelName:\n            Description: Model name\n            Type: String\n        ModelDataUrl:\n            Description: Location of model artifact\n            Type: String\n        ContainerImage:\n            Description: Container used to deploy the model\n            Type: String\n        InstanceType:\n            Description: Instance type\n            Type: String\n            Default: ml.m5.large\n        InstanceCount:\n            Description: Instance count\n            Type: String\n            Default: 1\n        RoleArn:\n            Description: Execution Role ARN\n            Type: String\n    ```", "```py\n    Resources:\n        Model:\n            Type: \"AWS::SageMaker::Model\"\n            Properties:\n                Containers:\n                    -\n                        Image: !Ref ContainerImage\n                        ModelDataUrl: !Ref ModelDataUrl\n                ExecutionRoleArn: !Ref RoleArn\n                ModelName: !Ref ModelName\n    ```", "```py\n        EndpointConfig:\n            Type: \"AWS::SageMaker::EndpointConfig\"\n            Properties:\n                ProductionVariants:\n                    -\n                     ModelName: !GetAtt Model.ModelName\n                     VariantName: variant-1\n                     InitialInstanceCount: !Ref InstanceCount\n                     InstanceType: !Ref InstanceType\n                     InitialVariantWeight: 1.0\n    ```", "```py\n        Endpoint:\n            Type: \"AWS::SageMaker::Endpoint\"\n            Properties:\n                EndpointConfigName: !GetAtt \n                EndpointConfig.EndpointConfigName\n    ```", "```py\n    Outputs:\n        EndpointId:\n            Value: !Ref Endpoint\n        EndpointName:\n            Value: !GetAtt Endpoint.EndpointName\n    ```", "```py\n    import boto3\n    sm = boto3.client('sagemaker')\n    cf = boto3.client('cloudformation')\n    ```", "```py\n    training_job = \n        'tensorflow-training-2021-05-28-14-25-57-394'\n    job = sm.describe_training_job(\n          TrainingJobName=training_job)\n    model_data_url =    \n        job['ModelArtifacts']['S3ModelArtifacts']\n    role_arn = job['RoleArn']\n    ```", "```py\n    container_image = '763104351884.dkr.ecr.us-east-1.amazonaws.com/tensorflow-inference:2.1.0-cpu-py36-ubuntu18.04'\n    ```", "```py\n    import time\n    timestamp = time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.gmtime())\n    stack_name='endpoint-one-model-'+timestamp\n    with open('endpoint-one-model.yml', 'r') as f:\n      response = cf.create_stack(\n          StackName=stack_name,\n          TemplateBody=f.read(),\n          Parameters=[\n               { \"ParameterKey\":\"ModelName\",      \n                 \"ParameterValue\":training_job+\n                                  '-'+timestamp },\n               { \"ParameterKey\":\"ContainerImage\",  \n                 \"ParameterValue\":container_image },\n               { \"ParameterKey\":\"ModelDataUrl\",   \n                 \"ParameterValue\":model_data_url },\n               { \"ParameterKey\":\"RoleArn\",       \n                 \"ParameterValue\":role_arn }\n          ]\n    )\n    ```", "```py\n    response = cf.describe_stacks(StackName=stack_name)\n    print(response['Stacks'][0]['StackStatus'])\n    for o in response['Stacks'][0]['Outputs']:\n        if o['OutputKey']=='EndpointName':\n             endpoint_name = o['OutputValue']\n    print(endpoint_name)\n    ```", "```py\n    cf.delete_stack(StackName=stack_name)\n    ```", "```py\n    response = cf.create_change_set(\n        StackName=stack_name,\n        ChangeSetName='add-instance',\n        UsePreviousTemplate=True,\n        Parameters=[\n          { \"ParameterKey\":\"InstanceCount\", \n            \"ParameterValue\": \"2\" },\n          { \"ParameterKey\":\"ModelName\",\n            \"UsePreviousValue\": True },\n          { \"ParameterKey\":\"ContainerImage\",\n            \"UsePreviousValue\": True },\n          { \"ParameterKey\":\"ModelDataUrl\",\n            \"UsePreviousValue\": True },\n          { \"ParameterKey\":\"RoleArn\",\n            \"UsePreviousValue\": True }\n        ]\n    )\n    ```", "```py\n    r = sm.describe_endpoint(EndpointName=endpoint_name)\n    print r(['ProductionVariants'][0]\n            ['CurrentInstanceCount'])\n    ```", "```py\n    2\n    ```", "```py\n        ModelName2:\n           Description: Second model name\n           Type: String\n        ModelDataUrl2:\n           Description: Location of second model artifact\n           Type: String\n        VariantWeight2:\n           Description: Weight of second model\n           Type: String\n        Default: 0.0\n    ```", "```py\n        Model2:\n           Type: \"AWS::SageMaker::Model\"\n           Properties:\n               Containers:\n                   - \n                       Image: !Ref ContainerImage\n                       ModelDataUrl: !Ref ModelDataUrl2\n           ExecutionRoleArn: !Ref RoleArn\n           ModelName: !Ref ModelName2\n    ```", "```py\n    training_job_2 = 'tensorflow-training-2020-06-08-07-32-18-734'\n    job_2=sm.describe_training_job(\n          TrainingJobName=training_job_2)\n    model_data_url_2=\n          job_2['ModelArtifacts']['S3ModelArtifacts']\n    with open('endpoint-two-models.yml', 'r') as f:\n        response = cf.create_change_set(\n            StackName=stack_name,\n            ChangeSetName='add-model',\n            TemplateBody=f.read(),\n            Parameters=[\n                 { \"ParameterKey\":\"ModelName\",      \n                   \"UsePreviousValue\": True },\n                 { \"ParameterKey\":\"ModelDataUrl\",   \n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"ContainerImage\", \n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"RoleArn\",        \n                  \"UsePreviousValue\": True }, \n                { \"ParameterKey\":\"ModelName2\",     \n                  \"ParameterValue\": training_job_2+'-\n                                    '+timestamp},\n                { \"ParameterKey\":\"ModelDataUrl2\",  \n                   \"ParameterValue\": model_data_url_2 }\n            ]\n        )\n    ```", "```py\n    cw = boto3.client('cloudwatch')\n    alarm_name = 'My_endpoint_latency'\n    response = cw.put_metric_alarm(\n        AlarmName=alarm_name,\n        ComparisonOperator='GreaterThanThreshold',\n        EvaluationPeriods=1,\n        MetricName='ModelLatency',\n        Namespace='AWS/SageMaker',\n        Period=60,\n        Statistic='Average',\n        Threshold=500000.0,\n        AlarmDescription=\n            '1-minute average latency exceeds 500ms',\n        Dimensions=[\n            { 'Name': 'EndpointName', \n              'Value': endpoint_name },\n            { 'Name': 'VariantName', \n              'Value': 'variant-2' }\n        ],\n        Unit='Microseconds'\n    )\n    ```", "```py\n    response = cw.describe_alarms(AlarmNames=[alarm_name])\n    for a in response['MetricAlarms']:\n        if a['AlarmName'] == alarm_name:\n            alarm_arn = a['AlarmArn']\n    ```", "```py\n    for w in list(range(10,110,10)):\n        response = cf.update_stack(\n            StackName=stack_name,\n            UsePreviousTemplate=True,\n            Parameters=[\n                { \"ParameterKey\":\"ModelName\",      \n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"ModelDataUrl\",\n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"ContainerImage\", \n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"RoleArn\",   \n                  \"UsePreviousValue\": True }, \n                { \"ParameterKey\":\"ModelName2\",\n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"ModelDataUrl2\",\n                  \"UsePreviousValue\": True },\n                { \"ParameterKey\":\"VariantWeight\",\n                  \"ParameterValue\": str(100-w) },\n                { \"ParameterKey\":\"VariantWeight2\", \n                  \"ParameterValue\": str(w) }\n            ],\n            RollbackConfiguration={\n                'RollbackTriggers': [\n                   { 'Arn': alarm_arn,: \n                     'AWS::CloudWatch::Alarm' }\n                ],\n                'MonitoringTimeInMinutes': 5\n            }\n        )\n        waiter = cf.get_waiter('stack_update_complete')\n        waiter.wait(StackName=stack_name)\n        print(\"Sending %d% of traffic to new model\" % w)\n    ```", "```py\n$ npm i -g aws-cdk\n$ cdk --version\n1.114.0 (build 7e41b6b)\n```", "```py\n    $ mkdir cdk\n    $ cd cdk\n    $ cdk init --language python --app endpoint\n    ```", "```py\n    $ source .venv/bin/activate\n    ```", "```py\n    -e .\n    aws_cdk.aws_s3\n    aws_cdk.aws_sagemaker\n    ```", "```py\n    $ pip install -r requirements.txt\n    ```", "```py\n    {\n      \"app\": \"python3 app.py\",\n      \"context\": {\n        \"role_arn\": \"arn:aws:iam::123456789012:role/Sagemaker-fullaccess\"\n        \"model_name\": \"tf2-fmnist\",\n        \"epc_name\": \"tf2-fmnist-epc\",\n        \"ep_name\": \"tf2-fmnist-ep\",\n        \"image\": \"763104351884.dkr.ecr.us-east-1.amazonaws.com/tensorflow-inference:2.1-cpu\",\n        \"model_data_url\": \"s3://sagemaker-us-east-1-123456789012/keras2-fashion-mnist/output/tensorflow-training-2020-06-08-07-46-04-367/output/model.tar.gz\"\n        \"instance_type\": \"ml.t2.xlarge\",\n        \"instance_count\": 1\n      }\n    }\n    ```", "```py\n    import time\n    from aws_cdk import (\n        aws_sagemaker as sagemaker,\n        core\n    )\n    ```", "```py\n    class SagemakerEndpoint(core.Stack):\n     def __init__(self, app: core.App, id: str, **kwargs) -> None:\n         timestamp = \n             '-'+time.strftime(\n                     \"%Y-%m-%d-%H-%M-%S\",time.gmtime())\n         super().__init__(app, id, **kwargs)\n    ```", "```py\n         model = sagemaker.CfnModel(\n             scope = self,\n             id=\"my_model\",\n             execution_role_arn= \n                 self.node.try_get_context(\"role_arn\"),\n             containers=[{ \n               \"image\": \n                 self.node.try_get_context(\"image\"),\n               \"modelDataUrl\":                  \n                 self.node.try_get_context(\"model_data_url\")\n             }],           \n             model_name= self.node.try_get_context(\n                         \"model_name\")+timestamp\n         )\n    ```", "```py\n         epc = sagemaker.CfnEndpointConfig(\n              scope=self,\n              id=\"my_epc\",\n              production_variants=[{\n                  \"modelName\": core.Fn.get_att(\n                                   model.logical_id, \n                                   'ModelName'\n                               ).to_string(),\n                  \"variantName\": \"variant-1\",\n                  \"initialVariantWeight\": 1.0,\n                  \"initialInstanceCount\": 1,\n                  \"instanceType\": \n                      self.node.try_get_context(\n                      \"instance_type\")\n              }],\n              endpoint_config_name=                   \n                      self.node.try_get_context(\"epc_name\")\n                      +timestamp\n        )\n    ```", "```py\n         ep = sagemaker.CfnEndpoint(\n             scope=self,\n             id=\"my_ep\",\n             endpoint_config_name=\n                 core.Fn.get_att(\n                     epc.logical_id,\n                     'EndpointConfigName'\n                 ).to_string(),\n             endpoint_name=\n                 self.node.try_get_context(\"ep_name\")\n                 +timestamp\n         )\n    ```", "```py\n    app = core.App()\n    SagemakerEndpoint(\n        app, \n        \"SagemakerEndpoint\", \n        env={'region': 'eu-west-1'}\n    )\n    app.synth()\n    ```", "```py\n    $ cdk list\n    SagemakerEndpointEU\n    ```", "```py\n    $ cdk synth SagemakerEndpointEU\n    ```", "```py\n    $ cdk destroy SagemakerEndpointEU\n    ```", "```py\n    import sagemaker\n    import pandas as pd\n    sess = sagemaker.Session()\n    bucket = sess.default_bucket()   \n    prefix = 'sklearn-boston-housing-stepfunc'\n    training_data = sess.upload_data(\n        path='housing.csv', \n        key_prefix=prefix + \"/training\")\n    data = pd.read_csv('housing.csv')\n    data.drop(['medv'], axis=1, inplace=True)\n    data.to_csv('test.csv', index=False, header=False)\n    batch_data = sess.upload_data(\n        path='test.csv', \n        key_prefix=prefix + \"/batch\")\n    ```", "```py\n    from sagemaker.sklearn import SKLearn\n    output = 's3://{}/{}/output/'.format(bucket,prefix)\n    sk = SKLearn(\n        entry_point='sklearn-boston-housing.py',\n        role=sagemaker.get_execution_role(),\n        framework_version='0.23-1',\n        train_instance_count=1,\n        train_instance_type='ml.m5.large',\n        output_path=output,\n        hyperparameters={\n            'normalize': True,\n            'test-size': 0.1\n        }\n    )\n    ```", "```py\n    sk_transformer = sk.transformer(\n        instance_count=1,\n        instance_type='ml.m5.large')\n    ```", "```py\n    import stepfunctions\n    from stepfunctions import steps\n    from stepfunctions.steps import TrainingStep, ModelStep, TransformStep\n    from stepfunctions.inputs import ExecutionInput\n    from stepfunctions.workflow import Workflow\n    ```", "```py\n    execution_input = ExecutionInput(schema={\n        'JobName': str,\n        'ModelName': str,\n        'EndpointName': str}\n    )\n    ```", "```py\n    from sagemaker.inputs import TrainingInput\n    training_step = TrainingStep(\n      'Train Scikit-Learn on the Boston Housing dataset',\n      estimator=sk,\n      data={'training': TrainingInput(\n           training_data,content_type='text/csv')},\n      job_name=execution_input['JobName']\n    )\n    ```", "```py\n    model_step = ModelStep(\n        'Create the model in SageMaker',\n        model=training_step.get_expected_model(),\n        model_name=execution_input['ModelName']\n    )\n    ```", "```py\n    transform_step = TransformStep(\n        'Transform the dataset in batch mode',\n        transformer=sk_transformer,\n        job_name=execution_input['JobName'],    \n        model_name=execution_input['ModelName'],\n        data=batch_data,\n        content_type='text/csv'\n    )\n    ```", "```py\n    endpoint_config_step = EndpointConfigStep(\n        \"Create an endpoint configuration for the model\",\n        endpoint_config_name=execution_input['ModelName'],\n        model_name=execution_input['ModelName'],\n        initial_instance_count=1,\n        instance_type='ml.m5.large'\n    )\n    ```", "```py\n    endpoint_step = EndpointStep(\n        \"Create an endpoint hosting the model\",\n        endpoint_name=execution_input['EndpointName'],\n        endpoint_config_name=execution_input['ModelName']\n    )\n    ```", "```py\n    workflow_definition = Chain([\n        training_step,\n        model_step,\n        transform_step,\n        endpoint_config_step,\n        endpoint_step\n    ])\n    ```", "```py\n    import time\n    timestamp = time.strftime(\"%Y-%m-%d-%H-%M-%S\", time.gmtime())\n    workflow_execution_role = \"arn:aws:iam::0123456789012:role/\n    StepFunctionsWorkflowExecutionRole\"\n    workflow = Workflow(\n        name='sklearn-boston-housing-workflow1-{}'\n             .format(timestamp),\n        definition=workflow_definition,\n        role=workflow_execution_role,\n        execution_input=execution_input\n    )\n    ```", "```py\n    workflow.render_graph(portrait=True)\n    ```", "```py\n    workflow.create()\n    ```", "```py\n    execution = workflow.execute(\n     inputs={\n       'JobName': 'sklearn-boston-housing-{}'\n                  .format(timestamp),\n       'ModelName': 'sklearn-boston-housing-{}'\n                    .format(timestamp),\n       'EndpointName': 'sklearn-boston-housing-{}'\n                       .format(timestamp)\n     }\n    )\n    ```", "```py\n    batch_branch = Chain([\n      transform_step\n    ])\n    endpoint_branch = Chain([\n      endpoint_config_step,\n      endpoint_step\n    ]) \n    ```", "```py\n    parallel_step = Parallel('Parallel execution')\n    parallel_step.add_branch(batch_branch)\n    parallel_step.add_branch(endpoint_branch)\n    ```", "```py\n    workflow_definition = Chain([\n        training_step,\n        model_step,\n        parallel_step\n    ])\n    ```", "```py\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [{\n        \"Effect\": \"Allow\",\n        \"Principal\": {\n          \"Service\": \"lambda.amazonaws.com\"\n        },\n        \"Action\": \"sts:AssumeRole\"\n      }]\n    }\n    ```", "```py\n    iam = boto3.client('iam')\n    with open('trust-policy.json') as f:\n        policy = f.read()\n        role_name = 'lambda-role-sagemaker-describe-endpoint'\n    response = iam.create_role(\n        RoleName=role_name,\n        AssumeRolePolicyDocument=policy,\n        Description='Allow function to invoke all SageMaker APIs'\n    )\n    role_arn = response['Role']['Arn']\n    ```", "```py\n    {\n      \"Version\": \"2012-10-17\",\n      \"Statement\": [\n        {\n          \"Effect\": \"Allow\",\n          \"Action\": \"sagemaker:DescribeEndpoint\",\n          \"Resource\": \"*\"\n        },\n        {\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"logs:CreateLogGroup\",\n              \"logs:CreateLogStream\",\n              \"logs:PutLogEvents\"\n          ],\n          \"Resource\": \"*\"\n         }\n      ]\n    }\n    ```", "```py\n    with open('policy.json') as f:\n        policy = f.read()\n    policy_name = 'Sagemaker-describe-endpoint'\n    response = iam.create_policy(\n        PolicyName=policy_name,\n        PolicyDocument=policy,\n        Description='Allow the DescribeEndpoint API'\n    )\n    policy_arn = response['Policy']['Arn']\n    response = iam.attach_role_policy(\n        RoleName=role_name,\n        PolicyArn=policy_arn\n    )\n    ```", "```py\n    $ zip -9 lambda.zip lambda.py\n    $ aws s3 cp lambda.zip s3://my-bucket\n    ```", "```py\n    lambda_client = boto3.client('lambda')\n    response = lambda_client.create_function(\n        FunctionName='sagemaker-wait-for-endpoint',\n        Role=role_arn,\n        Runtime='python3.6',\n        Handler='lambda.lambda_handler',\n        Code={\n            'S3Bucket': bucket_name,\n            'S3Key': 'lambda.zip'\n        },\n        Description='Wait for endpoint to be in service',\n        Timeout=900,\n        MemorySize=128\n    )\n    ```", "```py\n    lambda_step = LambdaStep(\n        'Wait for endpoint to be in service',\n        parameters={\n            'FunctionName': 'sagemaker-wait-for-endpoint',\n            'Payload': {\"EndpointArn.$\": \"$.EndpointArn\"}\n        },\n        timeout_seconds=900\n    )\n    endpoint_branch = steps.Chain([\n        endpoint_config_step,\n        endpoint_step,\n        lambda_step\n    ])\n    ```", "```py\n    from sagemaker.workflow.parameters import ParameterInteger, ParameterString\n    region = ParameterString(\n        name='Region',\n        default_value='eu-west-1')\n    processing_instance_type = ParameterString(\n        name='ProcessingInstanceType',\n        default_value='ml.m5.4xlarge')\n    processing_instance_count = ParameterInteger(\n        name='ProcessingInstanceCount',\n        default_value=1)\n    training_instance_type = ParameterString(\n        name='TrainingInstanceType',\n        default_value='ml.p3.2xlarge')\n    training_instance_count = ParameterInteger(\n        name='TrainingInstanceCount',\n        default_value=1)\n    ```", "```py\n    input_data = ParameterString(name='InputData')\n    model_name = ParameterString(name='ModelName')\n    model_approval_status = ParameterString(\n        name='ModelApprovalStatus',\n        default_value='PendingManualApproval')\n    ```", "```py\n    from sagemaker.sklearn.processing import SKLearnProcessor\n    sklearn_processor = SKLearnProcessor(\n        framework_version='0.23-1',\n        role=role,\n        instance_type=processing_instance_type,\n        instance_count=processing_instance_count)\n    ```", "```py\n    from sagemaker.workflow.steps import ProcessingStep\n    from sagemaker.processing import ProcessingInput, ProcessingOutput\n    step_process = ProcessingStep(\n        name='process-customer-reviews'\n        processor=sklearn_processor,\n        inputs=[\n            ProcessingInput(source=input_data, \n                destination=\"/opt/ml/processing/input\")],\n        outputs=[\n            ProcessingOutput(output_name='bt_data',\n                source='/opt/ml/processing/output/bt'),\n            ProcessingOutput(output_name='fs_data',\n                source='/opt/ml/processing/output/fs')],\n        code='preprocessing.py',\n        job_arguments=[\n            '--filename', \n            'amazon_reviews_us_Camera_v1_00.tsv.gz',\n            '--library', \n            'spacy']\n    )\n    ```", "```py\n    feature_group_name = 'amazon-reviews-feature-group-' + strftime('%d-%H-%M-%S', gmtime())\n    ```", "```py\n    step_ingest = ProcessingStep(\n        name='ingest-customer-reviews',\n        processor=sklearn_processor,\n        inputs=[\n           ProcessingInput(\n           source=\n            step_process.properties.ProcessingOutputConfig\n            .Outputs['fs_data'].S3Output.S3Uri,\n           destination=\"/opt/ml/processing/input\")],\n        outputs = [\n           ProcessingOutput(\n           output_name='feature_group_name',\n           source='/opt/ml/processing/output/')],\n        code='ingesting.py',\n        job_arguments=[\n           '--region', region,\n           '--bucket', bucket,\n           '--role', role,\n           '--feature-group-name', feature_group_name,\n           '--max-workers', '32']\n    )\n    ```", "```py\nstep_build_dataset = ProcessingStep(\n    name='build-dataset',\n    processor=sklearn_processor,\n    inputs=[\n      ProcessingInput(\n        source=\n          step_ingest.properties.ProcessingOutputConfig\n          .Outputs['feature_group_name'].S3Output.S3Uri,\n        destination='/opt/ml/processing/input')],\n    outputs=[\n      ProcessingOutput(\n        output_name='training',\n        source='/opt/ml/processing/output/training'),\n      ProcessingOutput(\n        output_name='validation',               \n        source='/opt/ml/processing/output/validation')],\n      code='querying.py',\n      job_arguments=[\n        '--region', region,\n        '--bucket', bucket,]\n)\n```", "```py\n    container = image_uris.retrieve(\n        'blazingtext', \n        str(region))     # region is a ParameterString\n    prefix = 'blazing-text-amazon-reviews'\n    s3_output = 's3://{}/{}/output/'.format(bucket, prefix)\n    bt = Estimator(container,\n                   role,\n                   instance_count=training_instance_count, \n                   instance_type=training_instance_type,\n                   output_path=s3_output)\n    bt.set_hyperparameters(mode='supervised')\n    ```", "```py\n    from sagemaker.workflow.steps import TrainingStep\n    from sagemaker.inputs import TrainingInput\n    step_train = TrainingStep(\n        name='train-blazing-text',\n        estimator=bt,\n        inputs={\n          'train': TrainingInput(s3_data=\n    step_build_dataset.properties.ProcessingOutputConfig\n    .Outputs['training'].S3Output.S3Uri,\n          content_type='text/plain'),\n           'validation': TrainingInput(s3_data=\n    step_build_dataset.properties.ProcessingOutputConfig\n    .Outputs['validation'].S3Output.S3Uri,\n          content_type='text/plain')\n        }\n    )\n    ```", "```py\n    from sagemaker.model import Model\n    from sagemaker.workflow.steps import CreateModelStep\n    model = Model(\n        image_uri=container,\n        model_data=step_train.properties\n                   .ModelArtifacts.S3ModelArtifacts,\n        sagemaker_session=session,\n        name=model_name,   # workflow parameter\n        role=role)\n    step_create_model = CreateModelStep(\n        name='create-model',\n        model=model,\n        inputs=None)\n    ```", "```py\n    from sagemaker.workflow.step_collections import RegisterModel\n    step_register = RegisterModel(\n        name='register-model',\n        estimator=bt,\n        model_data=step_train.properties.ModelArtifacts\n                   .S3ModelArtifacts,\n        content_types=['text/plain'],\n        response_types=['application/json'],\n        inference_instances=['ml.t2.medium'],\n        transform_instances=['ml.m5.xlarge'],\n        model_package_group_name='blazing-text-on-amazon-customer-reviews-package',\n        approval_status=model_approval_status\n    )\n    ```", "```py\nfrom sagemaker.workflow.pipeline import Pipeline\npipeline_name = 'blazing-text-amazon-customer-reviews'\npipeline = Pipeline(\n    name=pipeline_name,\n    parameters=[region, processing_instance_type, processing_instance_count, training_instance_type, training_instance_count, model_approval_status, input_data, model_name],\n    steps=[step_process, step_ingest, step_build_dataset, step_train, step_create_model, step_register])\npipeline.upsert(role_arn=role)\n```", "```py\n    execution = pipeline.start(\n        parameters=dict(\n            InputData=input_data_uri,\n            ModelName='blazing-text-amazon-reviews')\n    )\n    ```", "```py\n    from sagemaker.lineage.visualizer import LineageTableVisualizer\n    viz = LineageTableVisualizer(session)\n    for execution_step in reversed(execution.list_steps()):\n        print(execution_step)\n    display(viz.show(\n        pipeline_execution_step=execution_step))\n    ```", "```py\n    from sagemaker import ModelPackage\n    model_package_arn = 'arn:aws:sagemaker:eu-west-1:123456789012:model-package/blazing-text-on-amazon-customer-reviews-package/1'\n    model = sagemaker.ModelPackage(\n        role = role,\n        model_package_arn = model_package_arn)\n    ```", "```py\n    model.deploy(\n        initial_instance_count = 1,\n        instance_type = 'ml.t2.medium',\n        endpoint_name='blazing-text-on-amazon-reviews')\n    ```", "```py\n    from sagemaker.predictor import Predictor\n    bt_predictor = Predictor(\n        endpoint_name='blazing-text-on-amazon-reviews',\n        serializer=\n            sagemaker.serializers.JSONSerializer(),       \n        deserializer=\n            sagemaker.deserializers.JSONDeserializer())\n    instances = [' I really love this camera , it takes amazing pictures . ']\n    payload = {'instances': instances, \n               'configuration': {'k': 3}}\n    response = bt_predictor.predict(payload)\n    print(response)\n    ```", "```py\n    [{'label': ['__label__positive__', '__label__neutral__', '__label__negative__'],\n    'prob': [0.9999945163726807, 2.51355941145448e-05, 1.0307396223652177e-05]},\n    ```"]