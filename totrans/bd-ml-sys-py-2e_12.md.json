["```py\ndef double(x):\n return 2*x\n\n```", "```py\nfrom jug import Task\nt1 = Task(double, 3)\nt2 = Task(double, 642.34)\n\n```", "```py\n$ jug execute\n\n```", "```py\nfrom jug import TaskGenerator\nfrom time import sleep\n\n@TaskGenerator\ndef double(x):\n sleep(4)\n return 2*x\n\n@TaskGenerator\ndef add(a, b):\n return a + b\n\n@TaskGenerator\ndef print_final_result(oname, value):\n with open(oname, 'w') as output:\n output.write('Final result: {}\\n'.format(value))\n\ny = double(2)\nz = double(y)\n\ny2 = double(7)\nz2 = double(y2)\nprint_final_result('output.txt', add(z,z2))\n\n```", "```py\n$ jug execute &\n$ jug execute &\n\n```", "```py\n$ jug execute analysis.py\n\n```", "```py\nfrom jug import TaskGenerator\nimport mahotas as mh\nfrom glob import glob\n\n```", "```py\n@TaskGenerator\ndef compute_texture(im):\n from features import texture\n imc = mh.imread(im)\n return texture(mh.colors.rgb2gray(imc))\n\n@TaskGenerator\ndef chist_file(fname):\n from features import chist\n im = mh.imread(fname)\n return chist(im)\n\n```", "```py\nimport numpy as np\nto_array = TaskGenerator(np.array)\nhstack = TaskGenerator(np.hstack)\n\nharalicks = []\nchists = []\nlabels = []\n\n# Change this variable to point to\n# the location of the dataset on disk\nbasedir = '../SimpleImageDataset/'\n# Use glob to get all the images\nimages = glob('{}/*.jpg'.format(basedir))\n\nfor fname in sorted(images):\n haralicks.append(compute_texture(fname))\n chists.append(chist_file(fname))\n # The class is encoded in the filename as xxxx00.jpg\n labels.append(fname[:-len('00.jpg')])\n\nharalicks = to_array(haralicks)\nchists = to_array(chists)\nlabels = to_array(labels)\n\n```", "```py\n@TaskGenerator\ndef accuracy(features, labels):\n from sklearn.linear_model import LogisticRegression\n from sklearn.pipeline import Pipeline\n from sklearn.preprocessing import StandardScaler\n from sklearn import cross_validation\n\n clf = Pipeline([('preproc', StandardScaler()),\n ('classifier', LogisticRegression())])\n cv = cross_validation.LeaveOneOut(len(features))\n scores = cross_validation.cross_val_score(\n clf, features, labels, cv=cv)\n return scores.mean()\n\n```", "```py\nscores_base = accuracy(haralicks, labels)\nscores_chist = accuracy(chists, labels)\n\ncombined = hstack([chists, haralicks])\nscores_combined  = accuracy(combined, labels)\n\n```", "```py\n@TaskGenerator\ndef print_results(scores):\n with open('results.image.txt', 'w') as output:\n for k,v in scores:\n output.write('Accuracy [{}]: {:.1%}\\n'.format(\n k, v.mean()))\n\nprint_results([\n ('base', scores_base),\n ('chists', scores_chist),\n ('combined' , scores_combined),\n ])\n\n```", "```py\n$ jug execute image-classification.py\n\n```", "```py\n@TaskGenerator\ndef compute_lbp(fname):\n from mahotas.features import lbp\n imc = mh.imread(fname)\n im = mh.colors.rgb2grey(imc)\n # The parameters 'radius' and 'points' are set to typical values\n # check the documentation for their exact meaning\n return lbp(im, radius=8, points=6)\n\n```", "```py\nlbps = []\nfor fname in sorted(images):\n # the rest of the loop as before\n lbps.append(compute_lbp(fname))\nlbps = to_array(lbps)\n\n```", "```py\nscores_lbps = accuracy(lbps, labels)\ncombined_all = hstack([chists, haralicks, lbps])\nscores_combined_all = accuracy(combined_all, labels)\n\nprint_results([\n ('base', scores_base),\n ('chists', scores_chist),\n ('lbps', scores_lbps),\n ('combined' , scores_combined),\n ('combined_all' , scores_combined_all),\n ])\n\n```", "```py\n$ ssh -i awskeys.pem ec2-user@54.93.165.5\n\n```", "```py\n$ chmod 600 awskeys.pem\n\n```", "```py\n$ sudo yum -y install python-devel \\\n python-pip numpy scipy python-matplotlib\n\n```", "```py\n$ sudo yum -y install gcc-c++\n\n```", "```py\n$ sudo yum -y install git\n\n```", "```py\n$ sudo pip-python install -U pip\n$ sudo pip install scikit-learn jug mahotas\n\n```", "```py\n$ git clone \\\nhttps://github.com/luispedro/BuildingMachineLearningSystemsWithPython\n$ cd BuildingMachineLearningSystemsWithPython\n$ cd ch12\n\n```", "```py\n$ jug execute\n\n```", "```py\n$ # the loop below runs 8 times\n$ for counter in $(seq 8); do\n>     jug execute &\n> done\n\n```", "```py\n$ sudo pip install starcluster\n\n```", "```py\n$ starcluster help\n\n```", "```py\n[aws info]\nAWS_ACCESS_KEY_ID =  AAKIIT7HHF6IUSN3OCAA\nAWS_SECRET_ACCESS_KEY = <your secret key>\n```", "```py\n[cluster smallcluster]\nKEYNAME = mykey\nCLUSTER_SIZE = 16\n```", "```py\n$ starcluster createkey mykey -o ~/.ssh/mykey.rsa\n\n```", "```py\n$ starcluster start smallcluster\n\n```", "```py\n$ dir=BuildingMachineLearningSystemsWithPython\n$ starcluster put smallcluster $dir $dir\n\n```", "```py\n$ starcluster sshmaster smallcluster\n\n```", "```py\n$ pip install jug mahotas scikit-learn\n\n```", "```py\n#!/usr/bin/env bash\njug execute jugfile.py\n\n```", "```py\n$ for c in $(seq 16); do\n>    qsub -cwd run-jugfile.sh\n> done\n\n```", "```py\n# mkdir ~/results\n# cp results.image.txt ~/results\n\n```", "```py\n# exit\n\n```", "```py\n$ starcluster get smallcluster results results\n\n```", "```py\n$ starcluster stop smallcluster\n$ starcluster terminate smallcluster\n\n```"]