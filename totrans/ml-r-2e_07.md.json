["```py\n> concrete <- read.csv(\"concrete.csv\")\n> str(concrete)\n'data.frame':   1030 obs. of  9 variables:\n $ cement      : num  141 169 250 266 155 ...\n $ slag        : num  212 42.2 0 114 183.4 ...\n $ ash         : num  0 124.3 95.7 0 0 ...\n $ water       : num  204 158 187 228 193 ...\n $ superplastic: num  0 10.8 5.5 0 9.1 0 0 6.4 0 9 ...\n $ coarseagg   : num  972 1081 957 932 1047 ...\n $ fineagg     : num  748 796 861 670 697 ...\n $ age         : int  28 14 28 28 28 90 7 56 28 28 ...\n $ strength    : num  29.9 23.5 29.2 45.9 18.3 ...\n\n```", "```py\n> normalize <- function(x) {\n return((x - min(x)) / (max(x) - min(x)))\n }\n\n```", "```py\n> concrete_norm <- as.data.frame(lapply(concrete, normalize))\n\n```", "```py\n> summary(concrete_norm$strength)\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.0000  0.2664  0.4001  0.4172  0.5457  1.0000\n\n```", "```py\n> summary(concrete$strength)\n Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 2.33   23.71   34.44   35.82   46.14   82.60\n\n```", "```py\n> concrete_train <- concrete_norm[1:773, ]\n> concrete_test <- concrete_norm[774:1030, ]\n\n```", "```py\n> concrete_model <- neuralnet(strength ~ cement + slag + ash + water + superplastic + coarseagg + fineagg + age, data = concrete_train)\n\n```", "```py\n> plot(concrete_model)\n\n```", "```py\n> model_results <- compute(concrete_model, concrete_test[1:8])\n\n```", "```py\n> predicted_strength <- model_results$net.result\n\n```", "```py\n> cor(predicted_strength, concrete_test$strength)\n [,1]\n[1,] 0.8064655576\n\n```", "```py\n> concrete_model2 <- neuralnet(strength ~ cement + slag +\n ash + water + superplastic +\n coarseagg + fineagg + age,\n data = concrete_train, hidden = 5)\n\n```", "```py\n> plot(concrete_model2)\n\n```", "```py\n> model_results2 <- compute(concrete_model2, concrete_test[1:8])\n> predicted_strength2 <- model_results2$net.result\n> cor(predicted_strength2, concrete_test$strength)\n [,1]\n[1,] 0.9244533426\n\n```", "```py\n> letters <- read.csv(\"letterdata.csv\")\n> str(letters)\n'data.frame':  20000 obs. of 17 variables:\n $ letter: Factor w/ 26 levels \"A\",\"B\",\"C\",\"D\",..\n $ xbox  : int  2 5 4 7 2 4 4 1 2 11 ...\n $ ybox  : int  8 12 11 11 1 11 2 1 2 15 ...\n $ width : int  3 3 6 6 3 5 5 3 4 13 ...\n $ height: int  5 7 8 6 1 8 4 2 4 9 ...\n $ onpix : int  1 2 6 3 1 3 4 1 2 7 ...\n $ xbar  : int  8 10 10 5 8 8 8 8 10 13 ...\n $ ybar  : int  13 5 6 9 6 8 7 2 6 2 ...\n $ x2bar : int  0 5 2 4 6 6 6 2 2 6 ...\n $ y2bar : int  6 4 6 6 6 9 6 2 6 2 ...\n $ xybar : int  6 13 10 4 6 5 7 8 12 12 ...\n $ x2ybar: int  10 3 3 4 5 6 6 2 4 1 ...\n $ xy2bar: int  8 9 7 10 9 6 6 8 8 9 ...\n $ xedge : int  0 2 3 6 1 0 2 1 1 8 ...\n $ xedgey: int  8 8 7 10 7 8 8 6 6 1 ...\n $ yedge : int  0 4 3 2 5 9 7 2 1 1 ...\n $ yedgex: int  8 10 9 8 10 7 10 7 7 8 ...\n\n```", "```py\n> letters_train <- letters[1:16000, ]\n> letters_test  <- letters[16001:20000, ]\n\n```", "```py\n> library(kernlab)\n> letter_classifier <- ksvm(letter ~ ., data = letters_train,\n kernel = \"vanilladot\")\n\n```", "```py\n> letter_classifier\nSupport Vector Machine object of class \"ksvm\" \n\nSV type: C-svc  (classification) \n parameter : cost C = 1 \n\nLinear (vanilla) kernel function. \n\nNumber of Support Vectors : 7037 \n\nObjective Function Value : -14.1746 -20.0072 -23.5628 -6.2009 -7.5524 -32.7694 -49.9786 -18.1824 -62.1111 -32.7284 -16.2209...\n\nTraining error : 0.130062\n\n```", "```py\n> letter_predictions <- predict(letter_classifier, letters_test)\n\n```", "```py\n> head(letter_predictions)\n[1] U N V X N H\nLevels: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n\n```", "```py\n> table(letter_predictions, letters_test$letter)\nletter_predictions   A   B   C   D   E\n A 144   0   0   0   0\n B   0 121   0   5   2\n C   0   0 120   0   4\n D   2   2   0 156   0\n E   0   0   5   0 127\n\n```", "```py\n> agreement <- letter_predictions == letters_test$letter\n\n```", "```py\n> table(agreement)\nagreement\nFALSE  TRUE\n643 3357\n\n```", "```py\n> prop.table(table(agreement))\nagreement\n FALSE    TRUE\n0.16075 0.83925\n\n```", "```py\n> letter_classifier_rbf <- ksvm(letter ~ ., data = letters_train,\n kernel = \"rbfdot\")\n\n```", "```py\n> letter_predictions_rbf <- predict(letter_classifier_rbf,\n letters_test)\n\n```", "```py\n> agreement_rbf <- letter_predictions_rbf == letters_test$letter\n> table(agreement_rbf)\nagreement_rbf\nFALSE  TRUEâ€©\n  275  3725\n> prop.table(table(agreement_rbf))\nagreement_rbf\n FALSE    TRUE\n0.06875 0.93125\n\n```"]