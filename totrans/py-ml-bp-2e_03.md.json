["```py\nimport numpy as np \nimport pandas as pd \nimport matplotlib.pyplot as plt \n%matplotlib inline \n```", "```py\nfrom bs4 import BeautifulSoup \nfrom selenium import webdriver \n\n# replace this with the path of where you downloaded chromedriver \nchromedriver_path = \"/Users/alexcombs/Downloads/chromedriver\" \n\nbrowser = webdriver.Chrome(chromedriver_path) \n```", "```py\nsats = 'https://www.google.com/flights/f=0#f=0&flt=/m/02_286.r/m/02j9z.2018-12-01*r/m/02j9z./m/02_286.2018-12-08;c:USD;e:1;s:0*1;sd:1;t:e' \n```", "```py\nbrowser.get(sats) \n```", "```py\nbrowser.title \n```", "```py\nbrowser.save_screenshot('/Users/alexcombs/Desktop/test_flights.png') \n```", "```py\nsoup = BeautifulSoup(browser.page_source, \"html5lib\") \n```", "```py\ncards = soup.select('div[class*=info-container]') cards[0] \n```", "```py\nfor card in cards: \n    print(card.select('h3')[0].text) \n    print(card.select('span[class*=price]')[0].text) \n    print('\\n') \n```", "```py\nfrom datetime import date, timedelta \nfrom time import sleep \n```", "```py\nstart_sat = '2018-12-01' \nend_sat = '2018-12-08' \n\nstart_sat_date = datetime.strptime(start_sat, '%Y-%m-%d') \nend_sat_date = datetime.strptime(end_sat, '%Y-%m-%d') \n\nfare_dict = {} \n\nfor i in range(26):     \n    sat_start = str(start_sat_date).split()[0] \n    sat_end = str(end_sat_date).split()[0] \n\n    fare_dict.update({sat_start: {}}) \n\n    sats = \"https://www.google.com/flights/?f=0#f=0&flt=/m/02_286.r/m/02j9z.\" + \\ \n    sat_start + \"*r/m/02j9z./m/02_286.\" + \\ \n    sat_end + \";c:USD;e:1;s:0*1;sd:1;t:e\" \n\n    sleep(np.random.randint(3,7)) \n    browser.get(sats) \n\n    soup = BeautifulSoup(browser.page_source, \"html5lib\") \n\n    cards = soup.select('div[class*=info-container]') \n\n    for card in cards: \n        city = card.select('h3')[0].text \n        fare = card.select('span[class*=price]')[0].text \n        fare_dict[sat_start] = {**fare_dict[sat_start], **{city: fare}} \n\n    start_sat_date = start_sat_date + timedelta(days=7) \n    end_sat_date = end_sat_date + timedelta(days=7) \n```", "```py\nfare_dict \n```", "```py\ncity_key = 'Berlin' \nfor key in fare_dict: \n    print(key, fare_dict[key][city_key]) \n```", "```py\ncity_dict = {} \nfor k,v in fare_dict.items(): \n    city_dict.update({k:int(v[city_key].replace(',','').split('$')[1])}) \n```", "```py\nprices = [int(x) for x in city_dict.values()] \ndates = city_dict.keys() \n\nfig,ax = plt.subplots(figsize=(10,6)) \nplt.scatter(dates, prices, color='black', s=50) \nax.set_xticklabels(dates, rotation=-70); \n```", "```py\ncity_key = 'Milan' \nfor key in fare_dict: \n    print(key, fare_dict[key][city_key]) \n```", "```py\ncity_dict = {} \nfor k,v in fare_dict.items(): \n    city_dict.update({k:int(v[city_key].replace(',','').split('$')[1])}) \n\ncity_dict \n```", "```py\nprices = [int(x) for x in city_dict.values()] \ndates = city_dict.keys() \n\nfig,ax = plt.subplots(figsize=(10,6)) \nplt.scatter(dates, prices, color='black', s=50) \nax.set_xticklabels(dates, rotation=-70); \n```", "```py\nfrom scipy import stats \nfix, ax = plt.subplots(figsize=(10,6)) \nstats.probplot(list(city_dict.values()), plot=plt) \nplt.show() \n```", "```py\nfrom PyAstronomy import pyasl \n\nr = pyasl.generalizedESD(prices, 3, 0.025, fullOutput=True) \n\nprint('Total Outliers:', r[0]) \n\nout_dates = {} \nfor i in sorted(r[1]): \n    out_dates.update({list(dates)[i]: list(prices)[i]}) \n\nprint('Outlier Dates', out_dates.keys(), '\\n') \nprint('     R         Lambda') \n\nfor i in range(len(r[2])): \n    print('%2d  %8.5f  %8.5f' % ((i+1), r[2][i], r[3][i])) \n\nfig, ax = plt.subplots(figsize=(10,6)) \nplt.scatter(dates, prices, color='black', s=50) \nax.set_xticklabels(dates, rotation=-70); \n\nfor i in range(r[0]): \n    plt.plot(r[1][i], prices[r[1][i]], 'rp') \n```", "```py\ncity_mean = np.mean(list(city_dict.values())) \n\nfor k,v in out_dates.items(): \n    if v < city_mean: \n        print('Alert for', city_key + '!') \n        print('Fare: $' + str(v), 'on', k) \n        print('\\n') \n```", "```py\nimport sys \nimport sys \nimport numpy as np \nfrom bs4 import BeautifulSoup \nfrom selenium import webdriver \nimport requests \nimport scipy \nfrom PyAstronomy import pyasl \n\nfrom datetime import date, timedelta, datetime \nimport time \nfrom time import sleep \nimport schedule \n```", "```py\ndef check_flights(): \n   # replace this with the path of where you downloaded chromedriver \n   chromedriver_path = \"/Users/alexcombs/Downloads/chromedriver\" \n\n   browser = webdriver.Chrome(chromedriver_path) \n\n   start_sat = sys.argv[2] \n   end_sat = sys.argv[3] \n\n   start_sat_date = datetime.strptime(start_sat, '%Y-%m-%d') \n   end_sat_date = datetime.strptime(end_sat, '%Y-%m-%d') \n\n   fare_dict = {} \n\n   for i in range(26):     \n       sat_start = str(start_sat_date).split()[0] \n       sat_end = str(end_sat_date).split()[0] \n\n       fare_dict.update({sat_start: {}}) \n\n       sats = \"https://www.google.com/flights/?f=0#f=0&flt=/m/02_286.r/m/02j9z.\" + \\ \n       sat_start + \"*r/m/02j9z./m/02_286.\" + \\ \n       sat_end + \";c:USD;e:1;s:0*1;sd:1;t:e\" \n\n       sleep(np.random.randint(10,15)) \n\n       browser.get(sats) \n       soup = BeautifulSoup(browser.page_source, \"html5lib\") \n\n       cards = soup.select('div[class*=info-container]') \n\n       for card in cards: \n           city = card.select('h3')[0].text \n           fare = card.select('span[class*=price]')[0].text \n           fare_dict[sat_start] = {**fare_dict[sat_start], **{city: fare}} \n\n       start_sat_date = start_sat_date + timedelta(days=7) \n       end_sat_date = end_sat_date + timedelta(days=7) \n\n   city_key = sys.argv[1] \n\n   city_dict = {} \n   for k,v in fare_dict.items(): \n       city_dict.update({k:int(v[city_key].replace(',','').split('$')[1])}) \n\n   prices = [int(x) for x in city_dict.values()] \n   dates = city_dict.keys() \n\n   r = pyasl.generalizedESD(prices, 3, 0.025, fullOutput=True) \n\n   print('Total Outliers:', r[0]) \n\n   out_dates = {} \n   for i in sorted(r[1]): \n       out_dates.update({list(dates)[i]: list(prices)[i]}) \n\n   city_mean = np.mean(list(city_dict.values())) \n\n   for k,v in out_dates.items(): \n       if v < city_mean: \n          requests.post('https://maker.ifttt.com/trigger/cheap_fares/with/key/bNHFwiZx0wMS7EnD425n3T', \\ \n             data={ \"value1\" : str(city_key), \"value2\" : str(v), \"value3\" : \"\" }) \n          print('Alert for', city_key + '!') \n          print('Fare: $' + str(v), 'on', k) \n          print('\\n') \n       else: \n          print(str(v) + ' is greater than ' + str(city_mean)) \n\n```", "```py\n# set up the scheduler to run our code every 60 min \nschedule.every(60).minutes.do(check_flights) \n\nwhile 1: \n    schedule.run_pending() \n    time.sleep(1) \n```", "```py\npython fare_alerter.py 'Milan' '2018-12-01' '2018-12-08'\n```"]