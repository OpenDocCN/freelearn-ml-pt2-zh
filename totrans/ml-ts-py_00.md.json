["```py\nconda install numpy \n```", "```py\nconda install r-caret \n```", "```py\npip install xgboost \n```", "```py\n!pip install xgboost \n```", "```py\n# install NumPy: \npip install numpy\n# install a particular version:\npip install numpy==1.20.0\n# upgrade a library:\npip install -U numpy\n# install all libraries listed in a requirements file:\npip install -r production/requirements.txt\n# write a list of all installed libraries and their versions to a file:\npip freeze > production/requirements.txt \n```", "```py\n# create a new environment myenv:\nvirtualenv myenv\n# activate the myenv environment:\nsource myenv/bin/activate\n# install dependencies or run python, for example:\npython\n# leave the environment again:\ndeactivate \n```", "```py\n# activate the myenv environment:\nmyenv\\Scripts\\activate.bat \n```", "```py\njupyter notebook \n```", "```py\njupyter lab \n```", "```py\nimport numpy as np\n# 1 dimensional array:\nx1 = np.array([1, 2, 3])\n>>> array([0, 1, 2])\nx2 = np.arange(3)\n>>> array([0, 1, 2])\nx1 == x2 \n>>> True\n# 2 dimensional array: \ny = np.array([(1, 2, 3),(4, 5, 6)]) \n```", "```py\n>> np.info(optimize.fmin)\nfmin(func, x0, args=(), xtol=0.0001, ftol=0.0001, maxiter=None, maxfun=None,full_output=0, disp=1, retall=0, callback=None)\nMinimize a function using the downhill simplex algorithm.\nParameters\n----------\nfunc : callable func(x,*args)\n    The objective function to be minimized.\nx0 : ndarray\n    Initial guess.\nargs : tuple\n    Extra arguments passed to func, i.e. ``f(x,*args)``.\ncallback : callable\n    Called after each iteration, as callback(xk), where xk is the\n    current parameter vector.\nReturns\n-------\nxopt : ndarray\n    Parameter that minimizes function.\nfopt : float\n    Value of function at minimum: ``fopt = func(xopt)``.\niter : int\n    Number of iterations performed.\nâ€¦\nNotes\n-----\nUses a Nelder-Mead simplex algorithm to find the minimum of function of\none or more variables. \n```", "```py\nimport pandas as pd\n# read a csv file:\ndf = pd.read_csv('value.csv')\n# find how many rows in a dataframe:\nlen(df)\n# return the head or tail of a dataframe:\ndf.head()\ndf.tail()\n# print the full dataframe:\nwith pd.option_context(\n  'display.max_rows', None,\n  'display.max_columns', None\n):\n  print(df)\n# create a dataframe:\ndf2 = pd.DataFrame({\"A\": [1, 2], \"B\": [3, 4]})\n# plot two columns against each other:\ndf2.plot(x='A', y='B', kind='scatter')\n# save the dataframe to a csv:\ndf2.to_csv('new_file.csv', index=False)\n# output to NumPy matrix:\ndf2.to_numpy() \n```", "```py\narray([[1, 3],\n       [2, 4]]) \n```", "```py\nflake8 --shore-source --show-pep8 myscript.py \n```"]