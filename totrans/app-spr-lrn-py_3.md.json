["```py\n    Import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    ```", "```py\n    df = pd.read_csv('synth_temp.csv')\n    df.head()\n    ```", "```py\n    df = df.loc[df.Year > 1901]\n    df.head()\n    ```", "```py\n    df_group_year = df.groupby('Year').agg(np.mean)\n    df_group_year.head()\n    ```", "```py\n    window = 10\n    rolling = df_group_year.AverageTemperature.rolling(window).mean()\n    rolling.head(n=20)\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_axes([1, 1, 1, 1]);\n    # Temp measurements\n    ax.scatter(df_group_year.index, df_group_year.AverageTemperature, label='Raw Data', c='k');\n    ax.plot(df_group_year.index, rolling, c='k', linestyle='--', label=f'{window} year moving average');\n    ax.set_title('Mean Air Temperature Measurements')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Temperature (degC)')\n    ax.set_xticks(range(df_group_year.index.min(), df_group_year.index.max(), 10))\n    ax.legend();\n    ```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```", "```py\n    from sklearn.linear_model import LinearRegression\n    ```", "```py\n    model = LinearRegression()\n    model\n    ```", "```py\n    model.fit(df_group_year.index.values.reshape((-1, 1)), gf_group_year.AverageTemperature)\n    ```", "```py\n    print(f'm = {model.coef_[0]}')\n    print(f'c = {model.intercept_}')\n    print('\\nModel Definition')\n    print(f'y = {model.coef_[0]:0.4}x + {model.intercept_:0.4f}')\n    ```", "```py\n    trend_x = np.array([\n        df_group_year.index.values.min(),\n        df_group_year.index.values.mean(),\n        df_group_year.index.values.max()\n    ])\n    trend_y = model.predict(trend_x.reshape((-1, 1)))\n    trend_y\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_axes([1, 1, 1, 1]);\n    # Temp measurements\n    ax.scatter(df_group_year.index, df_group_year.AverageTemperature, label='Raw Data', c='k');\n    ax.plot(df_group_year.index, rolling, c='k', linestyle='--', label=f'{window} year moving average');\n    ax.plot(trend_x, trend_y, c='k', label='Model: Predicted trendline')\n    ax.set_title('Mean Air Temperature Measurements')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Temperature (degC)')\n    ax.set_xticks(range(df_group_year.index.min(), df_group_year.index.max(), 10))\n    ax.legend();\n    ```", "```py\n# Note the year values need to be provided as an N x 1 array\nr2 = model.score(df_group_year.index.values.reshape((-1, 1)), df_group_year.AverageTemperature)\nprint(f'r2 score = {r2:0.4f}')\n```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n# Loading the data from activity 5\ndf = pd.read_csv('activity2_measurements.csv')\ndf_first_year = df[:365]\nrolling = pd.read_csv('activity2_rolling.csv')\nwindow = 20\n```", "```py\n    df_group_year['Year'] = df_group_year.index\n    ```", "```py\n    df_group_year['Gt_1960'] = [0 if year < 1960 else 10 for year in df_group_year.Year] # Dummy Variable - greater than 1960\n    df_group_year.head(n=2)\n    ```", "```py\n    df_group_year['Gt_1945'] = [0 if year < 1945 else 10 for year in df_group_year.Year]# Dummy Variable - greater than 1945\n    df_group_year.head(n=2)\n    ```", "```py\n    df_group_year.tail(n=2)\n    ```", "```py\n    # Note the year values need to be provided as an N x 1 array\n    model.fit(df_group_year[['Year', 'Gt_1960', 'Gt_1945']], df_group_year.AverageTemperature)\n    ```", "```py\n    # Note the year values need to be provided as an N x 1 array\n    r2 = model.score(df_group_year[['Year', 'Gt_1960', 'Gt_1945']], df_group_year.AverageTemperature)\n    print(f'r2 score = {r2:0.4f}')\n    ```", "```py\n    # Use linspace to get a range of values, in 20 year increments\n    x = np.linspace(df_group_year['Year'].min(), df_group_year['Year'].max(), 20)\n    x\n    ```", "```py\n    trend_x = np.zeros((20, 3))\n    trend_x[:,0] = x # Assign to the first column\n    trend_x[:,1] = [10 if _x > 1960 else 0 for _x in x] # Assign to the second column\n    trend_x[:,2] = [10 if _x > 1945 else 0 for _x in x] # Assign to the third column \n    trend_x\n    ```", "```py\n    trend_y = model.predict(trend_x)\n    trend_y\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_axes([1, 1, 1, 1]);\n    # Temp measurements\n    ax.scatter(df_group_year.index, df_group_year.AverageTemperature, label='Raw Data', c='k');\n    ax.plot(df_group_year.index, rolling, c='k', linestyle='--', label=f'{window} year moving average');\n    ax.plot(trend_x[:,0], trend_y, c='k', label='Model: Predicted trendline')\n    ax.set_title('Mean Air Temperature Measurements')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Temperature (degC)')\n    ax.set_xticks(range(df_group_year.index.min(), df_group_year.index.max(), 10))\n    ax.legend();\n    ```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n# Loading the data from activity 5\ndf = pd.read_csv('activity2_measurements.csv')\ndf_first_year = pd.read_csv('activity_first_year.csv')\nrolling = pd.read_csv('activity2_rolling.csv')\nwindow = 20\n# Trendline values\ntrend_x = np.array([\n    1,\n    182.5,\n    365\n])\n```", "```py\n    df_group_year['Year'] = df_group_year.index\n    df_group_year['Year2'] = df_group_year.index ** 2\n    df_group_year.head()\n    ```", "```py\n    # Note the year values need to be provided as an N x 1 array\n    model.fit(df_group_year[['Year2', 'Year']], df_group_year.AverageTemperature)\n    ```", "```py\n    print(f'a = {model.coef_[0]}')\n    print(f'm = {model.coef_[1]}')\n    print(f'c = {model.intercept_}')\n    print('\\nModel Definition')\n    print(f'y = {model.coef_[0]:0.4}x^2 + {model.coef_[1]:0.4}x + {model.intercept_:0.4f}')\n    ```", "```py\n    # Note the year values need to be provided as an N x 1 array\n    r2 = model.score(df_group_year[['Year2', 'Year']], df_group_year.AverageTemperature)\n    print(f'r2 score = {r2:0.4f}')\n    ```", "```py\n    # Use linspace to get a range of values, in 20 yr increments\n    x = np.linspace(df_group_year['Year'].min(), df_group_year['Year'].max(), 20)\n    x\n    ```", "```py\n    trend_x = np.zeros((20, 2))\n    trend_x[:,0] = x ** 2 # Assign to the first column\n    trend_x[:,1] = x # Assign to the second column \n    trend_x\n    ```", "```py\n    trend_y = model.predict(trend_x)\n    trend_y\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_axes([1, 1, 1, 1]);\n    # Temp measurements\n    ax.scatter(df_group_year.index, df_group_year.AverageTemperature, label='Raw Data', c='k');\n    ax.plot(df_group_year.index, rolling, c='k', linestyle='--', label=f'{window} year moving average');\n    ax.plot(trend_x[:,1], trend_y, c='k', label='Model: Predicted trendline')\n    ax.set_title('Mean Air Temperature Measurements')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Temperature (degC)')\n    ax.set_xticks(range(df_group_year.index.min(), df_group_year.index.max(), 10))\n    ax.legend();\n    ```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LinearRegression\n# Loading the data from activity 5\ndf = pd.read_csv('activity2_measurements.csv')\ndf_first_year = pd.read_csv('activity_first_year.csv')\nrolling = pd.read_csv('activity2_rolling.csv')\nwindow = 20\n# Trendline values\ntrend_x = np.array([\n    1,\n    182.5,\n    365\n])\n```", "```py\n    def h_x(weights, x):\n        return np.dot(weights, x).flatten()\n    ```", "```py\n    x = np.ones((2, len(df_group_year)))\n    x[0,:] = df_group_year.Year\n    x[1,:] = 1\n    x /= x.max()\n    x[:,:5]\n    ```", "```py\n    np.random.seed(255) # Ensure the same starting random values\n    ```", "```py\n    Theta = np.random.randn(2).reshape((1, 2)) * 0.1\n    Theta\n    ```", "```py\n    y_true = df_group_year.AverageTemperature.values\n    ```", "```py\n    def J_theta(pred, true):\n        return np.mean((pred - true) ** 2) # mean squared error\n    ```", "```py\n    gamma = 1e-6\n    ```", "```py\n    def update(pred, true, x, gamma):\n        return gamma * np.sum((true - pred) * x, axis=1)\n    ```", "```py\n    max_epochs = 100000\n    ```", "```py\n    y_pred = h_x(Theta, x)\n    print(f'Initial cost J(Theta) = {J_theta(y_pred, y_true): 0.3f}')\n    ```", "```py\n    Theta += update(y_pred, y_true, x, gamma)\n    y_pred = h_x(Theta, x)\n    print(f'Initial cost J(Theta) = {J_theta(y_pred, y_true): 0.3f}')\n    ```", "```py\n    error_hist = []\n    epoch_hist = []\n    for epoch in range(max_epochs):\n        Theta += update(y_pred, y_true, x, gamma)\n        y_pred = h_x(Theta, x)  \n\n        if (epoch % 10) == 0:\n            _err = J_theta(y_pred, y_true)\n            error_hist.append(_err)\n            epoch_hist.append(epoch)\n            print(f'epoch:{epoch:4d} J(Theta) = {_err: 9.3f}')\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(epoch_hist, error_hist);\n    plt.title('Training History');\n    plt.xlabel('epoch');\n    plt.ylabel('Error');\n    ```", "```py\n    from sklearn.metrics import r2_score\n    r2_score(y_true, y_pred)\n    ```", "```py\n    # Use linspace to get a range of values, in 20 yr increments\n    x = np.linspace(df_group_year['Year'].min(), df_group_year['Year'].max(), 20)\n    x\n    ```", "```py\n    trend_x = np.ones((2, len(x)))\n    trend_x[0,:] = x\n    trend_x[1,:] = 1\n    trend_x /= trend_x.max()\n    trend_x\n    ```", "```py\n    trend_y = h_x(Theta, trend_x)\n    trend_y\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_axes([1, 1, 1, 1]);\n    # Temp measurements\n    ax.scatter(df_group_year.index, df_group_year.AverageTemperature, label='Raw Data', c='k');\n    ax.plot(df_group_year.index, rolling, c='k', linestyle='--', label=f'{window} year moving average');\n    ax.plot(x, trend_y, c='k', label='Model: Predicted trendline')\n    ax.set_title('Mean Air Temperature Measurements')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Temperature (degC)')\n    ax.set_xticks(range(df_group_year.index.min(), df_group_year.index.max(), 10))\n    ax.legend();\n    ```", "```py\n    from sklearn.linear_model import SGDRegressor\n    model = SGDRegressor(\n        max_iter=100000,\n        learning_rate='constant',\n        eta0=1e-6,\n        random_state=255,\n        tol=1e-6,\n        penalty='none',\n    )\n    ```", "```py\n    x = df_group_year.Year / df_group_year.Year.max()\n    y_true = df_group_year.AverageTemperature.values.ravel()\n    model.fit(x.values.reshape((-1, 1)), y_true)\n    ```", "```py\n    y_pred = model.predict(x.values.reshape((-1, 1)))\n    r2_score(y_true, y_pred)\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_axes([1, 1, 1, 1]);\n    # Temp measurements\n    ax.scatter(df_group_year.index, df_group_year.AverageTemperature, label='Raw Data', c='k');\n    ax.plot(df_group_year.index, rolling, c='k', linestyle='--', label=f'{window} year moving average');\n    ax.plot(x, trend_y, c='k', label='Model: Predicted trendline')\n    ax.set_title('Mean Air Temperature Measurements')\n    ax.set_xlabel('Year')\n    ax.set_ylabel('Temperature (degC)')\n    ax.set_xticks(range(df_group_year.index.min(), df_group_year.index.max(), 10))\n    ax.legend();\n    ```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import SGDRegressor\n# Loading the data from activity 5\ndf = pd.read_csv('activity2_measurements.csv')\ndf_first_year = pd.read_csv('activity_first_year.csv')\nrolling = pd.read_csv('activity2_rolling.csv')\nwindow = 20\n# Trendline values\ntrend_x = np.array([\n    1,\n    182.5,\n    365\n])\n```", "```py\n    import numpy as np\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    from sklearn.linear_model import LinearRegression\n    ```", "```py\n    df = pd.read_csv('housing_data.csv')\n    df.head()\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    fig.suptitle('Parameters vs Median Value')\n    ax1 = fig.add_subplot(121)\n    ax1.scatter(df.LSTAT, df.MEDV, marker='*', c='k');\n    ax1.set_xlabel('% lower status of the population')\n    ax1.set_ylabel('Median Value in $1000s')\n    ax2 = fig.add_subplot(122, sharey=ax1)\n    ax2.scatter(df.RM, df.MEDV, marker='*', c='k');\n    ax2.get_yaxis().set_visible(False)\n    ax2.set_xlabel('average number of rooms per dwelling');\n    ```", "```py\n    model = LinearRegression()\n    model.fit(df.LSTAT.values.reshape((-1, 1)), df.MEDV.values.reshape((-1, 1)))\n    model.score(df.LSTAT.values.reshape((-1, 1)), df.MEDV.values.reshape((-1, 1)))\n    ```", "```py\n    model.fit(df.RM.values.reshape((-1, 1)), df.MEDV.values.reshape((-1, 1)))\n    model.score(df.RM.values.reshape((-1, 1)), df.MEDV.values.reshape((-1, 1)))\n    ```", "```py\n    model.fit(df[['LSTAT', 'RM']], df.MEDV.values.reshape((-1, 1)))\n    model.score(df[['LSTAT', 'RM']], df.MEDV.values.reshape((-1, 1)))\n    ```", "```py\n    df = pd.read_csv('spx.csv')\n    yr = []\n    for x in df.date:\n        x = int(x[-2:])\n        if x < 10:\n            x = f'200{x}'\n        elif x < 20:\n            x = f'20{x}'\n        else:\n            x = f'19{x}'  \n        yr.append(x)\n    df['Year'] = yr\n    df.head()\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(df.close.values);\n    yrs = [yr for yr in df.Year.unique() if (int(yr[-2:]) % 5 == 0)]\n    plt.xticks(np.arange(0, len(df), len(df) // len(yrs)), yrs);\n    plt.title('S&P 500 Daily Closing Price');\n    plt.xlabel('Year');\n    plt.ylabel('Price ($)');\n    ```", "```py\n    df.close[:10].values\n    df.close[:10].shift(3).values\n    ```", "```py\n    plt.figure(figsize=(15, 7))\n    plt.plot(df.close.values, label='Original Dataset', c='k', linestyle='-');\n    plt.plot(df.close.shift(100), c='k', linestyle=':', label='Lag 100');\n    yrs = [yr for yr in df.Year.unique() if (int(yr[-2:]) % 5 == 0)]\n    plt.xticks(np.arange(0, len(df), len(df) // len(yrs)), yrs);\n    plt.title('S&P 500 Daily Closing Price');\n    plt.xlabel('Year');\n    plt.ylabel('Price ($)');\n    plt.legend();\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    pd.plotting.autocorrelation_plot(df.close);\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    ax = pd.plotting.autocorrelation_plot(df.close);\n    ax.set_ylim([-0.1, 0.1]);\n    ```", "```py\n    plt.figure(figsize=(10,7))\n    ax = pd.plotting.lag_plot(df.close, lag=100);\n    ```", "```py\n    plt.figure(figsize=(10,7))\n    ax = pd.plotting.lag_plot(df.close, lag=4000);\n    ```", "```py\n    #!pip install statsmodels\n     !conda install -c conda-forge statsmodels\n    ```", "```py\n    from statsmodels.tsa.ar_model import AR\n    model = AR(df.close)\n    ```", "```py\n    model_fit = model.fit()\n    print('Lag: %s' % model_fit.k_ar)\n    print('Coefficients: %s' % model_fit.params)\n    ```", "```py\n    predictions = model_fit.predict(start=36, end=len(df) + 500)\n    predictions[:10].values\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(predictions, c='g', linestyle=':', label='Predictions');\n    plt.plot(df.close.values, label='Original Dataset');\n    yrs = [yr for yr in df.Year.unique() if (int(yr[-2:]) % 5 == 0)]\n    plt.xticks(np.arange(0, len(df), len(df) // len(yrs)), yrs);\n    plt.title('S&P 500 Daily Closing Price');\n    plt.xlabel('Year');\n    plt.ylabel('Price ($)');\n    plt.legend();\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(predictions, c='g', linestyle=':', label='Predictions');\n    plt.plot(df.close.values, label='Original Dataset');\n    yrs = [yr for yr in df.Year.unique() if (int(yr[-2:]) % 5 == 0)]\n    plt.xticks(np.arange(0, len(df), len(df) // len(yrs)), yrs);\n    plt.title('S&P 500 Daily Closing Price');\n    plt.xlabel('Year');\n    plt.ylabel('Price ($)');\n    plt.xlim([2000, 2500])\n    plt.ylim([420, 500])\n    plt.legend();\n    ```", "```py\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom statsmodels.tsa.ar_model import AR\n# Loading the data from activity 5\ndf = pd.read_csv('activity2_measurements.csv')\n```"]