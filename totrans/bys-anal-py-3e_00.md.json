["```py\ndef P(S, A): \n    if set(A).issubset(set(S)): \n        return len(A)/len(S) \n    else: \n        return 0\n```", "```py\npz.BetaBinomial(alpha=10, beta=10, n=6).plot_interactive()\n```", "```py\npz.BetaBinomial(alpha=10, beta=10, n=6).rvs()\n```", "```py\nplt.hist(pz.BetaBinomial(alpha=2, beta=5, n=5).rvs(1000)) \npz.BetaBinomial(alpha=2, beta=5, n=5).plot_pdf();\n```", "```py\ndist = pz.Normal(0, 1) \na = -2 \nb = 0 \nnum = 10 \nx_s = np.linspace(a, b, num) \nbase = (b-a)/num \nnp.sum(dist.pdf(x_s) * base)\n```", "```py\nn_trials = [0, 1, 2, 3, 4, 8, 16, 32, 50, 150] \nn_heads = [0, 1, 1, 1, 1, 4, 6, 9, 13, 48] \nbeta_params = [(1, 1), (20, 20), (1, 4)] \n\nx = np.linspace(0, 1, 2000) \nfor idx, N in enumerate(n_trials): \n    y = n_heads[idx] \n    for (*α*_prior, *β*_prior) in beta_params: \n        posterior = pz.Beta(*α*_prior + y, *β*_prior + N - y).pdf(x)\n```", "```py\ndist = pz.Beta() \npz.maxent(dist, 0.1, 0.7, 0.9)\n```", "```py\nnp.random.seed(1) \naz.plot_posterior({'*θ*':pz.Beta(4, 12).rvs(1000)})\n```"]