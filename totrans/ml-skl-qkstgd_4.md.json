["```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('fraud_prediction.csv')\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n```", "```py\nfrom sklearn.naive_bayes import GaussianNB\n\n#Initializing an NB classifier\n\nnb_classifier = GaussianNB()\n\n#Fitting the classifier into the training data\n\nnb_classifier.fit(X_train, y_train)\n\n#Extracting the accuracy score from the NB classifier\n\nnb_classifier.score(X_test, y_test)\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\ndf = pd.read_csv('fraud_prediction.csv')\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n\n```", "```py\nfrom sklearn.svm import LinearSVC\n\n#Initializing a SVM model \n\nsvm = LinearSVC(random_state = 50)\n\n#Fitting the model to the training data\n\nsvm.fit(X_train, y_train)\n\n#Extracting the accuracy score from the training data\n\nsvm.score(X_test, y_test)\n```", "```py\nimport matplotlib.pyplot as plt \nfrom sklearn.svm import LinearSVC\n\ntraining_scores = []\ntesting_scores = []\n\nparam_list = [0.0001, 0.001, 0.01, 0.1, 10, 100, 1000]\n\n# Evaluate the training and test classification errors for each value of the parameter\n\nfor param in param_list:\n\n    # Create SVM object and fit\n\n    svm = LinearSVC(C = param, random_state = 42)\n    svm.fit(X_train, y_train)\n\n    # Evaluate the accuracy scores and append to lists\n\n    training_scores.append(svm.score(X_train, y_train) )\n    testing_scores.append(svm.score(X_test, y_test) )\n\n# Plot results\n\nplt.semilogx(param_list, training_scores, param_list, testing_scores)\nplt.legend((\"train\", \"test\"))\nplt.ylabel('Accuracy scores')\nplt.xlabel('C (Inverse regularization strength)')\nplt.show()\n\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\n#Building the model \n\nsvm = LinearSVC(random_state = 50)\n\n#Using GridSearchCV to search for the best parameter\n\ngrid = GridSearchCV(svm, {'C':[0.00001, 0.0001, 0.001, 0.01, 0.1, 10]})\ngrid.fit(X_train, y_train)\n\n# Print out the best parameter\n\nprint(\"The best value of the inverse regularization strength is:\", grid.best_params_)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\n#Setting up the scaling pipeline \n\norder = [('scaler', StandardScaler()), ('SVM', LinearSVC(C = 0.1, random_state = 50))]\n\npipeline = Pipeline(order)\n\n#Fitting the classfier to the scaled dataset \n\nsvm_scaled = pipeline.fit(X_train, y_train)\n\n#Extracting the score \n\nsvm_scaled.score(X_test, y_test)\n```"]