["```py\npip install -U tsfresh workalendar astral \"featuretools[tsfresh]\" sktime \n```", "```py\nfrom scipy.optimize import minimize\nimport numpy as np\nnp.random.seed(0)\npts = 10000\nvals = np.random.lognormal(0, 1.0, pts) \n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nfrom scipy.stats import normaltest\nscaler = StandardScaler()\nvals_ss = scaler.fit_transform(vals.reshape(-1, 1))\n_, p = normaltest(vals_ss)\nprint(f\"significance: {p:.2f}\") \n```", "```py\nfrom sklearn.preprocessing import minmax_scale\nvals_mm = minmax_scale(vals)\n_, p = normaltest(vals_mm.squeeze())\nprint(f\"significance: {p:.2f}\") \n```", "```py\nlog_transformed = np.log(vals)\n_, p = normaltest(log_transformed)\nprint(f\"significance: {p:.2f}\") \n```", "```py\nfrom scipy.stats import boxcox\nvals_bc = boxcox(vals, 0.0) \n```", "```py\nimport numpy as np\nfrom sklearn.impute import SimpleImputer\nimp_mean = SimpleImputer(missing_values=np.nan, strategy='mean')\nimp_mean.fit([[7, 2, 3], [4, np.nan, 6], [10, 5, 9]])\nSimpleImputer()\ndf = [[np.nan, 2, 3], [4, np.nan, 6], [10, np.nan, 9]]\nprint(imp_mean.transform(df)) \n```", "```py\n[[ 7\\.   2\\.   3\\. ]\n [ 4\\.   3.5  6\\. ]\n [10\\.   3.5  9\\. ]] \n```", "```py\nfrom workalendar.europe.united_kingdom import UnitedKingdom\nUnitedKingdom().holidays() \n```", "```py\n[(datetime.date(2021, 1, 1), 'New year'),\n (datetime.date(2021, 4, 2), 'Good Friday'),\n (datetime.date(2021, 4, 4), 'Easter Sunday'),\n (datetime.date(2021, 4, 5), 'Easter Monday'),\n (datetime.date(2021, 5, 3), 'Early May Bank Holiday'),\n (datetime.date(2021, 5, 31), 'Spring Bank Holiday'),\n (datetime.date(2021, 8, 30), 'Late Summer Bank Holiday'),\n (datetime.date(2021, 12, 25), 'Christmas Day'),\n (datetime.date(2021, 12, 26), 'Boxing Day'),\n (datetime.date(2021, 12, 27), 'Christmas Shift'),\n (datetime.date(2021, 12, 28), 'Boxing Day Shift')] \n```", "```py\nfrom typing import List\nfrom dateutil.relativedelta import relativedelta, TH\nimport datetime\nfrom workalendar.usa import California\ndef create_custom_holidays(year: int) -> List:\n      custom_holidays = California().holidays()\n      custom_holidays.append((\n        (datetime.datetime(year, 11, 1) + relativedelta(weekday=TH(+4)) + datetime.timedelta(days=1)).date(),\n        \"Black Friday\"\n      ))\n      return {k: v for (k, v) in custom_holidays}\ncustom_holidays = create_custom_holidays(2021) \n```", "```py\n{datetime.date(2021, 1, 1): 'New year',\n datetime.date(2021, 1, 18): 'Birthday of Martin Luther King, Jr.',\n datetime.date(2021, 2, 15): \"Washington's Birthday\",\n datetime.date(2021, 3, 31): 'Cesar Chavez Day',\n datetime.date(2021, 5, 31): 'Memorial Day',\n datetime.date(2021, 7, 4): 'Independence Day',\n datetime.date(2021, 7, 5): 'Independence Day (Observed)',\n datetime.date(2021, 9, 6): 'Labor Day',\n datetime.date(2021, 11, 11): 'Veterans Day',\n datetime.date(2021, 11, 25): 'Thanksgiving Day',\n datetime.date(2021, 11, 26): 'Thanksgiving Friday',\n datetime.date(2021, 12, 24): 'Christmas Day (Observed)',\n datetime.date(2021, 12, 25): 'Christmas Day',\n datetime.date(2021, 12, 31): 'New Years Day (Observed)',\n datetime.date(2016, 11, 25): 'Black Friday'} \n```", "```py\ndef create_custom_holidays(year: int) -> List: \n```", "```py\ndef is_holiday(current_date: datetime.date):\n    \"\"\"Determine if we have a holiday.\"\"\"\n    return custom_holidays.get(current_date, False)\ntoday = datetime.date(2021, 4, 11)\nis_holiday(today) \n```", "```py\nimport calendar\ncalendar.monthrange(2021, 1) \n```", "```py\nfrom datetime import date\ndef year_anchor(current_date: datetime.date):\n      return (\n        (current_date - date(current_date.year, 1, 1)).days,\n        (date(current_date.year, 12, 31) - current_date).days,\n      )\nyear_anchor(today) \n```", "```py\ndef month_anchor(current_date: datetime.date):\n      last_day = calendar.monthrange(current_date.year, current_date.month)[0]\n\n      return (\n        (current_date - datetime.date(current_date.year, current_date.month, 1)).days,\n        (current_date - datetime.date(current_date.year, current_date.month, last_day)).days,\n      )\nmonth_anchor(today) \n```", "```py\ndef get_last_friday(current_date: datetime.date, weekday=calendar.FRIDAY):\n      return max(week[weekday]\n        for week in calendar.monthcalendar(\n            current_date.year, current_date.month\n        ))\nget_last_friday(today) \n```", "```py\nYEAR = 2021\nseasons = [\n    ('winter', (date(YEAR,  1,  1),  date(YEAR,  3, 20))),\n    ('spring', (date(YEAR,  3, 21),  date(YEAR,  6, 20))),\n    ('summer', (date(YEAR,  6, 21),  date(YEAR,  9, 22))),\n    ('autumn', (date(YEAR,  9, 23),  date(YEAR, 12, 20))),\n    ('winter', (date(YEAR, 12, 21),  date(YEAR, 12, 31)))\n]\ndef is_in_interval(current_date: datetime.date, seasons):\n      return next(season for season, (start, end) in seasons\n                if start <= current_date.replace(year=YEAR) <= end)\n\nis_in_interval(today, seasons) \n```", "```py\nfrom astral.sun import sun\nfrom astral import LocationInfo\nCITY = LocationInfo(\"London\", \"England\", \"Europe/London\", 51.5, -0.116)\ndef get_sunrise_dusk(current_date: datetime.date, city_name='London'):\n      s = sun(CITY.observer, date=current_date)\n      sunrise = s['sunrise']\n      dusk = s['dusk']\n      return (sunrise - dusk).seconds / 3600\nget_sunrise_dusk(today) \n```", "```py\ndef get_business_days(current_date: datetime.date):\n      last_day = calendar.monthrange(current_date.year, current_date.month)[1]\n      rng = pd.date_range(current_date.replace(day=1), periods=last_day, freq='D')\n      business_days = pd.bdate_range(rng[0], rng[-1])\n      return len(business_days), last_day - len(business_days)\nget_business_days(date.today()) \n```", "```py\nimport featuretools as ft\nfrom featuretools.primitives import Minute, Hour, Day, Month, Year, Weekday\ndata = pd.DataFrame(\n    {'Time': ['2014-01-01 01:41:50',\n              '2014-01-01 02:06:50',\n              '2014-01-01 02:31:50',\n              '2014-01-01 02:56:50',\n              '2014-01-01 03:21:50'],\n     'Target': [0, 0, 0, 0, 1]}\n)        \ndata['index'] = data.index\nes = ft.EntitySet('My EntitySet')\nes.entity_from_dataframe(\n    entity_id='main_data_table',\n    index='index',\n    dataframe=data,\n    time_index='Time'\n)\nfm, features = ft.dfs(\n    entityset=es, \n    target_entity='main_data_table', \n    trans_primitives=[Minute, Hour, Day, Month, Year, Weekday]\n) \n```", "```py\nfrom tsfresh.feature_extraction import extract_features\nfrom tsfresh.feature_extraction import ComprehensiveFCParameters\nsettings = ComprehensiveFCParameters()\nextract_features(data, column_id='Time', default_fc_parameters=settings) \n```", "```py\nfrom sktime.datasets import load_arrow_head\nfrom sktime.utils.data_processing import from_nested_to_2d_array\nX_train, y_train = load_arrow_head(split=\"train\", return_X_y=True)\nfrom_nested_to_2d_array(X_train).head() \n```", "```py\nfrom sktime.transformations.panel.rocket import Rocket\nrocket = Rocket(num_kernels=1000)\nrocket.fit(X_train)\nX_train_transform = rocket.transform(X_train) \n```", "```py\nfrom sktime.transformations.panel.shapelets import ContractedShapeletTransform\nshapelets_transform = ContractedShapeletTransform(\n    time_contract_in_mins=1,\n    num_candidates_to_sample_per_case=10,\n    verbose=0,\n)\nshapelets_transform.fit(X_train, y_train) \n```", "```py\nX_train_transform = shapelets_transform.transform(X_train) \n```"]