["```py\ny ~ a + a:b + np.log(x) \n```", "```py\nconda create --name myenv \n```", "```py\nconda activate myenv \n```", "```py\npip install tsfresh tslearn \n```", "```py\nfrom tsfresh.examples import load_robot_execution_failures\nfrom tsfresh.examples.robot_execution_failures import download_robot_execution_failures\ndownload_robot_execution_failures()\ndf_ts, y = load_robot_execution_failures() \n```", "```py\nprint(f\"{y.mean():.2f}\") \n```", "```py\nfrom tsfresh import extract_features\nfrom tsfresh import select_features\nfrom tsfresh.utilities.dataframe_functions import impute\nextracted_features = impute(extract_features(df_ts, column_id=\"id\", column_sort=\"time\"))\nfeatures_filtered = select_features(extracted_features, y) \n```", "```py\nfrom sklearn.model_selection import TimeSeriesSplit, GridSearchCV\nfrom tslearn.neighbors import KNeighborsTimeSeriesClassifier\nknn = KNeighborsTimeSeriesClassifier()\nparam_search = {\n    'metric' : ['dtw'],\n    'n_neighbors': [1, 2, 3]\n}\ntscv = TimeSeriesSplit(n_splits=2)\ngsearch = GridSearchCV(\n    estimator=knn,\n    cv=tscv,\n    param_grid=param_search\n)\ngsearch.fit(\n    features_filtered,\n    y\n) \n```", "```py\npip install greykite \n```", "```py\nimport pandas as pd\nowid_covid = pd.read_csv(\"**https://covid.ourworldindata.org/data/owid-covid-data.csv**\")\nowid_covid[\"**date**\"] = pd.to_datetime(owid_covid[\"**date**\"])\ndf = owid_covid[owid_covid.location == \"**France**\"].set_index(\"**date**\", drop=True).resample('**D**').interpolate(method='**linear**') \n```", "```py\nfrom greykite.framework.templates.autogen.forecast_config import (\n    ForecastConfig, MetadataParam\n)\nmetadata = MetadataParam(\n    time_col=\"date\",\n    value_col=\"new_cases\",\n    freq=\"D\"\n) \n```", "```py\nimport warnings\nfrom greykite.framework.templates.forecaster import Forecaster\nfrom greykite.framework.templates.model_templates import ModelTemplateEnum\nforecaster = Forecaster()\n    warnings.filterwarnings(\"ignore\", category=UserWarning)\n    result = forecaster.run_forecast_config(\n        df=yahoo_df,\n        config=ForecastConfig(\n            model_template=ModelTemplateEnum.SILVERKITE_DAILY_90.name,\n            forecast_horizon=90,\n            coverage=0.95,\n            metadata_param=metadata\n        )\n    ) \n```", "```py\nforecast = result.forecast\nforecast.plot().show(renderer=\"**colab**\") \n```", "```py\nforecast.df.head().round(2) \n```", "```py\nfrom collections import defaultdict\nbacktest = result.backtest\nbacktest_eval = defaultdict(list)\nfor metric, value in backtest.train_evaluation.items():\n    backtest_eval[metric].append(value)\n    backtest_eval[metric].append(backtest.test_evaluation[metric])\nmetrics = pd.DataFrame(backtest_eval, index=[\"train\", \"test\"]).T\nmetrics.head() \n```", "```py\nmodel = result.model\nfuture_df = result.timeseries.make_future_dataframe(\n    periods=4,\n    include_history=False\n)\nmodel.predict(future_df) \n```", "```py\npip install xgboost \n```", "```py\nimport pandas as pd\nowid_covid = pd.read_csv(\"**https://covid.ourworldindata.org/data/owid-covid-data.csv**\")\nowid_covid[\"**date**\"] = pd.to_datetime(owid_covid[\"**date**\"])\ndf = owid_covid[owid_covid.location == \"**France**\"].set_index(\"**date**\", drop=True).resample('**D**').interpolate(method='**linear**').reset_index() \n```", "```py\nfrom sklearn.base import TransformerMixin, BaseEstimator\nclass DateFeatures(TransformerMixin, BaseEstimator):\n    features = [\n        \"hour\",\n        \"year\",\n        \"day\",\n        \"weekday\",\n        \"month\",\n        \"quarter\",\n    ]\n\n    def __init__(self):\n        super().__init__()\n    def transform(self, df: pd.DataFrame):\n        Xt = []\n        for col in df.columns:\n            for feature in self.features:\n                date_feature = getattr(\n                    getattr(\n                        df[col], \"dt\"\n                    ), feature\n                )\n                date_feature.name = f\"{col}_{feature}\"\n                Xt.append(date_feature)\n\n        df2 = pd.concat(Xt, axis=1)\n        return df2\n    def fit(self, df: pd.DataFrame, y=None, **fit_params):\n        return self \n```", "```py\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline, make_pipeline\npreprocessor = ColumnTransformer(\n    transformers=[(\n        \"**date**\",\n        make_pipeline(\n            DateFeatures(),\n            ColumnTransformer(transformers=[\n                (\"**cyclical**\", CyclicalFeatures(),\n                  [\"**date_day**\", \"**date_weekday**\", \"**date_month**\"]\n                )\n            ], remainder=\"passthrough\")\n        ), [\"**date**\"],\n  ),], remainder=\"passthrough\"\n) \n```", "```py\nfrom xgboost import XGBRegressor\npipeline = Pipeline(\n    [\n        (\"**preprocessing**\", preprocessor),\n         (\"xgb\", XGBRegressor(objective=\"**reg:squarederror**\", n_estimators=**1000**))\n    ]\n) \n```", "```py\nTRAIN_SIZE = int(len(df) * **0.9**)\nHORIZON = **1**\nTARGET_COL = \"**new_cases**\" \n```", "```py\nX_train, X_test = df.iloc[HORIZON:TRAIN_SIZE], df.iloc[TRAIN_SIZE+HORIZON:]\ny_train = df.shift(periods=HORIZON).iloc[HORIZON:TRAIN_SIZE][TARGET_COL]\ny_test = df.shift(periods=HORIZON).iloc[TRAIN_SIZE+HORIZON:][TARGET_COL] \n```", "```py\nFEATURE_COLS = [\"date\"]\npipeline.fit(X_train[FEATURE_COLS], y_train) \n```", "```py\nMAX_HORIZON = **90**\nX_test_horizon = pd.Series(pd.date_range(\n    start=df.date.**min()**, \n    periods=**len**(df) + MAX_HORIZON,\n    name=\"**date**\"\n)).reset_index() \n```", "```py\nforecasted = pd.concat(\n    [pd.Series(pipeline.predict(X_test_horizon[FEATURE_COLS])), pd.Series(X_test_horizon.date)],\n    axis=1\n)\nforecasted.columns = [TARGET_COL, \"**date**\"] \n```", "```py\nactual = pd.concat(\n    [pd.Series(df[TARGET_COL]), pd.Series(df.date)],\n    axis=1\n)\nactual.columns = [TARGET_COL, \"**date**\"] \n```", "```py\nfig, ax = plt.subplots(figsize=(12, 6))\nforecasted.set_index(\"date\").plot(linestyle='--', ax=ax)\nactual.set_index(\"date\").plot(linestyle='-.', ax=ax)\nplt.legend([\"forecast\", \"actual\"]) \n```", "```py\nfrom sklearn.metrics import mean_squared_error\ntest_data = actual.merge(forecasted, on=\"**date**\", suffixes=(\"**_actual**\", \"**_predicted**\"))\nmse = mean_squared_error(test_data.new_cases_actual, test_data.new_cases_predicted, squared=False)  # RMSE\n**print(\"The root mean squared error (RMSE) on test set: {:.2f}\".format(mse))** \n```", "```py\nThe root mean squared error (RMSE) on test set: 12753.41 \n```", "```py\nconda install -c conda-forge fbprophet \n```", "```py\npip install kats \n```", "```py\n!MINIMAL=1 pip install kats\n!pip install \"numpy==1.20\" \n```", "```py\ndf = owid_covid[owid_covid.location == \"**France**\"].set_index(\"**date**\", drop=True).resample('**D**').interpolate(method='**linear**').reset_index() \n```", "```py\nfrom kats.models.ensemble.ensemble import EnsembleParams, BaseModelParams\nfrom kats.models.ensemble.kats_ensemble import KatsEnsemble\nfrom kats.models import linear_model, quadratic_model\nmodel_params = EnsembleParams(\n            [\n                BaseModelParams(\"linear\", linear_model.LinearModelParams()),\n                BaseModelParams(\"quadratic\", quadratic_model.QuadraticModelParams()),\n            ]\n        ) \n```", "```py\nKatsEnsembleParam = {\n    \"**models**\": model_params,\n    \"**aggregation**\": \"**weightedavg**\",\n    \"**seasonality_length**\": 30,\n    \"**decomposition_method**\": \"**additive**\",\n} \n```", "```py\nfrom kats.consts import TimeSeriesData\nTARGET_COL = \"new_cases\"\ndf_ts = TimeSeriesData(\n    value=df[TARGET_COL], time=df[\"date\"]\n) \n```", "```py\nm = KatsEnsemble(\n    data=df_ts, \n    params=KatsEnsembleParam\n).fit() \n```", "```py\nm.predict(steps=90)\nm.aggregate()\nm.plot()\nplt.ylabel(TARGET_COL) \n```"]