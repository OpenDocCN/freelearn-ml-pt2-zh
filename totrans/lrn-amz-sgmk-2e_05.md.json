["```py\n    %%sh\n    apt-get -y install unzip\n    wget -N https://sagemaker-sample-data-us-west-2.s3-us-west-2.amazonaws.com/autopilot/direct_marketing/bank-additional.zip\n    unzip -o bank-additional.zip\n    ```", "```py\n    import sagemaker\n    prefix = 'sagemaker/DEMO-autopilot/input'\n    sess   = sagemaker.Session()\n    uri = sess.upload_data(path=”./bank-additional/bank-additional-full.csv”, key_prefix=prefix)\n    print(uri)\n    ```", "```py\n    s3://sagemaker-us-east-2-123456789012/sagemaker/DEMO-autopilot/input/bank-additional-full.csv\n    ```", "```py\n    ep_name = 'my-first-autopilot-endpoint'\n    sample = '56,housemaid,married,basic.4y,no,no,no,telephone,may,mon,261,1,999,0,nonexistent,1.1,93.994,-36.4,4.857,5191.0'\n    ```", "```py\n    import boto3\n    sm_rt = boto3.Session().client('runtime.sagemaker')\n    ```", "```py\n    response = sm_rt.invoke_endpoint(EndpointName=ep_name,\n                                  ContentType='text/csv',\n                                  Accept='text/csv',\n                                  Body=sample)\n    ```", "```py\n    response = response['Body'].read().decode(”utf-8”)\n    print(response)\n    ```", "```py\n    no\n    ```", "```py\n    sm = boto3.Session().client('sagemaker')\n    sm.delete_endpoint(EndpointName=ep_name)\n    ```", "```py\n    import sagemaker\n    sess = sagemaker.Session()\n    ```", "```py\n    %%sh\n    wget -N https://sagemaker-sample-data-us-west-2.s3-us-west-2.amazonaws.com/autopilot/direct_marketing/bank-additional.zip\n    unzip -o bank-additional.zip\n    ```", "```py\n    bucket = sess.default_bucket()                     \n    prefix = 'sagemaker/DEMO-automl-dm'\n    s3_input_data = sess.upload_data(path=”./bank-additional/bank-additional-full.csv”, key_prefix=prefix+'input')\n    ```", "```py\n    from sagemaker.automl.automl import AutoML\n    auto_ml_job = AutoML(\n        role = sagemaker.get_execution_role(),                                          \n        sagemaker_session = sess,                             \n        target_attribute_name = 'y',                             \n        output_path = \n            's3://{}/{}/output'.format(bucket,prefix),\n        max_runtime_per_training_job_in_seconds = 600,\n        max_candidates = 250,\n        total_job_runtime_in_seconds = 3600\n    )\n    ```", "```py\n    auto_ml_job.fit(inputs=s3_input_data, logs=False, wait=False)\n    ```", "```py\n    from time import sleep\n    job = auto_ml_job.describe_auto_ml_job()\n    job_status = job['AutoMLJobStatus']\n    job_sec_status = job['AutoMLJobSecondaryStatus']\n    if job_status not in ('Stopped', 'Failed'):\n        while job_status in ('InProgress') and job_sec_status in ('AnalyzingData'):\n            sleep(60)\n            job = auto_ml_job.describe_auto_ml_job()\n            job_status = job['AutoMLJobStatus']\n            job_sec_status =   \n                 job['AutoMLJobSecondaryStatus']\n            print (job_status, job_sec_status)\n    ```", "```py\n    job = auto_ml_job.describe_auto_ml_job()\n    job_candidate_notebook = job['AutoMLJobArtifacts']['CandidateDefinitionNotebookLocation']\n    job_data_notebook = job['AutoMLJobArtifacts']['DataExplorationNotebookLocation']\n    print(job_candidate_notebook)\n    print(job_data_notebook)\n    ```", "```py\n    s3://sagemaker-us-east-2-123456789012/sagemaker/DEMO-automl-dm/output/automl-2020-04-24-14-21-16-938/sagemaker-automl-candidates/pr-1-a99cb56acb5945d695c0e74afe8ffe3ddaebafa94f394655ac973432d1/notebooks/SageMakerAutopilotCandidateDefinitionNotebook.ipynb\n    s3://sagemaker-us-east-2-123456789012/sagemaker/DEMO-automl-dm/output/automl-2020-04-24-14-21-16-938/sagemaker-automl-candidates/pr-1-a99cb56acb5945d695c0e74afe8ffe3ddaebafa94f394655ac973432d1/notebooks/SageMakerAutopilotDataExplorationNotebook.ipynb\n    ```", "```py\n    %%sh -s $job_candidate_notebook $job_data_notebook\n    aws s3 cp $1 .\n    aws s3 cp $2 .\n    ```", "```py\n    job_best_candidate = auto_ml_job.best_candidate()\n    print(job_best_candidate['CandidateName'])\n    print(job_best_candidate['FinalAutoMLJobObjectiveMetric'])\n    ```", "```py\n    tuning-job-1-57d7f377bfe54b40b1-030-c4f27053\n    {'MetricName': 'validation:accuracy', 'Value': 0.9197599935531616}\n    ```", "```py\nimport boto3\njob_outputs_prefix = '{}/output/{}'.format(prefix, job['AutoMLJobName'])\ns3_bucket = boto3.resource('s3').Bucket(bucket)\ns3_bucket.objects.filter(Prefix=job_outputs_prefix).delete()\n```", "```py\n$ aws s3 ls s3://sagemaker-us-east-2-123456789012/sagemaker/DEMO-autopilot/output/my-first-autopilot-job/\n```", "```py\nPRE data-processor-models/\nPRE documentation/\nPRE preprocessed-data/\nPRE sagemaker-automl-candidates/\nPRE transformed-data/\nPRE tuning/\nPRE validations/\n```", "```py\n    from sagemaker_automl import AutoMLInteractiveRunner, AutoMLLocalCandidate\n    automl_interactive_runner = AutoMLInteractiveRunner(AUTOML_LOCAL_RUN_CONFIG)\n    ```", "```py\n    automl_interactive_runner.select_candidate(\n        {”data_transformer”: {\n            ”name”: ”dpp0”,\n            …\n        }\n    )\n    ```", "```py\n    numeric_processors = Pipeline(\n      steps=[('robustimputer',\n             RobustImputer(strategy='constant',fill_values=nan))]\n    )\n    categorical_processors = Pipeline(\n      steps=[('thresholdonehotencoder', \n             ThresholdOneHotEncoder(threshold=301))]\n    )\n    column_transformer = ColumnTransformer(\n      transformers=[\n        ('numeric_processing', numeric_processors, numeric),\n        ('categorical_processing', categorical_processors,   \n         categorical)]\n    )\n    return Pipeline(steps=[\n      ('column_transformer', column_transformer),   \n      ('robuststandardscaler', RobustStandardScaler())]\n    )\n    ```", "```py\n    automl_interactive_runner.fit_data_transformers(parallel_jobs=7)\n    ```", "```py\n    dpp0 transformers on the input dataset.The second job processes the input dataset with the resulting model. For the record, this job uses the SageMaker **Batch Transform** feature, which will be covered in a later chapter.\n    ```"]