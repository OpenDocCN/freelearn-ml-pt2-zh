["```py\nimport pandas as pd\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Define the feature and target arrays\n\nfeature = df['oldbalanceOrg'].values\ntarget = df['amount'].values\n```", "```py\nimport matplotlib.pyplot as plt\n\n#Creating a scatter plot\n\nplt.scatter(feature, target)\nplt.xlabel('Old Balance of Account Holder')\nplt.ylabel('Amount of Transaction')\nplt.title('Amount Vs. Old Balance')\nplt.show()\n```", "```py\n#Initializing a linear regression model \n\nlinear_reg = linear_model.LinearRegression()\n\n#Reshaping the array since we only have a single feature\n\nfeature = feature.reshape(-1, 1)\ntarget = target.reshape(-1, 1)\n\n#Fitting the model on the data\n\nlinear_reg.fit(feature, target)\n\n#Define the limits of the x axis \n\nx_lim = np.linspace(min(feature), max(feature)).reshape(-1, 1)\n\n#Creating the scatter plot\n\nplt.scatter(feature, target)\nplt.xlabel('Old Balance of Account Holder')\nplt.ylabel('Amount of Transaction')\nplt.title('Amount Vs. Old Balance')\n\n#Creating the prediction line \n\nplt.plot(x_lim, linear_reg.predict(x_lim), color = 'red')\n\n#Show the plot\n\nplt.show()\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n# Reading in the dataset \n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n```", "```py\nfrom sklearn import linear_model\n\n#Initializing a linear regression model \n\nlinear_reg = linear_model.LinearRegression()\n\n#Fitting the model on the data\n\nlinear_reg.fit(X_train, y_train)\n\n#Accuracy of the model\n\nlinear_reg.score(X_test, y_test)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\n\n#Setting up the scaling pipeline \n\npipeline_order = [('scaler', StandardScaler()), ('linear_reg', linear_model.LinearRegression())]\n\npipeline = Pipeline(pipeline_order)\n\n#Fitting the classfier to the scaled dataset \n\nlinear_reg_scaled = pipeline.fit(X_train, y_train)\n\n#Extracting the score \n\nlinear_reg_scaled.score(X_test, y_test)\n```", "```py\nfrom sklearn.linear_model import Ridge\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Ridge\n\n# Reading in the dataset \n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n\n#Initialize a ridge regression model\n\nridge_reg = Ridge(alpha = 0, normalize = True)\n\n#Fit the model to the training data \n\nridge_reg.fit(X_train, y_train)\n\n#Extract the score from the test data\n\nridge_reg.score(X_test, y_test)\n\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\n#Building the model \n\nridge_regression = Ridge()\n\n#Using GridSearchCV to search for the best parameter\n\ngrid = GridSearchCV(ridge_regression, {'alpha':[0.0001, 0.001, 0.01, 0.1, 10]})\ngrid.fit(X_train, y_train)\n\n# Print out the best parameter\n\nprint(\"The most optimal value of alpha is:\", grid.best_params_)\n\n#Initializing an ridge regression object\n\nridge_regression = Ridge(alpha = 0.01)\n\n#Fitting the model to the training and test sets\n\nridge_regression.fit(X_train, y_train)\n\n#Accuracy score of the ridge regression model\n\nridge_regression.score(X_test, y_test)\n```", "```py\nimport matplotlib.pyplot as plt \n\ntrain_errors = []\ntest_errors = []\n\nalpha_list = [0.0001, 0.001, 0.01, 0.1, 10]\n\n# Evaluate the training and test classification errors for each value of alpha\n\nfor value in alpha_list:\n\n    # Create Ridge object and fit\n    ridge_regression = Ridge(alpha= value)\n    ridge_regression.fit(X_train, y_train)\n\n    # Evaluate error rates and append to lists\n    train_errors.append(ridge_regression.score(X_train, y_train) )\n    test_errors.append(ridge_regression.score(X_test, y_test))\n\n# Plot results\nplt.semilogx(alpha_list, train_errors, alpha_list, test_errors)\nplt.legend((\"train\", \"test\"))\nplt.ylabel('Accuracy Score')\nplt.xlabel('Alpha')\nplt.show()\n```", "```py\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import Lasso\nimport warnings\n\n# Reading in the dataset \n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n\n#Initialize a lasso regression model\n\nlasso_reg = Lasso(alpha = 0, normalize = True)\n\n#Fit the model to the training data \n\nlasso_reg.fit(X_train, y_train)\n\nwarnings.filterwarnings('ignore')\n\n#Extract the score from the test data\n\nlasso_reg.score(X_test, y_test)\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\n#Building the model \n\nlasso_regression = Lasso()\n\n#Using GridSearchCV to search for the best parameter\n\ngrid = GridSearchCV(lasso_regression, {'alpha':[0.0001, 0.001, 0.01, 0.1, 10]})\ngrid.fit(X_train, y_train)\n\n# Print out the best parameter\n\nprint(\"The most optimal value of alpha is:\", grid.best_params_)\n\n#Initializing an lasso regression object\n\nlasso_regression = Lasso(alpha = 0.0001)\n\n#Fitting the model to the training and test sets\n\nlasso_regression.fit(X_train, y_train)\n\n#Accuracy score of the lasso regression model\n\nlasso_regression.score(X_test, y_test)\n```", "```py\ntrain_errors = []\ntest_errors = []\n\nalpha_list = [0.0001, 0.001, 0.01, 0.1, 10]\n\n# Evaluate the training and test classification errors for each value of alpha\n\nfor value in alpha_list:\n\n    # Create Lasso object and fit\n    lasso_regression = Lasso(alpha= value)\n    lasso_regression.fit(X_train, y_train)\n\n    # Evaluate error rates and append to lists\n    train_errors.append(ridge_regression.score(X_train, y_train) )\n    test_errors.append(ridge_regression.score(X_test, y_test))\n\n# Plot results\nplt.semilogx(alpha_list, train_errors, alpha_list, test_errors)\nplt.legend((\"train\", \"test\"))\nplt.ylabel('Accuracy Score')\nplt.xlabel('Alpha')\nplt.show()\n```"]