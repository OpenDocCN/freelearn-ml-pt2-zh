["```py\n>>> sample_rate, X = scipy.io.wavfile.read(wave_filename)\n\n```", "```py\n>>> import scipy\n>>> from matplotlib.pyplot import specgram\n>>> sample_rate, X = scipy.io.wavfile.read(wave_filename)\n>>> print sample_rate, X.shape\n22050, (661794,)\n>>> specgram(X, Fs=sample_rate, xextent=(0,30))\n\n```", "```py\n$ sox --null -r 22050 sine_a.wav synth 0.2 sine 400\n$ sox --null -r 22050 sine_b.wav synth 0.2 sine 3000\n\n```", "```py\n$ sox --combine mix --volume 1 sine_b.wav --volume 0.5 sine_a.wav sine_mix.wav\n\n```", "```py\nimport os\nimport scipy\n\ndef create_fft(fn):\n sample_rate, X = scipy.io.wavfile.read(fn)\n fft_features = abs(scipy.fft(X)[:1000])\n base_fn, ext = os.path.splitext(fn)\n data_fn = base_fn + \".fft\"\n scipy.save(data_fn, fft_features)\n\n```", "```py\nimport glob\n\ndef read_fft(genre_list, base_dir=GENRE_DIR):\n X = []\n y = []\n\n for label, genre in enumerate(genre_list):\n genre_dir = os.path.join(base_dir, genre, \"*.fft.npy\")\n file_list = glob.glob(genre_dir)\n\n for fn in file_list:\n fft_features = scipy.load(fn)\n\n X.append(fft_features[:1000])\n y.append(label)\n\n return np.array(X), np.array(y)\n\n```", "```py\ngenre_list = [\"classical\", \"jazz\", \"country\", \"pop\", \"rock\", \"metal\"]\n\n```", "```py\n>>> from sklearn.metrics import confusion_matrix\n>>> cm = confusion_matrix(y_test, y_pred)\n>>> print(cm)\n[[26  1  2  0  0  2]\n [ 4  7  5  0  5  3]\n [ 1  2 14  2  8  3]\n [ 5  4  7  3  7  5]\n [ 0  0 10  2 10 12]\n [ 1  0  4  0 13 12]]\n\n```", "```py\nfrom matplotlib import pylab\n\ndef plot_confusion_matrix(cm, genre_list, name, title):\n pylab.clf()\n pylab.matshow(cm, fignum=False, cmap='Blues', \n vmin=0, vmax=1.0)\n\n ax = pylab.axes()    ax.set_xticks(range(len(genre_list)))\n ax.set_xticklabels(genre_list)\n ax.xaxis.set_ticks_position(\"bottom\")\n ax.set_yticks(range(len(genre_list)))\n ax.set_yticklabels(genre_list)\n\n pylab.title(title)\n pylab.colorbar()\n pylab.grid(False)\n pylab.xlabel('Predicted class')\n pylab.ylabel('True class')\n pylab.grid(False)\n\n pylab.show()\n\n```", "```py\nfrom sklearn.metrics import roc_curve\n\ny_pred = clf.predict(X_test)\n\nfor label in labels:\n y_label_test = scipy.asarray(y_test==label, dtype=int)\n proba = clf.predict_proba(X_test)\n proba_label = proba[:,label] \n\n # calculate false and true positive rates as well as the\n # ROC thresholds\n fpr, tpr, roc_thres = roc_curve(y_label_test, proba_label)\n\n # plot tpr over fpr ...\n\n```", "```py\n>>> from scikits.talkbox.features import mfcc\n>>> sample_rate, X = scipy.io.wavfile.read(fn)\n>>> ceps, mspec, spec = mfcc(X)\n>>> print(ceps.shape)\n(4135, 13)\n\n```", "```py\nx = np.mean(ceps[int(num_ceps*0.1):int(num_ceps*0.9)], axis=0)\n\n```", "```py\ndef write_ceps(ceps, fn):\n base_fn, ext = os.path.splitext(fn)\n data_fn = base_fn + \".ceps\"\n np.save(data_fn, ceps)\n print(\"Written to %s\" % data_fn)\n\ndef create_ceps(fn):\n sample_rate, X = scipy.io.wavfile.read(fn)\n ceps, mspec, spec = mfcc(X)\n write_ceps(ceps, fn)\n\ndef read_ceps(genre_list, base_dir=GENRE_DIR):\n X, y = [], []\n for label, genre in enumerate(genre_list):\n for fn in glob.glob(os.path.join(\n base_dir, genre, \"*.ceps.npy\")):\n ceps = np.load(fn)\n num_ceps = len(ceps)\n X.append(np.mean(\n ceps[int(num_ceps*0.1):int(num_ceps*0.9)], axis=0))\n y.append(label)\n\n return np.array(X), np.array(y)\n\n```"]