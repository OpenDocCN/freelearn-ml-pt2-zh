["```py\n    import math\n    import numpy as np\n    def dist(a, b):\n        return math.sqrt(math.pow(a[0]-b[0],2) \\\n                         + math.pow(a[1]-b[1],2))\n    \\ ) to split the logic across multiple lines. When the code is executed, Python will ignore the backslash, and treat the code on the next line as a direct continuation of the current line.\n    ```", "```py\n    centroids = [ (2, 5), (8, 3), (4,5) ]\n    x = (0, 8)\n    ```", "```py\n    # Calculating Euclidean Distance between x and centroid\n    centroid_distances =[]\n    for centroid in centroids:\n        print(\"Euclidean Distance between x {} and centroid {} is {}\"\\\n              .format(x ,centroid, dist(x,centroid)))\n        centroid_distances.append(dist(x,centroid))\n    Euclidean Distance between x (0, 8) and centroid (2, 5) \n    is 3.605551275463989\n    Euclidean Distance between x (0, 8) and centroid (8, 3) \n    is 9.433981132056603\n    Euclidean Distance between x (0, 8) and centroid (4, 5) is 5.0\n    ```", "```py\n    cluster_1_points =[ (0,8), (3,8), (3,4) ]\n    ```", "```py\n    mean =[ (0+3+3)/3, (8+8+4)/3 ]\n    print(mean)\n    ```", "```py\n    [2.0, 6.666666666666667]\n    ```", "```py\n    from sklearn.datasets import make_blobs\n    from sklearn.cluster import KMeans\n    import matplotlib.pyplot as plt\n    import numpy as np\n    import math\n    np.random.seed(0)\n    %matplotlib inline\n    ```", "```py\n    X, y = make_blobs(n_samples=1500, centers=3, \\\n                      n_features=2, random_state=800)\n    centroids = [[-6,2],[3,-4],[-5,10]]\n    ```", "```py\n    X\n    ```", "```py\n    array([[-3.83458347,  6.09210705],\n           [-4.62571831,  5.54296865],\n           [-2.87807159, -7.48754592],\n           ...,\n           [-3.709726  , -7.77993633],\n           [-8.44553266, -1.83519866],\n           [-4.68308431,  6.91780744]])\n    ```", "```py\n    plt.scatter(X[:, 0], X[:, 1], s=50, cmap='tab20b')\n    plt.show()\n    ```", "```py\n    y\n    ```", "```py\n    array([2, 2, 1, ..., 1, 0, 2])\n    ```", "```py\n    plt.scatter(X[:, 0], X[:, 1], c=y,s=50, cmap='tab20b')\n    plt.show()\n    ```", "```py\n    from scipy.spatial.distance import cdist\n    ```", "```py\n    X[105:110]\n    ```", "```py\n    array([[-3.09897933,  4.79407445],\n           [-3.37295914, -7.36901393],\n           [-3.372895  ,  5.10433846],\n           [-5.90267987, -3.28352194],\n           [-3.52067739,  7.7841276 ]])\n    ```", "```py\n    \"\"\"\n    Finds distances from each of 5 sampled points to all of the centroids\n    \"\"\"\n    for x in X[105:110]:\n        calcs = cdist(x.reshape([1,-1]),centroids).squeeze()\n        print(calcs, \"Cluster Membership: \", np.argmin(calcs))\n    [4.027750355981394, 10.70202290628413, 5.542160268055164] \n     Cluster Membership:  0\n    [9.73035280174993, 7.208665829113462, 17.44505393393603] \n     Cluster Membership:  1\n    [4.066767506545852, 11.113179986633003, 5.1589701124301515] \n     Cluster Membership:  0\n    [5.284418164665783, 8.931464028407861, 13.314157359115697] \n     Cluster Membership:  0\n    [6.293105164930943, 13.467921029846712, 2.664298385076878] \n     Cluster Membership:  2\n    ```", "```py\n    Exercise1.04-Exercise1.05.ipynb\n    def k_means(X, K):\n        # Keep track of history so you can see K-Means in action\n        centroids_history = []\n        labels_history = []\n        rand_index = np.random.choice(X.shape[0], K)  \n        centroids = X[rand_index]\n        centroids_history.append(centroids)\n    The complete code for this step can be found at https://packt.live/2JM8Q1S.\n    ```", "```py\n    history = zip(centers_hist, labels_hist)\n    for x, y in history:\n        plt.figure(figsize=(4,3))\n        plt.scatter(X[:, 0], X[:, 1], c=y, s=50, cmap='tab20b');\n        plt.scatter(x[:, 0], x[:, 1], c='red')\n        plt.show()\n    ```", "```py\nSSIi = bi - ai/ max(ai, bi)\n```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.metrics import silhouette_score\n    from scipy.spatial.distance import cdist\n    np.random.seed(0)\n    seeds = pd.read_csv('Seed_Data.csv')\n    ```", "```py\n    X = seeds[['A','P','C','LK','WK','A_Coef','LKG']]\n    ```", "```py\n    Exercise 1.06.ipynb\n    def k_means(X, K):\n        # Keep track of history so you can see K-Means in action\n        centroids_history = []\n        labels_history = []\n        rand_index = np.random.choice(X.shape[0], K)  \n        centroids = X[rand_index]\n        centroids_history.append(centroids)\n    The complete code for this step can be found at https://packt.live/2UOqW9H.\n    ```", "```py\n    X_mat = X.values\n    ```", "```py\n    centroids, labels, centroids_history, labels_history = \\\n    k_means(X_mat, 3)\n    ```", "```py\n    silhouette_score(X[['A','LK']], labels)\n    ```", "```py\n    0.5875704550892767\n    ```", "```py\n1\\. area (A), \n2\\. perimeter (P)\n3\\. compactness (C) \n4\\. length of kernel (LK)\n5\\. width of kernel (WK)\n6\\. asymmetry coefficient (A_Coef)\n7\\. length of kernel groove (LKG)\n```"]