["```py\ndf = pd.read_csv(\n     'https://archive.ics.uci.edu/ml/'\n     'machine-learning-databases'\n     '/breast-cancer-wisconsin/wdbc.data',\n     header=None) \n```", "```py\ndf = pd.read_csv(\n     'your/local/path/to/wdbc.data',\n     header=None) \n```", "```py\n    >>> import pandas as pd\n    >>> df = pd.read_csv('https://archive.ics.uci.edu/ml/'\n    ...                  'machine-learning-databases'\n    ...                  '/breast-cancer-wisconsin/wdbc.data',\n    ...                  header=None) \n    ```", "```py\n    >>> from sklearn.preprocessing import LabelEncoder\n    >>> X = df.loc[:, 2:].values\n    >>> y = df.loc[:, 1].values\n    >>> le = LabelEncoder()\n    >>> y = le.fit_transform(y)\n    >>> le.classes_\n    array(['B', 'M'], dtype=object) \n    ```", "```py\n    >>> le.transform(['M', 'B'])\n    array([1, 0]) \n    ```", "```py\n    >>> from sklearn.model_selection import train_test_split\n    >>> X_train, X_test, y_train, y_test = \\\n    ...     train_test_split(X, y,\n    ...                      test_size=0.20,\n    ...                      stratify=y,\n    ...                      random_state=1) \n    ```", "```py\n>>> from sklearn.preprocessing import StandardScaler\n>>> from sklearn.decomposition import PCA\n>>> from sklearn.linear_model import LogisticRegression\n>>> from sklearn.pipeline import make_pipeline\n>>> pipe_lr = make_pipeline(StandardScaler(),\n...                         PCA(n_components=2),\n...                         LogisticRegression(random_state=1,\n...                                            solver='lbfgs'))\n>>> pipe_lr.fit(X_train, y_train)\n>>> y_pred = pipe_lr.predict(X_test)\n>>> print('Test Accuracy: %.3f' % pipe_lr.score(X_test, y_test))\nTest Accuracy: 0.956 \n```", "```py\n>>> import numpy as np\n>>> from sklearn.model_selection import StratifiedKFold\n>>> kfold = StratifiedKFold(n_splits=10).split(X_train, y_train)\n>>> scores = []\n>>> for k, (train, test) in enumerate(kfold):\n...     pipe_lr.fit(X_train[train], y_train[train])\n...     score = pipe_lr.score(X_train[test], y_train[test])\n...     scores.append(score)\n...     print('Fold: %2d, Class dist.: %s, Acc: %.3f' % (k+1,\n...           np.bincount(y_train[train]), score))\nFold:  1, Class dist.: [256 153], Acc: 0.935\nFold:  2, Class dist.: [256 153], Acc: 0.935\nFold:  3, Class dist.: [256 153], Acc: 0.957\nFold:  4, Class dist.: [256 153], Acc: 0.957\nFold:  5, Class dist.: [256 153], Acc: 0.935\nFold:  6, Class dist.: [257 153], Acc: 0.956\nFold:  7, Class dist.: [257 153], Acc: 0.978\nFold:  8, Class dist.: [257 153], Acc: 0.933\nFold:  9, Class dist.: [257 153], Acc: 0.956\nFold: 10, Class dist.: [257 153], Acc: 0.956\n>>> print('\\nCV accuracy: %.3f +/- %.3f' %\n...      (np.mean(scores), np.std(scores)))\nCV accuracy: 0.950 +/- 0.014 \n```", "```py\n>>> from sklearn.model_selection import cross_val_score\n>>> scores = cross_val_score(estimator=pipe_lr,\n...                          X=X_train,\n...                          y=y_train,\n...                          cv=10,\n...                          n_jobs=1)\n>>> print('CV accuracy scores: %s' % scores)\nCV accuracy scores: [ 0.93478261  0.93478261  0.95652174\n                      0.95652174  0.93478261  0.95555556\n                      0.97777778  0.93333333  0.95555556\n                      0.95555556]\n>>> print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),\n...       np.std(scores)))\nCV accuracy: 0.950 +/- 0.014 \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from sklearn.model_selection import learning_curve\n>>> pipe_lr = make_pipeline(StandardScaler(),\n...                         LogisticRegression(penalty='l2',\n...                                            random_state=1,\n...                                            solver='lbfgs',\n...                                            max_iter=10000))\n>>> train_sizes, train_scores, test_scores =\\\n...                 learning_curve(estimator=pipe_lr,\n...                                X=X_train,\n...                                y=y_train,\n...                                train_sizes=np.linspace(\n...                                            0.1, 1.0, 10),\n...                                cv=10,\n...                                n_jobs=1)\n>>> train_mean = np.mean(train_scores, axis=1)\n>>> train_std = np.std(train_scores, axis=1)\n>>> test_mean = np.mean(test_scores, axis=1)\n>>> test_std = np.std(test_scores, axis=1)\n>>> plt.plot(train_sizes, train_mean,\n...          color='blue', marker='o',\n...          markersize=5, label='Training accuracy')\n>>> plt.fill_between(train_sizes,\n...                  train_mean + train_std,\n...                  train_mean - train_std,\n...                  alpha=0.15, color='blue')\n>>> plt.plot(train_sizes, test_mean,\n...          color='green', linestyle='--',\n...          marker='s', markersize=5,\n...          label='Validation accuracy')\n>>> plt.fill_between(train_sizes,\n...                  test_mean + test_std,\n...                  test_mean - test_std,\n...                  alpha=0.15, color='green')\n>>> plt.grid()\n>>> plt.xlabel('Number of training examples')\n>>> plt.ylabel('Accuracy')\n>>> plt.legend(loc='lower right')\n>>> plt.ylim([0.8, 1.03])\n>>> plt.show() \n```", "```py\n>>> from sklearn.model_selection import validation_curve\n>>> param_range = [0.001, 0.01, 0.1, 1.0, 10.0, 100.0]\n>>> train_scores, test_scores = validation_curve(\n...                             estimator=pipe_lr,\n...                             X=X_train,\n...                             y=y_train,\n...                             param_name='logisticregression__C',\n...                             param_range=param_range,\n...                             cv=10)\n>>> train_mean = np.mean(train_scores, axis=1)\n>>> train_std = np.std(train_scores, axis=1)\n>>> test_mean = np.mean(test_scores, axis=1)\n>>> test_std = np.std(test_scores, axis=1)\n>>> plt.plot(param_range, train_mean,\n...          color='blue', marker='o',\n...          markersize=5, label='Training accuracy')\n>>> plt.fill_between(param_range, train_mean + train_std,\n...                  train_mean - train_std, alpha=0.15,\n...                  color='blue')\n>>> plt.plot(param_range, test_mean,\n...          color='green', linestyle='--',\n...          marker='s', markersize=5,\n...          label='Validation accuracy')\n>>> plt.fill_between(param_range,\n...                  test_mean + test_std,\n...                  test_mean - test_std,\n...                  alpha=0.15, color='green')\n>>> plt.grid()\n>>> plt.xscale('log')\n>>> plt.legend(loc='lower right')\n>>> plt.xlabel('Parameter C')\n>>> plt.ylabel('Accuracy')\n>>> plt.ylim([0.8, 1.0])\n>>> plt.show() \n```", "```py\n>>> from sklearn.model_selection import GridSearchCV\n>>> from sklearn.svm import SVC\n>>> pipe_svc = make_pipeline(StandardScaler(),\n...                          SVC(random_state=1))\n>>> param_range = [0.0001, 0.001, 0.01, 0.1,\n...                1.0, 10.0, 100.0, 1000.0]\n>>> param_grid = [{'svc__C': param_range,\n...                'svc__kernel': ['linear']},\n...               {'svc__C': param_range,\n...                'svc__gamma': param_range,\n...                'svc__kernel': ['rbf']}]\n>>> gs = GridSearchCV(estimator=pipe_svc,\n...                   param_grid=param_grid,\n...                   scoring='accuracy',\n...                   cv=10,\n...                   refit=True,\n...                   n_jobs=-1)\n>>> gs = gs.fit(X_train, y_train)\n>>> print(gs.best_score_)\n0.9846153846153847\n>>> print(gs.best_params_)\n{'svc__C': 100.0, 'svc__gamma': 0.001, 'svc__kernel': 'rbf'} \n```", "```py\n>>> clf = gs.best_estimator_\n>>> clf.fit(X_train, y_train)\n>>> print('Test accuracy: %.3f' % clf.score(X_test, y_test))\nTest accuracy: 0.974 \n```", "```py\n>>> gs = GridSearchCV(estimator=pipe_svc,\n...                   param_grid=param_grid,\n...                   scoring='accuracy',\n...                   cv=2)\n>>> scores = cross_val_score(gs, X_train, y_train,\n...                          scoring='accuracy', cv=5)\n>>> print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),\n...                                       np.std(scores)))\nCV accuracy: 0.974 +/- 0.015 \n```", "```py\n>>> from sklearn.tree import DecisionTreeClassifier\n>>> gs = GridSearchCV(estimator=DecisionTreeClassifier(\n...                       random_state=0),\n...                   param_grid=[{'max_depth': [1, 2, 3,\n...                                              4, 5, 6,\n...                                              7, None]}],\n...                   scoring='accuracy',\n...                   cv=2)\n>>> scores = cross_val_score(gs, X_train, y_train,\n...                          scoring='accuracy', cv=5)\n>>> print('CV accuracy: %.3f +/- %.3f' % (np.mean(scores),\n...                                       np.std(scores)))\nCV accuracy: 0.934 +/- 0.016 \n```", "```py\n>>> from sklearn.metrics import confusion_matrix\n>>> pipe_svc.fit(X_train, y_train)\n>>> y_pred = pipe_svc.predict(X_test)\n>>> confmat = confusion_matrix(y_true=y_test, y_pred=y_pred)\n>>> print(confmat)\n[[71  1]\n[ 2 40]] \n```", "```py\n>>> fig, ax = plt.subplots(figsize=(2.5, 2.5))\n>>> ax.matshow(confmat, cmap=plt.cm.Blues, alpha=0.3)\n>>> for i in range(confmat.shape[0]):\n...     for j in range(confmat.shape[1]):\n...         ax.text(x=j, y=i,\n...                 s=confmat[i, j],\n...                 va='center', ha='center')\n>>> plt.xlabel('Predicted label')\n>>> plt.ylabel('True label')\n>>> plt.show() \n```", "```py\n>>> from sklearn.metrics import precision_score\n>>> from sklearn.metrics import recall_score, f1_score\n>>> print('Precision: %.3f' % precision_score(\n...           y_true=y_test, y_pred=y_pred))\nPrecision: 0.976\n>>> print('Recall: %.3f' % recall_score(\n...           y_true=y_test, y_pred=y_pred))\nRecall: 0.952\n>>> print('F1: %.3f' % f1_score(\n...           y_true=y_test, y_pred=y_pred))\nF1: 0.964 \n```", "```py\n>>> from sklearn.metrics import make_scorer, f1_score\n>>> c_gamma_range = [0.01, 0.1, 1.0, 10.0]\n>>> param_grid = [{'svc__C': c_gamma_range,\n...                'svc__kernel': ['linear']},\n...               {'svc__C': c_gamma_range,\n...                'svc__gamma': c_gamma_range,\n...                'svc__kernel': ['rbf']}]\n>>> scorer = make_scorer(f1_score, pos_label=0)\n>>> gs = GridSearchCV(estimator=pipe_svc,\n...                   param_grid=param_grid,\n...                   scoring=scorer,\n...                   cv=10)\n>>> gs = gs.fit(X_train, y_train)\n>>> print(gs.best_score_)\n0.986202145696\n>>> print(gs.best_params_)\n{'svc__C': 10.0, 'svc__gamma': 0.01, 'svc__kernel': 'rbf'} \n```", "```py\n>>> from sklearn.metrics import roc_curve, auc\n>>> from scipy import interp\n>>> pipe_lr = make_pipeline(StandardScaler(),\n...                         PCA(n_components=2),\n...                         LogisticRegression(penalty='l2',\n...                                            random_state=1,\n...                                            solver='lbfgs',\n...                                            C=100.0))\n>>> X_train2 = X_train[:, [4, 14]]\n>>> cv = list(StratifiedKFold(n_splits=3,\n...                           random_state=1).split(X_train,\n...                                                 y_train))\n>>> fig = plt.figure(figsize=(7, 5))\n>>> mean_tpr = 0.0\n>>> mean_fpr = np.linspace(0, 1, 100)\n>>> all_tpr = []\n>>> for i, (train, test) in enumerate(cv):\n...     probas = pipe_lr.fit(\n...         X_train2[train],\n...         y_train[train]).predict_proba(X_train2[test])\n...     fpr, tpr, thresholds = roc_curve(y_train[test],\n...                                      probas[:, 1],\n...                                      pos_label=1)\n...     mean_tpr += interp(mean_fpr, fpr, tpr)\n...     mean_tpr[0] = 0.0\n...     roc_auc = auc(fpr, tpr)\n...     plt.plot(fpr,\n...              tpr,\n...              label='ROC fold %d (area = %0.2f)'\n...              % (i+1, roc_auc))\n>>> plt.plot([0, 1],\n...          [0, 1],\n...          linestyle='--',\n...          color=(0.6, 0.6, 0.6),\n...          label='Random guessing')\n>>> mean_tpr /= len(cv)\n>>> mean_tpr[-1] = 1.0\n>>> mean_auc = auc(mean_fpr, mean_tpr)\n>>> plt.plot(mean_fpr, mean_tpr, 'k--',\n...          label='Mean ROC (area = %0.2f)' % mean_auc, lw=2)\n>>> plt.plot([0, 0, 1],\n...          [0, 1, 1],\n...          linestyle=':',\n...          color='black',\n...          label='Perfect performance')\n>>> plt.xlim([-0.05, 1.05])\n>>> plt.ylim([-0.05, 1.05])\n>>> plt.xlabel('False positive rate')\n>>> plt.ylabel('True positive rate')\n>>> plt.legend(loc=\"lower right\")\n>>> plt.show() \n```", "```py\n>>> pre_scorer = make_scorer(score_func=precision_score,\n...                          pos_label=1,\n...                          greater_is_better=True,\n...                          average='micro') \n```", "```py\n>>> X_imb = np.vstack((X[y == 0], X[y == 1][:40]))\n>>> y_imb = np.hstack((y[y == 0], y[y == 1][:40])) \n0), we would achieve a prediction accuracy of approximately 90 percent:\n```", "```py\n>>> y_pred = np.zeros(y_imb.shape[0])\n>>> np.mean(y_pred == y_imb) * 100\n89.92443324937027 \n```", "```py\n>>> from sklearn.utils import resample\n>>> print('Number of class 1 examples before:',\n...       X_imb[y_imb == 1].shape[0])\nNumber of class 1 examples before: 40\n>>> X_upsampled, y_upsampled = resample(\n...         X_imb[y_imb == 1],\n...         y_imb[y_imb == 1],\n...         replace=True,\n...         n_samples=X_imb[y_imb == 0].shape[0],\n...         random_state=123)\n>>> print('Number of class 1 examples after:',\n...       X_upsampled.shape[0])\nNumber of class 1 examples after: 357 \n```", "```py\n>>> X_bal = np.vstack((X[y == 0], X_upsampled))\n>>> y_bal = np.hstack((y[y == 0], y_upsampled)) \n```", "```py\n>>> y_pred = np.zeros(y_bal.shape[0])\n>>> np.mean(y_pred == y_bal) * 100\n50 \n```"]