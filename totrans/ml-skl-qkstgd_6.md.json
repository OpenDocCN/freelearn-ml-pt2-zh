["```py\nIf (value of feature is less than 50); then (put the triangles in the left-hand box and put the circles in the right-hand box).\n```", "```py\nimport pandas as pd\n\ndf = pd.read_csv('fraud_prediction.csv')\n```", "```py\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\n\ndt = DecisionTreeClassifier(criterion = 'gini', random_state = 50)\n\n#Fitting on the training data\n\ndt.fit(X_train, y_train)\n\n#Testing accuracy on the test data\n\ndt.score(X_test, y_test)\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\n#Creating a grid of different hyperparameters\n\ngrid_params = {\n    'max_depth': [1,2,3,4,5,6],\n    'min_samples_leaf': [0.02,0.04, 0.06, 0.08]\n}\n\n#Building a 10 fold Cross Validated GridSearchCV object\n\ngrid_object = GridSearchCV(estimator = dt, param_grid = grid_params, scoring = 'accuracy', cv = 10, n_jobs = -1)\n```", "```py\n#Fitting the grid to the training data\n\ngrid_object.fit(X_train, y_train)\n```", "```py\n#Extracting the best parameters\n\ngrid_object.best_params_\n```", "```py\n#Extracting the best parameters\n\ngrid_object.best_params_\n```", "```py\n#Package requirements \n\nimport pandas as pd\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.externals.six import StringIO \nfrom IPython.display import Image \nfrom sklearn.tree import export_graphviz\nimport pydotplus\nfrom sklearn import tree\n```", "```py\n#Reading in the data\n\ndf = pd.read_csv('fraud_prediction.csv')\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\n#Initializing the DT classifier\n\ndt = DecisionTreeClassifier(criterion = 'gini', random_state = 50, max_depth= 5)\n```", "```py\n#Fitting the classifier on the data\n\ndt.fit(features, target)\n\n#Extracting the feature names\n\nfeature_names = df.drop('isFraud', axis = 1)\n```", "```py\n#Creating the tree visualization\n\ndata = tree.export_graphviz(dt, out_file=None, feature_names= feature_names.columns.values, proportion= True)\n\ngraph = pydotplus.graph_from_dot_data(data) \n\n# Show graph\nImage(graph.create_png())\n```", "```py\nimport pandas as pd\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the index\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Initiliazing an Random Forest Classifier with default parameters\n\nrf_classifier = RandomForestClassifier(random_state = 50)\n\n#Fitting the classifier on the training data\n\nrf_classifier.fit(X_train, y_train)\n\n#Extracting the scores\n\nrf_classifier.score(X_test, y_test)\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\n#Creating a grid of different hyperparameters\n\ngrid_params = {\n 'n_estimators': [100,200, 300,400,5000],\n 'max_depth': [1,2,4,6,8],\n 'min_samples_leaf': [0.05, 0.1, 0.2]\n}\n\n#Building a 3 fold Cross-Validated GridSearchCV object\n\ngrid_object = GridSearchCV(estimator = rf_classifier, param_grid = grid_params, scoring = 'accuracy', cv = 3, n_jobs = -1)\n\n#Fitting the grid to the training data\n\ngrid_object.fit(X_train, y_train)\n\n#Extracting the best parameters\n\ngrid_object.best*params* #Extracting the best model\n\nrf_best = grid_object.best*estimator_* \n```", "```py\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the index\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n```", "```py\nfrom sklearn.ensemble import AdaBoostClassifier\n\n#Initialize a tree (Decision Tree with max depth = 1)\n\ntree = DecisionTreeClassifier(max_depth=1, random_state = 42)\n\n#Initialize an AdaBoost classifier with the tree as the base estimator\n\nada_boost = AdaBoostClassifier(base_estimator = tree, n_estimators=100)\n\n#Fitting the AdaBoost classifier to the training set\n\nada_boost.fit(X_train, y_train)\n\n#Extracting the accuracy scores from the classifier\n\nada_boost.score(X_test, y_test)\n```", "```py\nfrom sklearn.model_selection import GridSearchCV\n\n#Creating a grid of hyperparameters\n\ngrid_params = {\n    'n_estimators': [100,200,300]\n}\n\n#Building a 3 fold CV GridSearchCV object\n\ngrid_object = GridSearchCV(estimator = ada_boost, param_grid = grid_params, scoring = 'accuracy', cv = 3, n_jobs = -1)\n\n#Fitting the grid to the training data\n\ngrid_object.fit(X_train, y_train)\n\n#Extracting the best parameters\n\ngrid_object.best*params* \n#Extracting the best model\nada_best = grid_object.best_estimator_\n```", "```py\nimport pandas as pd\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the index\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('amount', axis = 1).values\ntarget = df['amount'].values\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\n\n#Splitting the data into training and test sets\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42)\n\n#Building the decision tree regressor \n\ndt_reg = DecisionTreeRegressor(max_depth = 10, min_samples_leaf = 0.2, random_state= 50)\n\n#Fitting the tree to the training data\n\ndt_reg.fit(X_train, y_train)\n```", "```py\n#Package requirements \n\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.externals.six import StringIO \nfrom IPython.display import Image \nfrom sklearn.tree import export_graphviz\nimport pydotplus\nfrom sklearn import tree\n\n#Extracting the feature names\n\nfeature_names = df.drop('amount', axis = 1)\n\n#Creating the tree visualization\n\ndata = tree.export_graphviz(dt_reg, out_file=None, feature_names= feature_names.columns.values, proportion= True)\n\ngraph = pydotplus.graph_from_dot_data(data) \n\n# Show graph\nImage(graph.create_png())\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the index\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features and target arrays\n\nfeatures = df.drop('amount', axis = 1).values\ntarget = df['amount'].values\n\n#Splitting the data into training and test sets\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42)\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\n\n#Initiliazing an Random Forest Regressor with default parameters\n\nrf_reg = RandomForestRegressor(max_depth = 10, min_samples_leaf = 0.2, random_state = 50)\n\n#Fitting the regressor on the training data\n\nrf_reg.fit(X_train, y_train)\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the index\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Creating the features \n\nfeatures = df.drop('amount', axis = 1).values\ntarget = df['amount'].values\n\n#Splitting the data into training and test sets\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42)\n```", "```py\nfrom sklearn.ensemble import GradientBoostingRegressor\n\n#Initializing an Gradient Boosted Regressor with default parameters\n\ngb_reg = GradientBoostingRegressor(max_depth = 5, n_estimators = 100, learning_rate = 0.1, random_state = 50)\n\n#Fitting the regressor on the training data\n\ngb_reg.fit(X_train, y_train)\n```", "```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the index\n\ndf = df.drop(['Unnamed: 0'], axis = 1)\n\n#Splitting the data into training and test sets\n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import RandomForestClassifier\n\n#Initializing the DT classifier\n\ndt = DecisionTreeClassifier(criterion = 'gini', random_state = 50)\n\n#Fitting on the training data\n\ndt.fit(X_train, y_train)\n\n#Initiliazing an Random Forest Classifier with default parameters\n\nrf_classifier = RandomForestClassifier(random_state = 50)\n\n#Fitting the classifier on the training data\n\nrf_classifier.fit(X_train, y_train)\n```", "```py\nfrom sklearn.ensemble import VotingClassifier\n\n#Creating a list of models\n\nmodels = [('Decision Tree', dt), ('Random Forest', rf_classifier)]\n\n#Initialize a voting classifier \n\nvoting_model = VotingClassifier(estimators = models)\n\n#Fitting the model to the training data\n\nvoting_model.fit(X_train, y_train)\n\n#Evaluating the accuracy on the test data\n\nvoting_model.score(X_test, y_test)\n```"]