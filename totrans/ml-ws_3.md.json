["```py\n    from sklearn.datasets import load_wine\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    ```", "```py\n    data = load_wine()\n    ```", "```py\n    X = pd.DataFrame(data.data)\n    Y = pd.DataFrame(data.target)\n    print(X.shape,Y.shape)\n    ```", "```py\n    (178, 13) (178, 1)\n    ```", "```py\n    X, X_test, Y, Y_test = train_test_split(X, Y, test_size = 0.2)\n    ```", "```py\n    print(X.shape, X_test.shape, Y.shape, Y_test.shape)\n    ```", "```py\n    (142, 13) (36, 13) (142, 1) (36, 1)\n    ```", "```py\n    dev_size = 36/142\n    print(dev_size)\n    ```", "```py\n    X_train, X_dev, Y_train, Y_dev = train_test_split(X, Y, \\\n                                     test_size = dev_size)\n    print(X_train.shape, Y_train.shape, X_dev.shape, \\\n          Y_dev.shape, X_test.shape, Y_test.shape)\n    ```", "```py\n    (106, 13) (106, 1) (36, 13) (36, 1) (36, 13) (36, 1)\n    ```", "```py\n    from sklearn.datasets import load_wine\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn.model_selection import KFold\n    ```", "```py\n    data = load_wine()\n    X = pd.DataFrame(data.data)\n    Y = pd.DataFrame(data.target)\n    ```", "```py\n    X, X_test, Y, Y_test = train_test_split(X, Y, \\\n                                            test_size = 0.10)\n    ```", "```py\n    kf = KFold(n_splits = 10)\n    ```", "```py\n    splits = kf.split(X)\n    ```", "```py\n    for train_index, test_index in splits:\n        X_train, X_dev = X.iloc[train_index,:], \\\n                         X.iloc[test_index,:]\n        Y_train, Y_dev = Y.iloc[train_index,:], \\\n                         Y.iloc[test_index,:]\n    ```", "```py\n    print(X_train.shape, Y_train.shape, X_dev.shape, \\\n          Y_dev.shape, X_test.shape, Y_test.shape)\n    ```", "```py\n    (144, 13) (144, 1) (16, 13) (16, 1) (18, 13) (18, 1)\n    ```", "```py\n    from sklearn.datasets import load_breast_cancer\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn import tree\n    from sklearn.metrics import confusion_matrix\n    from sklearn.metrics import accuracy_score\n    from sklearn.metrics import precision_score\n    from sklearn.metrics import recall_score\n    ```", "```py\n    data = load_breast_cancer()\n    X = pd.DataFrame(data.data)\n    Y = pd.DataFrame(data.target)\n    ```", "```py\n    X_train, X_test, \\\n    Y_train, Y_test = train_test_split(X,Y, test_size = 0.1, \\\n                                       random_state = 0)\n    ```", "```py\n    model = tree.DecisionTreeClassifier(random_state = 0)\n    model = model.fit(X_train, Y_train)\n    Y_pred = model.predict(X_test)\n    ```", "```py\n    confusion_matrix(Y_test, Y_pred)\n    ```", "```py\n    array([[21, 1],\n           [6, 29]])\n    ```", "```py\n    accuracy = accuracy_score(Y_test, Y_pred)\n    print(\"accuracy:\", accuracy)\n    precision = precision_score(Y_test, Y_pred)\n    print(\"precision:\", precision)\n    recall = recall_score(Y_test, Y_pred)\n    print(\"recall:\", recall)\n    ```", "```py\n    accuracy: 0.8771\n    precision: 0.9666\n    recall: 0.8285\n    ```", "```py\n    from sklearn.datasets import load_boston\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    from sklearn import linear_model\n    from sklearn.metrics import mean_absolute_error\n    from sklearn.metrics import mean_squared_error\n    import numpy as np\n    ```", "```py\n    data = load_boston()\n    X = pd.DataFrame(data.data)\n    Y = pd.DataFrame(data.target)\n    X_train, X_test, Y_train, Y_test = train_test_split(X,Y, \\\n                                       test_size = 0.1, random_state = 0)\n    ```", "```py\n    model = linear_model.LinearRegression()\n    model = model.fit(X_train, Y_train)\n    Y_pred = model.predict(X_test)\n    ```", "```py\n    MAE = mean_absolute_error(Y_test, Y_pred)\n    print(\"MAE:\", MAE)\n    RMSE = np.sqrt(mean_squared_error(Y_test, Y_pred))\n    print(\"RMSE:\", RMSE)\n    ```", "```py\n    MAE: 3.9357\n    RMSE: 6.4594\n    ```", "```py\n    Y_test_2 = Y_test[:]\n    Y_test_2[Y_test_2 != 6] = 1\n    Y_test_2[Y_test_2 == 6] = 0\n    Y_pred_2 = Y_pred\n    Y_pred_2[Y_pred_2 != 6] = 1\n    Y_pred_2[Y_pred_2 == 6] = 0\n    ```", "```py\n    Accuracy = 84.72%\n    Precision = 98.41%\n    Recall = 98.10%\n    ```", "```py\n    from sklearn.datasets import load_breast_cancer\n    import pandas as pd\n    from sklearn.model_selection import train_test_split\n    import numpy as np\n    from sklearn import tree\n    from sklearn.metrics import recall_score\n    ```", "```py\n    breast_cancer = load_breast_cancer()\n    X = pd.DataFrame(breast_cancer.data)\n    Y = pd.DataFrame(breast_cancer.target)\n    ```", "```py\n    X_new, X_test, Y_new, Y_test = train_test_split(X, Y, \\\n                                   test_size = 0.1, random_state = 101)\n    test_size = X_test.shape[0] / X_new.shape[0]\n    X_train, X_dev, Y_train, Y_dev = train_test_split(X_new, Y_new, \\\n                                     test_size = test_size, \\\n                                     random_state = 101)\n    print(X_train.shape, Y_train.shape, X_dev.shape, \\\n          Y_dev.shape, X_test.shape, Y_test.shape)\n    ```", "```py\n    (455, 30) (455, 1) (57, 30) (57, 1) (57, 30) (57, 1)\n    ```", "```py\n    np.random.seed(101)\n    indices_train = np.random.randint(0, len(X_train), 25)\n    indices_dev = np.random.randint(0, len(X_dev), 25)\n    X_train_dev = pd.concat([X_train.iloc[indices_train,:], \\\n                             X_dev.iloc[indices_dev,:]])\n    Y_train_dev = pd.concat([Y_train.iloc[indices_train,:], \\\n                             Y_dev.iloc[indices_dev,:]])\n    print(X_train_dev.shape, Y_train_dev.shape)\n    ```", "```py\n    (50, 30) (50, 1)\n    ```", "```py\n    model = tree.DecisionTreeClassifier(random_state = 101)\n    model = model.fit(X_train, Y_train)\n    ```", "```py\n    sets = [\"Training\", \"Train/dev\", \"Validation\", \"Testing\"]\n    X_sets = [X_train, X_train_dev, X_dev, X_test]\n    Y_sets = [Y_train, Y_train_dev, Y_dev, Y_test]\n    scores = {}\n    for i in range(0, len(X_sets)):\n        pred = model.predict(X_sets[i])\n        score = recall_score(Y_sets[i], pred)\n        scores[sets[i]] = score\n    print(scores)\n    ```", "```py\n    {'Training': 1.0, 'Train/dev': 0.9705882352941176, 'Validation': 0.9333333333333333, 'Testing': 0.9714285714285714}\n    ```"]