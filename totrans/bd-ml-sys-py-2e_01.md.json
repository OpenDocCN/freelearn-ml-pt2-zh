["```py\n>>> import numpy\n>>> numpy.version.full_version\n1.8.1\n\n```", "```py\n>>> from numpy import *\n\n```", "```py\n>>> import numpy as np\n>>> a = np.array([0,1,2,3,4,5])\n>>> a\narray([0, 1, 2, 3, 4, 5])\n>>> a.ndim\n1\n>>> a.shape\n(6,)\n\n```", "```py\n>>> b = a.reshape((3,2))\n>>> b\narray([[0, 1],\n [2, 3],\n [4, 5]])\n>>> b.ndim\n2\n>>> b.shape\n(3, 2)\n\n```", "```py\n>>> b[1][0] = 77\n>>> b\narray([[ 0,  1],\n [77,  3],\n [ 4,  5]])\n>>> a\narray([ 0,  1, 77,  3,  4,  5])\n\n```", "```py\n>>> c = a.reshape((3,2)).copy()\n>>> c\narray([[ 0,  1],\n [77,  3],\n [ 4,  5]])\n>>> c[0][0] = -99\n>>> a\narray([ 0,  1, 77,  3,  4,  5])\n>>> c\narray([[-99,   1],\n [ 77,   3],\n [  4,   5]])\n\n```", "```py\n>>> d = np.array([1,2,3,4,5])\n>>> d*2\narray([ 2,  4,  6,  8, 10])\n\n```", "```py\n>>> d**2\narray([ 1,  4,  9, 16, 25])\n\n```", "```py\n>>> [1,2,3,4,5]*2\n[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n>>> [1,2,3,4,5]**2\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'\n\n```", "```py\n>>> a[np.array([2,3,4])]\narray([77,  3,  4])\n\n```", "```py\n>>> a>4\narray([False, False,  True, False, False,  True], dtype=bool)\n>>> a[a>4]\narray([77,  5])\n\n```", "```py\n>>> a[a>4] = 4\n>>> a\narray([0, 1, 4, 3, 4, 4])\n\n```", "```py\n>>> a.clip(0,4)\narray([0, 1, 4, 3, 4, 4])\n\n```", "```py\n>>> c = np.array([1, 2, np.NAN, 3, 4]) # let's pretend we have read this from a text file\n>>> c\narray([  1.,   2.,  nan,   3.,   4.])\n>>> np.isnan(c)\narray([False, False,  True, False, False], dtype=bool)\n>>> c[~np.isnan(c)]\narray([ 1.,  2.,  3.,  4.])\n>>> np.mean(c[~np.isnan(c)])\n2.5\n\n```", "```py\nimport timeit\nnormal_py_sec = timeit.timeit('sum(x*x for x in range(1000))',\n number=10000)\nnaive_np_sec = timeit.timeit(\n 'sum(na*na)',\n setup=\"import numpy as np; na=np.arange(1000)\",\n number=10000)\ngood_np_sec = timeit.timeit(\n 'na.dot(na)',\n setup=\"import numpy as np; na=np.arange(1000)\",\n number=10000)\n\nprint(\"Normal Python: %f sec\" % normal_py_sec)\nprint(\"Naive NumPy: %f sec\" % naive_np_sec)\nprint(\"Good NumPy: %f sec\" % good_np_sec)\n\nNormal Python: 1.050749 sec\nNaive NumPy: 3.962259 sec\nGood NumPy: 0.040481 sec\n\n```", "```py\n>>> a = np.array([1,2,3])\n>>> a.dtype\ndtype('int64')\n\n```", "```py\n>>> np.array([1, \"stringy\"])\narray(['1', 'stringy'], dtype='<U7')\n>>> np.array([1, \"stringy\", set([1,2,3])])\narray([1, stringy, {1, 2, 3}], dtype=object)\n\n```", "```py\n>>> import scipy, numpy\n>>> scipy.version.full_version\n0.14.0\n>>> scipy.dot is numpy.dot\nTrue\n\n```", "```py\n>>> import scipy as sp\n>>> data = sp.genfromtxt(\"web_traffic.tsv\", delimiter=\"\\t\")\n\n```", "```py\n>>> print(data[:10])\n[[  1.00000000e+00   2.27200000e+03]\n [  2.00000000e+00              nan]\n [  3.00000000e+00   1.38600000e+03]\n [  4.00000000e+00   1.36500000e+03]\n [  5.00000000e+00   1.48800000e+03]\n [  6.00000000e+00   1.33700000e+03]\n [  7.00000000e+00   1.88300000e+03]\n [  8.00000000e+00   2.28300000e+03]\n [  9.00000000e+00   1.33500000e+03]\n [  1.00000000e+01   1.02500000e+03]]\n>>> print(data.shape)\n(743, 2)\n\n```", "```py\nx = data[:,0]\ny = data[:,1]\n\n```", "```py\n>>> sp.sum(sp.isnan(y))\n8\n\n```", "```py\n>>> x = x[~sp.isnan(y)]\n>>> y = y[~sp.isnan(y)]\n\n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> # plot the (x,y) points with dots of size 10\n>>> plt.scatter(x, y, s=10)\n>>> plt.title(\"Web traffic over the last month\")\n>>> plt.xlabel(\"Time\")\n>>> plt.ylabel(\"Hits/hour\")\n>>> plt.xticks([w*7*24 for w in range(10)],\n ['week %i' % w for w in range(10)])\n>>> plt.autoscale(tight=True)\n>>> # draw a slightly opaque, dashed grid\n>>> plt.grid(True, linestyle='-', color='0.75')\n>>> plt.show()\n\n```", "```py\ndef error(f, x, y):\n return sp.sum((f(x)-y)**2)\n\n```", "```py\nfp1, residuals, rank, sv, rcond = sp.polyfit(x, y, 1, full=True)\n\n```", "```py\n>>> print(\"Model parameters: %s\" % fp1)\nModel parameters: [   2.59619213  989.02487106]\n>>> print(residuals)\n[  3.17389767e+08]\n\n```", "```py\nf(x) = 2.59619213 * x + 989.02487106.\n\n```", "```py\n>>> f1 = sp.poly1d(fp1)\n>>> print(error(f1, x, y))\n317389767.34\n\n```", "```py\nfx = sp.linspace(0,x[-1], 1000) # generate X-values for plotting\nplt.plot(fx, f1(fx), linewidth=4)\nplt.legend([\"d=%i\" % f1.order], loc=\"upper left\")\n\n```", "```py\n>>> f2p = sp.polyfit(x, y, 2)\n>>> print(f2p)\narray([  1.05322215e-02,  -5.26545650e+00,   1.97476082e+03])\n>>> f2 = sp.poly1d(f2p)\n>>> print(error(f2, x, y))\n179983507.878\n\n```", "```py\nf(x) = 0.0105322215 * x**2  - 5.26545650 * x + 1974.76082\n\n```", "```py\nRankWarning: Polyfit may be poorly conditioned\n\n```", "```py\nError d=1: 317,389,767.339778\nError d=2: 179,983,507.878179\nError d=3: 139,350,144.031725\nError d=10: 121,942,326.363461\nError d=53: 109,318,004.475556\n\n```", "```py\ninflection = 3.5*7*24 # calculate the inflection point in hours\nxa = x[:inflection] # data before the inflection point\nya = y[:inflection]\nxb = x[inflection:] # data after\nyb = y[inflection:]\n\nfa = sp.poly1d(sp.polyfit(xa, ya, 1))\nfb = sp.poly1d(sp.polyfit(xb, yb, 1))\n\nfa_error = error(fa, xa, ya)\nfb_error = error(fb, xb, yb)\nprint(\"Error inflection=%f\" % (fa_error + fb_error))\nError inflection=132950348.197616\n\n```", "```py\nError d=1:   22,143,941.107618\nError d=2:   19,768,846.989176\nError d=3:   19,766,452.361027\nError d=10:  18,949,339.348539\nError d=53:  18,300,702.038119\n\n```", "```py\nError d=1: 6397694.386394\nError d=2: 6010775.401243\nError d=3: 6047678.658525\nError d=10: 7037551.009519\nError d=53: 7052400.001761\n\n```", "```py\n>>> fbt2 = sp.poly1d(sp.polyfit(xb[train], yb[train], 2))\n>>> print(\"fbt2(x)= \\n%s\" % fbt2)\nfbt2(x)=\n 2\n0.086 x - 94.02 x + 2.744e+04\n>>> print(\"fbt2(x)-100,000= \\n%s\" % (fbt2-100000))\nfbt2(x)-100,000=\n 2\n0.086 x - 94.02 x - 7.256e+04\n>>> from scipy.optimize import fsolve\n>>> reached_max = fsolve(fbt2-100000, x0=800)/(7*24)\n>>> print(\"100,000 hits/hour expected at week %f\" % reached_max[0])\n\n```"]