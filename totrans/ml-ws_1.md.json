["```py\n    jupyter notebook\n    ```", "```py\n    import seaborn as sns\n    tips = sns.load_dataset('tips')\n    ```", "```py\n    X = tips.drop('tip', axis=1)\n    X.head(10)\n    axis = 0) or columns (axis = 1).\n    ```", "```py\n    X.shape\n    ```", "```py\n    (244, 6)\n    ```", "```py\n    Y = tips['tip']\n    Y.head(10)\n    ```", "```py\n    Y.shape\n    ```", "```py\n    (244,) \n    ```", "```py\n    Features matrix: (891, 14)\n    Target matrix: (891,)\n    ```", "```py\n    import seaborn as sns\n    import numpy as np\n    import matplotlib.pyplot as plt\n    tips = sns.load_dataset('tips')\n    ```", "```py\n    size = tips[\"size\"]\n    size.loc[:15] = np.nan\n    size.head(20)\n    NaN), which is the representation of a missing value. Finally, it prints the top 20 values of the variable.\n    ```", "```py\n    size.shape\n    ```", "```py\n    (244,)\n    ```", "```py\n    size.isnull().sum()\n    ```", "```py\n    16\n    ```", "```py\n    mean = size.mean()\n    mean = round(mean)\n    print(mean)\n    ```", "```py\n    size.fillna(mean, inplace=True)\n    size.head(20)\n    ```", "```py\n    plt.hist(size)\n    plt.show()\n    ```", "```py\n    min_val = size.mean() - (3 * size.std())\n    print(min_val)\n    ```", "```py\n    max_val = size.mean() + (3 * size.std())\n    print(max_val)\n    ```", "```py\n    outliers = size[size > max_val]\n    outliers.count()\n    ```", "```py\n    print(outliers)\n    ```", "```py\n    age = size[size <= max_val]\n    age.shape\n    ```", "```py\n    (240,)\n    ```", "```py\n    from sklearn.preprocessing import LabelEncoder\n    import pandas as pd\n    ```", "```py\n    enc = LabelEncoder()\n    tips[\"sex\"] = enc.fit_transform(tips['sex'].astype('str'))\n    tips[\"smoker\"] = enc.fit_transform(tips['smoker'].astype('str'))\n    tips[\"day\"] = enc.fit_transform(tips['day'].astype('str'))\n    tips[\"time\"] = enc.fit_transform(tips['time'].astype('str'))\n    ```", "```py\n    tips.head()\n    ```", "```py\n    tips_normalized = (tips - tips.min())/(tips.max()-tips.min())\n    tips_normalized.head(10)\n    ```", "```py\n    tips_standardized = (tips - tips.mean())/tips.std()\n    tips_standardized.head(10)\n    ```", "```py\nfrom sklearn.naive_bayes import GaussianNB\nmodel = GaussianNB()\nmodel.fit(X_train, Y_train)\n```", "```py\nY_pred = model.predict(X_test)\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nscaler.fit(X_train)\nX_train = scaler.transform(X_train)\n```", "```py\nX_test = scaler.transform(X_test)\n```"]