["```py\nimport pandas as pd\n#Reading in the dataset\ndf = pd.read_csv('fraud_prediction.csv')\n#Dropping the target feature & the index\ndf = df.drop(['Unnamed: 0', 'isFraud'], axis = 1)\n```", "```py\nfrom sklearn.cluster import KMeans\n#Initializing K-means with 2 clusters\nk_means = KMeans(n_clusters = 2)\n#Fitting the model on the data\nk_means.fit(df)\n```", "```py\n#Extracting labels \ntarget_labels = k_means.predict(df)\n#Printing the labels\ntarget_labels\n```", "```py\n# Inertia of present model\nk_means.inertia_\n```", "```py\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n#Initialize a list of clusters from 1 to 10 clusters \n\nclusters = [1,2,3,4,5,6,7,8,9,10]\n\n#Create an empty list in order to store the inertia values \n\ninertia_values = []\n\nfor cluster in clusters:\n\n    #Build a k-means model for each cluster value\n\n    k_means = KMeans(n_clusters = cluster)\n\n    #Fit the model to the data\n\n    k_means.fit(df)\n\n    # Store inertia value of each model into the empty list \n\n    inertia_values.append(k_means.inertia_)\n\n# Plot the result\n\nplt.lineplot(x = clusters, y = inertia_values)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia Value')\nplt.title('Number of Clusters Vs. Inertia Values')\nplt.show()\n```", "```py\nfrom sklearn.preprocessing import StandardScaler\n\n#Setting up the standard scaler \n\nscale_data = StandardScaler()\n\n#Scaling the data\n\nscale_data.fit(df)\n\ndf_scaled = scale_data.transform(df)\n\n#Applying the K-Means algorithm on the scaled data\n\n#Initializing K-means with 2 clusters\n\nk_means = KMeans(n_clusters = 2)\n\n#Fitting the model on the data\n\nk_means.fit(df_scaled)\n\n# Inertia of present model\n\nk_means.inertia_\n```", "```py\n#Initialize a list of clusters from 1 to 10 clusters \n\nclusters = [1,2,3,4,5,6,7,8,9,10]\n\n#Create an empty list in order to store the inertia values \n\ninertia_values = []\n\nfor cluster in clusters:\n\n    #Build a k-means model for each cluster value\n\n    k_means = KMeans(n_clusters = cluster)\n\n    #Fit the model to the data\n\n    k_means.fit(df_scaled)\n\n    # Store inertia value of each model into the empty list \n\n    inertia_values.append(k_means.inertia_)\n\n# Plot the result\n\nsns.lineplot(x = clusters, y = inertia_values)\nplt.xlabel('Number of Clusters')\nplt.ylabel('Inertia Value')\nplt.title('Number of Clusters Vs. Inertia Values')\nplt.show()\n```", "```py\nfrom sklearn.decomposition import PCA\n\n#Initialize a PCA model with 5 features \n\npca_model = PCA(n_components = 5)\n\n#Fit the model to the scaled dataframe\n\npca_model.fit(df_scaled)\n\n#Transform the features so that it is de-correlated\n\npca_transform = pca_model.transform(df_scaled)\n\n#Check to see if there are only 5 features\n\npca_transform.shape\n```", "```py\n#Applying the K-Means algorithm on the scaled data\n\n#Initializing K-means with 2 clusters\n\nk_means = KMeans(n_clusters = 2)#Fitting the model on the data\n\nk_means.fit(pca_transform)\n\n# Inertia of present model\n\nk_means.inertia_\n```", "```py\n#Initialize a list of principal components\n\ncomponents = [1,2,3,4,5,6,7,8,9,10]\n\n#Create an empty list in order to store the inertia values \n\ninertia_values = []\n\nfor comp in components:\n\n    #Initialize a PCA model\n\n    pca_model = PCA(n_components = comp)\n\n    #Fit the model to the dataframe\n\n    pca_model.fit(df_scaled)\n\n    #Transform the features so that it is de-correlated\n\n    pca_transform = pca_model.transform(df_scaled)\n\n    #Build a k-means model \n\n    k_means = KMeans(n_clusters = 2)\n\n    #Fit the model to the data\n\n    k_means.fit(pca_transform)\n\n    # Store inertia value of each model into the empty list \n\n    inertia_values.append(k_means.inertia_)\n\n# Plot the result\n\nsns.lineplot(x = components, y = inertia_values)\nplt.xlabel('Number of Principal Components')\nplt.ylabel('Inertia Value')\nplt.title('Number of Components Vs. Inertia Values')\nplt.show()\n```", "```py\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the target feature & the index\n\ndf = df.drop(['Unnamed: 0', 'isFraud'], axis = 1)\n\n#Initializing K-means with 2 clusters\n\nk_means = KMeans(n_clusters = 2)\n\n#Fitting the model on the data\n\nk_means.fit(df)\n\n#Extracting labels \n\ntarget_labels = k_means.predict(df)\n\n#Converting the labels to a series \n\ntarget_labels = pd.Series(target_labels)\n\n#Merging the labels to the dataset\n\ndf = pd.merge(df, pd.DataFrame(target_labels), left_index=True, right_index=True)\n\n#Renaming the target \n\ndf['fraud'] = df[0]\ndf = df.drop([0], axis = 1)\n```", "```py\nfrom sklearn.manifold import TSNE\n\n#Creating the features\n\nfeatures = df.drop('fraud', axis = 1).values\n\ntarget = df['fraud'].values\n\n#Initialize a TSNE object\n\ntsne_object = TSNE()\n\n#Fit and transform the features using the TSNE object\n\ntransformed = tsne_object.fit_transform(features)\n```", "```py\n#Creating a t-SNE visualization\n\nx_axis = transformed[:,0]\n\ny_axis = transformed[:,1]\n\nplt.scatter(x_axis, y_axis, c = target)\n\nplt.show()\n```", "```py\nfrom scipy.cluster.hierarchy import linkage\nfrom scipy.cluster.hierarchy import dendrogram\nimport numpy as np\nimport matplotlib.pyplot as plt \n\n#Creating an array of 4 features\n\narray = np.array([[1,2,3,4], [5,6,7,8], [2,3,4,5], [5,6,4,3]])\n\nfeature_names = ['a', 'b', 'c', 'd']\n\n#Creating clusters\n\nclusters = linkage(array, method = 'complete')\n\n#Creating a dendrogram\n\ndendrogram(clusters, labels = feature_names, leaf_rotation = 90)\n\nplt.show()\n```", "```py\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the target feature & the index\n\ndf = df.drop(['Unnamed: 0', 'isFraud'], axis = 1)\n```", "```py\n#Initializing K-means with 2 clusters\n\nk_means = KMeans(n_clusters = 2)\n\n#Fitting the model on the data\n\nk_means.fit(df)\n```", "```py\n#Extracting labels \n\ntarget_labels = k_means.predict(df)\n\n#Converting the labels to a series \n\ntarget_labels = pd.Series(target_labels)\n\n#Merging the labels to the dataset\n\ndf = pd.merge(df, pd.DataFrame(target_labels), left_index=True, right_index=True)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.externals.six import StringIO\nfrom IPython.display import Image\nfrom sklearn.tree import export_graphviz\nimport pydotplus\nfrom sklearn import tree\n```", "```py\n#Renaming the target \n\ndf['fraud'] = df[0]\ndf = df.drop([0], axis = 1)\n```", "```py\n#Creating the features\n\nfeatures = df.drop('fraud', axis = 1).values\n\ntarget = df['fraud'].values\n\n#Initializing an empty DT classifier with a random state value of 42\n\ndt_classifier = DecisionTreeClassifier(criterion = 'gini', random_state = 42)\n\n#Fitting the classifier on the training data \n\ndt_classifier.fit(features, target)\n\n```", "```py\n#Creating a data frame with the features only\n\nfeatures = df.drop('fraud', axis = 1)\n\ndot_data = tree.export_graphviz(dt_classifier, out_file=None, feature_names= features.columns)\n\n# Draw graph\n\ngraph = pydotplus.graph_from_dot_data(dot_data)\n\n#Show graph \n\nImage(graph.create_png())\n```"]