["```py\n> library(rio)\n> credit <- import(\"credit.csv\")\n\n```", "```py\n> export(credit, \"credit.xlsx\")\n\n```", "```py\n> convert(\"credit.csv\", \"credit.dta\")\n\n```", "```py\n> library(RODBC)\n> my_db <- odbcConnect(\"my_dsn\")\n\n```", "```py\n> my_db <- odbcConnect(\"my_dsn\",\n uid = \"my_username\",\n pwd = \"my_password\")\n\n```", "```py\n> my_query <- \"select * from my_table where my_value = 1\"\n> results_df <- sqlQuery(channel = my_db, query = sql_query,\n stringsAsFactors = FALSE)\n\n```", "```py\n> odbcClose(my_db)\n\n```", "```py\n> mydata <- read.csv(\"http://www.mysite.com/mydata.csv\")\n\n```", "```py\n> mytext <- readLines(\"http://www.mysite.com/myfile.txt\")\n\n```", "```py\n> download.file(\"http://www.mysite.com/myfile.zip\", \"myfile.zip\")\n\n```", "```py\n> library(RCurl) \n> packt_page <- (\"https://www.packtpub.com/\")\n\n```", "```py\n> str(packt_page, nchar.max=200)\n chr \"<!DOCTYPE html>\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">\\n\\t<head>\\n\\t\\t<title>Packt Publishing | Technology Books, eBooks & Videos</title>\\n\\t\\t<script>\\n\\t\\t\\tdata\"| __truncated__\n\n```", "```py\n> library(httr)\n> packt_page <- GET(\"https://www.packtpub.com\")\n> str(packt_page, max.level = 1)\nList of 9\n $ url        : chr \"https://www.packtpub.com/\"\n $ status_code: int 200\n $ headers    : List of 11\n $ all_headers: List of 1\n $ cookies    : list()\n $ content    : raw [1:58560] 3c 21 44 4f ...\n $ date       : POSIXct[1:1], format: \"2015-05-24 20:46:40\"\n $ times      : Named num [1:6] 0 0.000071 0.000079 ...\n $ request    : List of 5\n\n```", "```py\n> str(content(packt_page, type=\"text\"), nchar.max=200)\n chr \"<!DOCTYPE html>\\n<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\">\\n\\t<head>\\n\\t\\t<title>Packt Publishing | Technology Books, eBooks & Videos</title>\\n\\t\\t<script>\\n\\t\\t\\tdata\"| __truncated__\n\n```", "```py\n> library(rvest)\n> packt_page <- html(\"https://www.packtpub.com\")\n\n```", "```py\n> html_node(packt_page, \"title\")\n<title>Packt Publishing | Technology Books, eBooks &amp; Videos</title>\n\n```", "```py\n> html_node(packt_page, \"title\") %>% html_text()\n[1] \"Packt Publishing | Technology Books, eBooks & Videos\"\n\n```", "```py\n> library(rvest)\n> cran_ml <- html(\"http://cran.r-project.org/web/views/MachineLearning.html\")\n> cran_ml\n\n```", "```py\n <h3>CRAN packages:</h3>\n <ul>\n <li><a href=\"../packages/ahaz/index.html\">ahaz</a></li>\n <li><a href=\"../packages/arules/index.html\">arules</a></li>\n <li><a href=\"../packages/bigrf/index.html\">bigrf</a></li>\n <li><a href=\"../packages/bigRR/index.html\">bigRR</a></li>\n <li><a href=\"../packages/bmrm/index.html\">bmrm</a></li>\n <li><a href=\"../packages/Boruta/index.html\">Boruta</a></li>\n <li><a href=\"../packages/bst/index.html\">bst</a></li>\n <li><a href=\"../packages/C50/index.html\">C50</a></li>\n <li><a href=\"../packages/caret/index.html\">caret</a></li>\n\n```", "```py\n> ml_packages <- html_nodes(cran_ml, \"a\")\n\n```", "```py\n> head(ml_packages, n = 7)\n[[1]]\n<a href=\"../packages/nnet/index.html\">nnet</a> \n\n[[2]]\n<a href=\"../packages/RSNNS/index.html\">RSNNS</a> \n\n[[3]]\n<a href=\"../packages/rpart/index.html\">rpart</a> \n\n[[4]]\n<a href=\"../packages/tree/index.html\">tree</a> \n\n[[5]]\n<a href=\"../packages/rpart/index.html\">rpart</a> \n\n[[6]]\n<a href=\"http://www.cs.waikato.ac.nz/~ml/weka/\">Weka</a> \n\n[[7]]\n<a href=\"../packages/RWeka/index.html\">RWeka</a>\n\n```", "```py\n{\n  \"title\": \"Machine Learning with R\",\n  \"author\": \"Brett Lantz\",\n  \"publisher\": {\n     \"name\": \"Packt Publishing\",\n     \"url\": \"https://www.packtpub.com\"\n  },\n  \"topics\": [\"R\", \"machine learning\", \"data mining\"],\n  \"MSRP\": 54.99\n}\n```", "```py\n> library(httr)\n> map_search <-\n GET(\"https://maps.googleapis.com/maps/api/geocode/json\",\n query = list(address = \"Eiffel Tower\"))\n\n```", "```py\n> map_search\nResponse [https://maps.googleapis.com/maps/api/geocode/json?address=Eiffel%20T ower]\n Status: 200\n Content-Type: application/json; charset=UTF-8\n Size: 2.34 kB\n{\n \"results\" : [\n {\n \"address_components\" : [\n {\n \"long_name\" : \"Eiffel Tower\",\n \"short_name\" : \"Eiffel Tower\",\n \"types\" : [ \"point_of_interest\", \"establishment\" ]\n },\n {\n...\n\n```", "```py\n> content(map_search)\n$results[[1]]$formatted_address\n[1] \"Eiffel Tower, Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France\"\n\n$results[[1]]$geometry\n$results[[1]]$geometry$location\n$results[[1]]$geometry$location$lat\n[1] 48.85837\n\n$results[[1]]$geometry$location$lng\n[1] 2.294481\n\n```", "```py\n> content(map_search)$results[[1]]$formatted_address\n[1] \"Eiffel Tower, Champ de Mars, 5 Avenue Anatole France, 75007 Paris, France\"\n\n> content(map_search)$results[[1]]$geometry$location$lat\n[1] 48.85837\n\n> content(map_search)$results[[1]]$geometry$location$lng\n[1] 2.294481\n\n```", "```py\n> library(rjson)\n> ml_book <- list(book_title = \"Machine Learning with R\",\n author = \"Brett Lantz\")\n> toJSON(ml_book)\n[1] \"{\\\"book_title\\\":\\\"Machine Learning with R\\\",\n\\\"author\\\":\\\"Brett Lantz\\\"}\"\n\n```", "```py\n> ml_book_json <- \"{\n \\\"title\\\": \\\"Machine Learning with R\\\",\n \\\"author\\\": \\\"Brett Lantz\\\",\n \\\"publisher\\\": {\n \\\"name\\\": \\\"Packt Publishing\\\",\n \\\"url\\\": \\\"https://www.packtpub.com\\\"\n },\n \\\"topics\\\": [\\\"R\\\", \\\"machine learning\\\", \\\"data mining\\\"],\n \\\"MSRP\\\": 54.99\n}\"\n\n> ml_book_r <- fromJSON(ml_book_json)\n\n```", "```py\n> str(ml_book_r)\nList of 5\n $ title    : chr \"Machine Learning with R\"\n $ author   : chr \"Brett Lantz\"\n $ publisher:List of 2\n ..$ name: chr \"Packt Publishing\"\n ..$ url : chr \"https://www.packtpub.com\"\n $ topics   : chr [1:3] \"R\" \"machine learning\" \"data mining\"\n $ MSRP     : num 55\n\n```", "```py\n0 1\n0 2\n0 3\n```", "```py\n> library(igraph)\n> karate <- read.graph(\"karate.txt\", \"edgelist\", directed = FALSE)\n\n```", "```py\n> plot(karate)\n\n```", "```py\n> degree(karate)\n [1] 16  9 10  6  3  4  4  4  5  2  3  1  2  5  2  2  2  2\n[19]  2  3  2  2  2  5  3  3  2  4  3  4  4  6 12 17\n\n```", "```py\n> betweenness(karate)\n [1] 231.0714286  28.4785714  75.8507937   6.2880952\n [5]   0.3333333  15.8333333  15.8333333   0.0000000\n [9]  29.5293651   0.4476190   0.3333333   0.0000000\n[13]   0.0000000  24.2158730   0.0000000   0.0000000\n[17]   0.0000000   0.0000000   0.0000000  17.1468254\n[21]   0.0000000   0.0000000   0.0000000   9.3000000\n[25]   1.1666667   2.0277778   0.0000000  11.7920635\n[29]   0.9476190   1.5428571   7.6095238  73.0095238\n[33]  76.6904762 160.5515873\n\n```", "```py\n> library(dplyr)\n> credit <- read.csv(\"credit.csv\")\n> credit_tbl <- as.tbl(credit)\n\n```", "```py\n> credit_tbl\n\n```", "```py\n> credit_db_conn <- src_sqlite(\"credit.sqlite3\", create = TRUE)\n\n```", "```py\n> copy_to(credit_db_conn, credit_tbl, temporary = FALSE)\n\n```", "```py\n> credit_db_conn <- src_sqlite(\"credit.sqlite3\")\n> credit_tbl <- tbl(credit_db_conn, \"credit_tbl\")\n\n```", "```py\n> library(data.table)\n> credit <- fread(\"credit.csv\")\n\n```", "```py\n> credit[credit_history == \"good\", mean(amount)]\n[1] 3040.958\n\n```", "```py\n> library(ff)\n> credit <- read.csv.ffdf(file = \"credit.csv\", header = TRUE)\n\n```", "```py\n> mean(credit$amount)\n[1] NA\nWarning message:\nIn mean.default(credit$amount) :\n argument is not numeric or logical: returning NA\n\n```", "```py\n> library(ffbase)\n> mean(credit$amount)\n[1] 3271.258\n\n```", "```py\n> system.time(rnorm(1000000))\n user  system elapsed \n 0.092   0.000   0.093\n\n```", "```py\n> library(parallel)\n> detectCores()\n[1] 8\n\n```", "```py\n> system.time(l1 <- rnorm(1000000))\n user  system elapsed \n 0.094   0.003   0.097\n\n> system.time(l2 <- unlist(mclapply(1:2, function(x) {\n rnorm(500000)}, mc.cores = 2)))\n user  system elapsed \n 0.106   0.045   0.076\n\n> system.time(l4 <- unlist(mclapply(1:4, function(x) {\n rnorm(250000) }, mc.cores = 4)))\n user  system elapsed \n 0.135   0.055   0.063\n\n> system.time(l8 <- unlist(mclapply(1:8, function(x) {\n rnorm(125000) }, mc.cores = 8)))\n user  system elapsed \n 0.123   0.058   0.055 \n\n```", "```py\n> library(snow)\n> cl1 <- makeCluster(4)\n\n```", "```py\n> clusterCall(cl1, function() { Sys.info()[\"nodename\"] } )\n[[1]]\n nodename \n\"Bretts-Macbook-Pro.local\" \n\n[[2]]\n nodename \n\"Bretts-Macbook-Pro.local\" \n\n[[3]]\n nodename \n\"Bretts-Macbook-Pro.local\" \n\n[[4]]\n nodename \n\"Bretts-Macbook-Pro.local\"\n\n```", "```py\n> clusterApply(cl1, c('A', 'B', 'C', 'D'),\n function(x) { paste(\"Cluster\", x, \"ready!\") })\n[[1]]\n[1] \"Cluster A ready!\"\n\n[[2]]\n[1] \"Cluster B ready!\"\n\n[[3]]\n[1] \"Cluster C ready!\"\n\n[[4]]\n[1] \"Cluster D ready!\"\n\n```", "```py\n> stopCluster(cl1)\n\n```", "```py\n> system.time(l1 <- rnorm(1000000))\n user  system elapsed \n 0.096   0.000   0.096 \n\n```", "```py\n> library(foreach)\n> system.time(l4 <- foreach(i = 1:4, .combine = 'c')\n %do% rnorm(250000))\n user  system elapsed \n 0.106   0.003   0.109 \n\n```", "```py\n> library(doParallel)\n> registerDoParallel(cores = 4)\n> system.time(l4p <- foreach(i = 1:4, .combine = 'c')\n %dopar% rnorm(250000))\n user  system elapsed \n 0.062   0.030   0.054\n\n```", "```py\n> stopImplicitCluster()\n\n```", "```py\n> library(caret)\n> credit <- read.csv(\"credit.csv\")\n> system.time(train(default ~ ., data = credit, method = \"rf\"))\n user  system elapsed \n107.862   0.990 108.873\n\n```", "```py\n> library(doParallel)\n> registerDoParallel(cores = 4)\n> system.time(train(default ~ ., data = credit, method = \"rf\"))\n user  system elapsed \n114.578   2.037  31.362\n\n```"]