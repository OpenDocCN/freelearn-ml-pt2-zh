["```py\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn import linear_model\n\n#Reading in the fraud detection dataset \n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Creating the features \n\nfeatures = df.drop('isFraud', axis = 1).values\ntarget = df['isFraud'].values\n\n#Splitting the data into training and test sets \n\nX_train, X_test, y_train, y_test = train_test_split(features, target, test_size = 0.3, random_state = 42, stratify = target)\n\n# Building the K-NN Classifier \n\nknn_classifier = KNeighborsClassifier(n_neighbors=3)\n\nknn_classifier.fit(X_train, y_train)\n\n#Initializing an logistic regression object\n\nlogistic_regression = linear_model.LogisticRegression()\n\n#Fitting the model to the training and test sets\n\nlogistic_regression.fit(X_train, y_train)\n```", "```py\npip3 install scikit-plot\n```", "```py\nconda install -c conda-forge scikit-plot\n```", "```py\nfrom sklearn.metrics import confusion_matrix\n\n#Creating predictions on the test set \n\nprediction = knn_classifier.predict(X_test)\n\n#Creating the confusion matrix \n\nprint(confusion_matrix(y_test, prediction))\n```", "```py\nfrom sklearn.metrics import classification_report\n\n#Creating the classification report \n\nprint(classification_report(y_test, prediction))\n```", "```py\nimport matplotlib.pyplot as plt\nimport scikitplot as skplt\n\n#Normalized confusion matrix for the K-NN model\n\nprediction_labels = knn_classifier.predict(X_test)\nskplt.metrics.plot_confusion_matrix(y_test, prediction_labels, normalize=True)\nplt.show()\n```", "```py\n#Normalized confusion matrix for the logistic regression model\n\nprediction_labels = logistic_regression.predict(X_test)\nskplt.metrics.plot_confusion_matrix(y_test, prediction_labels, normalize=True)\nplt.show()\n```", "```py\nfrom sklearn.metrics import roc_curve\nfrom sklearn.metrics import roc_auc_score\nimport matplotlib.pyplot as plt\n\n#Probabilities for each prediction output \n\ntarget_prob = knn_classifier.predict_proba(X_test)[:,1]\n\n#Plotting the ROC curve \n\nfpr, tpr, thresholds = roc_curve(y_test, target_prob)\n\nplt.plot([0,1], [0,1], 'k--')\n\nplt.plot(fpr, tpr)\n\nplt.xlabel('False Positive Rate')\n\nplt.ylabel('True Positive Rate')\n\nplt.title('ROC Curve')\n\nplt.show()\n```", "```py\n#Computing the auc score \n\nroc_auc_score(y_test, target_prob)\n```", "```py\nimport scikitplot as skplt\n\ntarget_prob = knn_classifier.predict_proba(X_test)\nskplt.metrics.plot_cumulative_gain(y_test, target_prob)\nplt.show()\n```", "```py\n#Cumulative gains plot for the logistic regression model\n\ntarget_prob = logistic_regression.predict_proba(X_test)\nskplt.metrics.plot_cumulative_gain(y_test, target_prob)\nplt.show()\n```", "```py\n# Lift curve for the K-NN model\n\ntarget_prob = knn_classifier.predict_proba(X_test)\nskplt.metrics.plot_lift_curve(y_test, target_prob)\nplt.show()\n```", "```py\n#Cumulative gains plot for the logistic regression model\n\ntarget_prob = logistic_regression.predict_proba(X_test)\nskplt.metrics.plot_lift_curve(y_test, target_prob)\nplt.show()\n```", "```py\n#KS plot for the K-NN model\n\ntarget_proba = knn_classifier.predict_proba(X_test)\nskplt.metrics.plot_ks_statistic(y_test, target_proba)\nplt.show()\n```", "```py\n#KS plot for the logistic regression model\n\ntarget_proba = logistic_regression.predict_proba(X_test)\nskplt.metrics.plot_ks_statistic(y_test, target_proba)\nplt.show()\n```", "```py\n#Extracting the probabilites that the positive class will be predicted\n\nknn_proba = knn_classifier.predict_proba(X_test)\nlog_proba = logistic_regression.predict_proba(X_test)\n\n#Storing probabilities in a list\n\nprobas = [knn_proba, log_proba]\n\n# Storing the model names in a list \n\nmodel_names = [\"k_nn\", \"Logistic Regression\"]\n\n#Creating the calibration plot\n\nskplt.metrics.plot_calibration_curve(y_test, probas, model_names)\n\nplt.show()\n```", "```py\nskplt.estimators.plot_learning_curve(knn_classifier, features, target)\n\nplt.show()\n```", "```py\nfrom sklearn import model_selection\n\n#List of models\n\nmodels = [('k-NN', knn_classifier), ('LR', logistic_regression)]\n\n#Initializing empty lists in order to store the results\ncv_scores = []\nmodel_name_list = []\n\nfor name, model in models:\n\n    #5-fold cross validation\n    cv_5 = model_selection.KFold(n_splits= 5, random_state= 50)\n    # Evaluating the accuracy scores\n    cv_score = model_selection.cross_val_score(model, X_test, y_test, cv = cv_5, scoring= 'accuracy')\n    cv_scores.append(cv_score)\n    model_name_list.append(name)\n\n# Plotting the cross-validated box plot \n\nfig = plt.figure()\nfig.suptitle('Boxplot of 5-fold cross validated scores for all the models')\nax = fig.add_subplot(111)\nplt.boxplot(cv_scores)\nax.set_xticklabels(model_name_list)\nplt.show()\n```", "```py\n## Building a simple linear regression model\n\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Define the feature and target arrays\n\nfeature = df['oldbalanceOrg'].values\ntarget = df['amount'].values\n\n#Initializing a linear regression model \n\nlinear_reg = linear_model.LinearRegression()\n\n#Reshaping the array since we only have a single feature\n\nfeature = feature.reshape(-1, 1)\ntarget = target.reshape(-1, 1)\n\n#Fitting the model on the data\n\nlinear_reg.fit(feature, target)\n\npredictions = linear_reg.predict(feature)\n```", "```py\nfrom sklearn import metrics\n\nmetrics.mean_absolute_error(target, predictions)\n```", "```py\nmetrics.mean_squared_error(target, predictions)\n```", "```py\nimport numpy as np\n\nnp.sqrt(metrics.mean_squared_error(target, predictions))\n```", "```py\n#Reading in the dataset\n\ndf = pd.read_csv('fraud_prediction.csv')\n\n#Dropping the target feature & the index\n\ndf = df.drop(['Unnamed: 0', 'isFraud'], axis = 1)\n\n#Initializing K-means with 2 clusters\n\nk_means = KMeans(n_clusters = 2)\n\n```", "```py\nskplt.cluster.plot_elbow_curve(k_means, df, cluster_ranges=range(1, 20))\nplt.show()\n```"]