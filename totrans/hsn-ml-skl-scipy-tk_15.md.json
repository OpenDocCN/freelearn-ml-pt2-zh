["```py\nfrom sklearn.datasets import make_classification\n\nx, y = make_classification(\n    n_samples=1000, n_features=2, n_informative=2, n_redundant=0, n_repeated=0, \n    n_classes=2, n_clusters_per_class=2, weights=[0.98, ], class_sep=0.5, \n    scale=1.0, shuffle=True, flip_y=0, random_state=0\n)\n```", "```py\nhourly_traffic = [\n    120, 123, 124, 119, 196, \n    121, 118, 117, 500, 132\n]\n```", "```py\npd.Series(hourly_traffic) > pd.Series(hourly_traffic).quantile(0.95)\n```", "```py\nclass PercentileDetection:\n\n    def __init__(self, percentile=0.9):\n        self.percentile = percentile\n\n    def fit(self, x, y=None):\n        self.threshold = pd.Series(x).quantile(self.percentile)\n\n    def predict(self, x, y=None):\n        return (pd.Series(x) > self.threshold).values\n\n    def fit_predict(self, x, y=None):\n        self.fit(x)\n        return self.predict(x) \n```", "```py\noutlierd = PercentileDetection(percentile=0.95)\npd.DataFrame(\n    {\n        'hourly_traffic': hourly_traffic,\n        'is_outlier': outlierd.fit_predict(hourly_traffic)\n    }\n).style.apply(\n    lambda row: ['font-weight: bold'] * len(row) \n        if row['is_outlier'] == True \n        else ['font-weight: normal'] * len(row),\n    axis=1\n)\n```", "```py\noutlierd = PercentileDetection(percentile=0.98)\ny_pred = outlierd.fit_predict(x[:,0])\n```", "```py\noutlierd = PercentileDetection(percentile=0.98)\ny_pred = outlierd.fit_predict(x[:,1])\n```", "```py\nclass PercentileDetection:\n\n    def __init__(self, percentile=0.9):\n        self.percentile = percentile\n\n    def fit(self, x, y=None):\n        self.thresholds = [\n            pd.Series(x[:,i]).quantile(self.percentile)\n            for i in range(x.shape[1])\n        ]\n\n    def predict(self, x, y=None):\n        return (x > self.thresholds).max(axis=1)\n\n    def fit_predict(self, x, y=None):\n        self.fit(x)\n        return self.predict(x)\n```", "```py\noutlierd = PercentileDetection(percentile=0.98)\ny_pred = outlierd.fit_predict(x) \n```", "```py\nfrom sklearn.metrics import precision_score, recall_score\n\nprint(\n    'Precision: {:.02%}, Recall: {:.02%} [Percentile Detection]'.format(\n        precision_score(y, y_pred, pos_label=1),\n        recall_score(y, y_pred, pos_label=1),\n    )\n)\n```", "```py\nfrom sklearn.covariance import EllipticEnvelope\n\nee = EllipticEnvelope(random_state=0)\ny_pred = ee.fit_predict(x) == -1\n```", "```py\nfrom sklearn.metrics import precision_score, recall_score\n\nprint(\n    'Precision: {:.02%}, Recall: {:.02%} [EllipticEnvelope]'.format(\n        precision_score(y, y_pred, pos_label=1),\n recall_score(y, y_pred, pos_label=1),\n    )\n)\n```", "```py\nfrom sklearn.neighbors import LocalOutlierFactor\n\nlof = LocalOutlierFactor(n_neighbors=50)\ny_pred = lof.fit_predict(x) == -1\n```", "```py\nfrom sklearn.metrics import precision_score, recall_score\n\nlof = LocalOutlierFactor(n_neighbors=50)\nlof.fit(x)\n\nfor quantile in [0.01, 0.02, 0.1]:\n\n    y_pred = lof.negative_outlier_factor_ < np.quantile(\n        lof.negative_outlier_factor_, quantile\n    ) \n\n    print(\n        'LOF: Precision: {:.02%}, Recall: {:.02%} [Quantile={:.0%}]'.format(\n            precision_score(y, y_pred, pos_label=1),\n            recall_score(y, y_pred, pos_label=1),\n            quantile\n        )\n    )\n```", "```py\n# LOF: Precision: 80.00%, Recall: 40.00% [Quantile=1%]\n# LOF: Precision: 50.00%, Recall: 50.00% [Quantile=2%]\n# LOF: Precision: 14.00%, Recall: 70.00% [Quantile=10%]\n```", "```py\nfrom sklearn.neighbors import LocalOutlierFactor\n\nx_inliers = x[y==0]\n\nlof = LocalOutlierFactor(n_neighbors=50, novelty=True)\nlof.fit(x_inliers)\ny_pred = lof.predict(x) == -1\n```", "```py\nfrom sklearn.ensemble import IsolationForest\n\niforest = IsolationForest(n_estimators=200, n_jobs=-1, random_state=10)\ny_pred = iforest.fit_predict(x) == -1\n```"]