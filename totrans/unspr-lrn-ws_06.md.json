["```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    def sigmoid(z):\n        return np.exp(z) / (np.exp(z) + 1)\n    ```", "```py\n    theta = 1\n    x = np.linspace(-5, 5, 100)\n    x\n    ```", "```py\n    y = sigmoid(x * theta)\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    ax.plot(x, y)\n    ax.set_xlabel('$x$', fontsize=22)\n    ax.set_ylabel('$h(x\\Theta)$', fontsize=22)\n    ax.spines['left'].set_position(('data', 0))\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.tick_params(axis='both', which='major', labelsize=22)\n    plt.show()\n    ```", "```py\n    theta = 5\n    y_2 = sigmoid(x * theta)\n    ```", "```py\n    theta = 0.2\n    y_3 = sigmoid(x * theta)\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    ax.plot(x, y, label='$\\Theta=1$')\n    ax.plot(x, y_2, label='$\\Theta=5$', linestyle=':')\n    ax.plot(x, y_3, label='$\\Theta=0.2$', linestyle='--')\n    ax.set_xlabel('$x\\Theta$', fontsize=22)\n    ax.set_ylabel('$h(x\\Theta)$', fontsize=22)\n    ax.spines['left'].set_position(('data', 0))\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.tick_params(axis='both', which='major', labelsize=22)\n    ax.legend(fontsize=22)\n    plt.show()\n    ```", "```py\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    def relu(x):\n        return np.max((0, x))\n    ```", "```py\n    theta = 1\n    x = np.linspace(-5, 5, 100)\n    x\n    ```", "```py\n    y = [relu(_x * theta) for _x in x]\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    ax.plot(x, y)\n    ax.set_xlabel('$x$', fontsize=22)\n    ax.set_ylabel('$h(x\\Theta)$', fontsize=22)\n    ax.spines['left'].set_position(('data', 0))\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.tick_params(axis='both', which='major', labelsize=22)\n    plt.show()\n    ```", "```py\n    theta = 5\n    y_2 = [relu(_x * theta) for _x in x]\n    ```", "```py\n    theta = 0.2\n    y_3 = [relu(_x * theta) for _x in x]\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111)\n    ax.plot(x, y, label='$\\Theta=1$')\n    ax.plot(x, y_2, label='$\\Theta=5$', linestyle=':')\n    ax.plot(x, y_3, label='$\\Theta=0.2$', linestyle='--')\n    ax.set_xlabel('$x\\Theta$', fontsize=22)\n    ax.set_ylabel('$h(x\\Theta)$', fontsize=22)\n    ax.spines['left'].set_position(('data', 0))\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.tick_params(axis='both', which='major', labelsize=22)\n    ax.legend(fontsize=22)\n    plt.show()\n    ```", "```py\n    !conda install tensorflow keras\n    ```", "```py\n    !pip install tensorflow keras\n    ```", "```py\n    from keras.models import Sequential\n    from keras.layers import Dense\n    ```", "```py\n    model = Sequential\\\n            ([Dense(500, input_shape=(1024,), activation='relu'),\\\n              Dense(10, activation='softmax')])\n    ```", "```py\n    model.summary()\n    ```", "```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from keras.models import Sequential\n    from keras.layers import Dense\n    import tensorflow.python.util.deprecation as deprecation\n    deprecation._PRINT_DEPRECATION_WARNINGS = False\n    ```", "```py\n    with open('data_batch_1', 'rb') as f:\n        batch_1 = pickle.load(f, encoding='bytes')\n    ```", "```py\n    batch_1.keys()\n    ```", "```py\n    dict_keys([b'batch_label', b'labels', b'data', b'filenames'])\n    ```", "```py\n    labels = batch_1[b'labels']\n    labels\n    ```", "```py\n    batch_1[b'data']\n    ```", "```py\n    batch_1[b'data'].shape\n    ```", "```py\n    (10000, 3072)\n    ```", "```py\n    images = np.zeros((10000, 32, 32, 3), dtype='uint8')\n    \"\"\"\n    Breaking the 3,072 samples of each single image into thirds, \n    which correspond to Red, Green, Blue channels\n    \"\"\"\n    for idx, img in enumerate(dat[b'data']):\n        images[idx, :, :, 0] = img[:1024].reshape((32, 32)) # Red\n        images[idx, :, :, 1] = img[1024:2048]\\\n                               .reshape((32, 32)) # Green\n        images[idx, :, :, 2] = img[2048:].reshape((32, 32)) # Blue\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    for i in range(12):\n        plt.subplot(3, 4, i + 1)\n        plt.imshow(images[i])\n        plt.title(labels[i])\n        plt.axis('off')\n    ```", "```py\n    with open('batches.meta', 'rb') as f:\n        label_strings = pickle.load(f, encoding='bytes')\n    label_strings\n    ```", "```py\n    actual_labels = [label.decode() for label in \\\n                     label_strings[b'label_names']]\n    actual_labels\n    ```", "```py\n    for lab in labels[:12]:\n        print(actual_labels[lab], end=', ')\n    ```", "```py\n    frog, truck, truck, deer, automobile, automobile, \n    bird, horse, ship, cat, deer, horse, \n    ```", "```py\n    one_hot_labels = np.zeros((images.shape[0], 10))\n    for idx, lab in enumerate(labels):\n        one_hot_labels[idx, lab] = 1\n    ```", "```py\n    one_hot_labels[:12]\n    ```", "```py\n    images = images.mean(axis=-1)\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    for i in range(12):\n        plt.subplot(3, 4, i + 1)\n        plt.imshow(images[i], cmap='gray')\n        plt.title(labels[i])\n        plt.axis('off')\n    ```", "```py\n    images /= 255.\n    ```", "```py\n    images = images.reshape((-1, 32 ** 2))\n    x_train = images[:7000]\n    y_train = one_hot_labels[:7000]\n    x_test = images[7000:]\n    y_test = one_hot_labels[7000:]\n    ```", "```py\n    model = Sequential\\\n            ([Dense(500, input_shape=(1024,), activation='relu'),\\\n              Dense(10, activation='softmax')])\n    ```", "```py\n    model.compile(loss='categorical_crossentropy',\\\n                  optimizer='adam',\\\n                  metrics=['accuracy'])\n    ```", "```py\n    model.fit(x_train, y_train, epochs=100, \\\n              validation_data=(x_test, y_test), \\\n              shuffle = False)\n    ```", "```py\n    predictions = model.predict(images[:12])\n    predictions\n    ```", "```py\n    np.argmax(predictions, axis=1)\n    ```", "```py\n    array([6, 9, 9, 4, 1, 1, 2, 7, 8, 3, 4, 7], dtype=int64)\n    ```", "```py\n    labels[:12]\n    ```", "```py\n    [6, 9, 9, 4, 1, 1, 2, 7, 8, 3, 4, 7]\n    ```", "```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from keras.models import Model\n    from keras.layers import Input, Dense\n    import tensorflow.python.util.deprecation as deprecation\n    deprecation._PRINT_DEPRECATION_WARNINGS = False\n    ```", "```py\n    with open('data_batch_1', 'rb') as f:\n        batch_1 = pickle.load(f, encoding='bytes')\n    ```", "```py\n    images = np.zeros((10000, 32, 32, 3), dtype='uint8')\n    for idx, img in enumerate(batch_1[b'data']):\n        images[idx, :, :, 0] = img[:1024].reshape((32, 32)) # Red\n        images[idx, :, :, 1] = img[1024:2048]\\\n                               .reshape((32, 32)) # Green\n        images[idx, :, :, 2] = img[2048:].reshape((32, 32)) # Blue\n    ```", "```py\n    images = images.mean(axis=-1)\n    images = images / 255.0\n    images = images.reshape((-1, 32 ** 2))\n    images\n    ```", "```py\n    input_layer = Input(shape=(1024,))\n    ```", "```py\n    encoding_stage = Dense(256, activation='relu')(input_layer)\n    ```", "```py\n    decoding_stage = Dense(1024, activation='sigmoid')\\\n                          (encoding_stage)\n    ```", "```py\n    autoencoder = Model(input_layer, decoding_stage)\n    ```", "```py\n    autoencoder.compile(loss='binary_crossentropy',\\\n                        optimizer='adadelta')\n    ```", "```py\n    autoencoder.fit(images, images, epochs=100)\n    ```", "```py\n    encoder_output = Model(input_layer, encoding_stage)\\\n                    .predict(images[:5])\n    ```", "```py\n    encoder_output = encoder_output.reshape((-1, 16, 16)) * 255\n    ```", "```py\n    decoder_output = autoencoder.predict(images[:5])\n    ```", "```py\n    decoder_output = decoder_output.reshape((-1, 32,32)) * 255\n    ```", "```py\n    images = images.reshape((-1, 32, 32))\n    plt.figure(figsize=(10, 7))\n    for i in range(5):\n        # Plot the original images  \n        plt.subplot(3, 5, i + 1)\n        plt.imshow(images[i], cmap='gray')\n        plt.axis('off')\n        # Plot the encoder output\n        plt.subplot(3, 5, i + 6)\n        plt.imshow(encoder_output[i], cmap='gray')\n        plt.axis('off')   \n        # Plot the decoder output\n        plt.subplot(3, 5, i + 11)\n        plt.imshow(decoder_output[i], cmap='gray')\n        plt.axis('off')\n    ```", "```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from keras.models import Model\n    from keras.layers import Input, Dense\n    import tensorflow.python.util.deprecation as deprecation\n    deprecation._PRINT_DEPRECATION_WARNINGS = False\n    ```", "```py\n    with open('data_batch_1', 'rb') as f:\n        dat = pickle.load(f, encoding='bytes')\n    ```", "```py\n    images = np.zeros((10000, 32, 32, 3), dtype='uint8')\n    for idx, img in enumerate(dat[b'data']):\n        images[idx, :, :, 0] = img[:1024].reshape((32, 32)) # Red\n        images[idx, :, :, 1] = img[1024:2048]\\\n                               .reshape((32, 32)) # Green\n        images[idx, :, :, 2] = img[2048:].reshape((32, 32)) # Blue\n    ```", "```py\n    images = images.mean(axis=-1)\n    images = images / 255.0\n    images = images.reshape((-1, 32 ** 2))\n    images\n    ```", "```py\n    input_layer = Input(shape=(1024,))\n    ```", "```py\n    hidden_encoding = Dense(512, activation='relu')(input_layer)\n    ```", "```py\n    encoding_stage = Dense(256, activation='relu')(hidden_encoding)\n    ```", "```py\n    hidden_decoding = Dense(512, activation='relu')(encoding_stage)\n    ```", "```py\n    decoding_stage = Dense(1024, activation='sigmoid')\\\n                          (hidden_decoding)\n    ```", "```py\n    autoencoder = Model(input_layer, decoding_stage)\n    ```", "```py\n    autoencoder.compile(loss='binary_crossentropy',\\\n                        optimizer='adadelta')\n    ```", "```py\n    autoencoder.fit(images, images, epochs=100)\n    ```", "```py\n    encoder_output = Model(input_stage, encoding_stage)\\\n                     .predict(images[:5])\n    ```", "```py\n    encoder_output = encoder_output.reshape((-1, 16, 16)) * 255\n    ```", "```py\n    decoder_output = autoencoder.predict(images[:5])\n    ```", "```py\n    decoder_output = decoder_output.reshape((-1, 32, 32)) * 255\n    ```", "```py\n    images = images.reshape((-1, 32, 32))\n    plt.figure(figsize=(10, 7))\n    for i in range(5):\n        # Plot original images\n        plt.subplot(3, 5, i + 1)\n        plt.imshow(images[i], cmap='gray')\n        plt.axis('off')\n        # Plot encoder output\n        plt.subplot(3, 5, i + 6)\n        plt.imshow(encoder_output[i], cmap='gray')\n        plt.axis('off')\n        # Plot decoder output \n        plt.subplot(3, 5, i + 11)\n        plt.imshow(decoder_output[i], cmap='gray')\n        plt.axis('off')\n    ```", "```py\n    import pickle\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from keras.models import Model\n    from keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D\n    import tensorflow.python.util.deprecation as deprecation\n    deprecation._PRINT_DEPRECATION_WARNINGS = False\n    ```", "```py\n    with open('data_batch_1', 'rb') as f:\n        batch_1 = pickle.load(f, encoding='bytes')\n    ```", "```py\n    images = np.zeros((10000, 32, 32, 3), dtype='uint8')\n    for idx, img in enumerate(batch_1[b'data']):\n        images[idx, :, :, 0] = img[:1024].reshape((32, 32)) # Red\n        images[idx, :, :, 1] = img[1024:2048]\\\n                               .reshape((32, 32)) # Green\n        images[idx, :, :, 2] = img[2048:].reshape((32, 32)) # Blue\n    ```", "```py\n    images = images / 255.\n    ```", "```py\n    input_layer = Input(shape=(32, 32, 3,))\n    ```", "```py\n    hidden_encoding = Conv2D\\\n                      (32, # Number of filters in the weight matrix\n                      (3, 3), # Shape of the weight matrix\n                       activation='relu', padding='same', \\\n                       # Retaining dimensions between input and output \\\n                       )(input_layer)\n    ```", "```py\n    encoded = MaxPooling2D((2, 2))(hidden_encoding)\n    ```", "```py\n    hidden_decoding = \\\n    Conv2D(32, # Number of filters in the weight matrix \\\n           (3, 3), # Shape of the weight matrix \\\n           activation='relu', \\\n           # Retaining dimensions between input and output \\\n           padding='same', \\\n           )(encoded)\n    ```", "```py\n    upsample_decoding = UpSampling2D((2, 2))(hidden_decoding)\n    ```", "```py\n    decoded = \\\n    Conv2D(3, # Number of filters in the weight matrix \\\n           (3, 3), # Shape of the weight matrix \\\n           activation='sigmoid', \\\n           # Retaining dimensions between input and output \\\n           padding='same', \\\n           )(upsample_decoding)\n    ```", "```py\n    autoencoder = Model(input_layer, decoded)\n    ```", "```py\n    autoencoder.summary()\n    ```", "```py\n    autoencoder.compile(loss='binary_crossentropy',\\\n                        optimizer='adadelta')\n    ```", "```py\n    autoencoder.fit(images, images, epochs=20)\n    ```", "```py\n    encoder_output = Model(input_layer, encoded).predict(images[:5])\n    ```", "```py\n    encoder_output = encoder_output.reshape((-1, 256, 32))\n    ```", "```py\n    decoder_output = autoencoder.predict(images[:5])\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    for i in range(5):\n        # Plot original images\n        plt.subplot(3, 5, i + 1)\n        plt.imshow(images[i], cmap='gray')\n        plt.axis('off')\n        # Plot encoder output\n        plt.subplot(3, 5, i + 6)\n        plt.imshow(encoder_output[i], cmap='gray')\n        plt.axis('off')\n        # Plot decoder output\n        plt.subplot(3, 5, i + 11)\n        plt.imshow(decoder_output[i])\n        plt.axis('off')\n    ```"]