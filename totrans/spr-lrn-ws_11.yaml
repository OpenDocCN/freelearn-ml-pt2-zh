- en: 3\. Linear Regression
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.01: Plotting Data with a Moving Average'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Load the two required packages:'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the dataset into a pandas DataFrame from the CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  prefs: []
  type: TYPE_NORMAL
- en: df.head()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will show the initial five rows of the austin_weather.csv file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.61: The first five rows of the Austin weather data (note that additional
    columns to the right are not shown)'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-2E71SJK6.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.61: The first five rows of the Austin weather data (note that additional
    columns to the right are not shown)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we only need the Date and TempAvgF columns, we''ll remove all the other
    columns from the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  prefs: []
  type: TYPE_NORMAL
- en: df.head()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.62: Date and TempAvgF columns of the Austin weather data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-TIPMXHMW.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.62: Date and TempAvgF columns of the Austin weather data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, we are only interested in the first year''s data, so we need to
    extract that information only. Create a column in the DataFrame for the year value,
    extract the year value as an integer from the strings in the Date column, and
    assign these values to the Year column (note that temperatures are recorded daily).
    Repeat the process to create the Month and Day columns, and then extract the first
    year''s worth of data:'
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df = df.loc[df.index < 365]
  prefs: []
  type: TYPE_NORMAL
- en: print(df.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.63: New DataFrame with one year''s worth of data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-NKHKLFEF.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.63: New DataFrame with one year''s worth of data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute a 20-day moving average using the rolling() method:'
  prefs: []
  type: TYPE_NORMAL
- en: window = 20
  prefs: []
  type: TYPE_NORMAL
- en: rolling = df.TempAvgF.rolling(window).mean()
  prefs: []
  type: TYPE_NORMAL
- en: print(rolling.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(rolling.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.64: DataFrame with moving average data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-EXGYSL7Q.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.64: DataFrame with moving average data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot the raw data and the moving averages, with the x axis as the day number
    in the year:'
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize=(10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1]);
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df.index, df.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(rolling.index, rolling, c = 'r', \
  prefs: []
  type: TYPE_NORMAL
- en: linestyle = '--', label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df.index.min(), df.index.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.65: Temperature data with the 20-day moving average overlaid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-8UW6PKOO.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.65: Temperature data with the 20-day moving average overlaid'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to https://packt.live/2Nl5m85.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at https://packt.live/3epJvs6\. You must
    execute the entire Notebook in order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.02: Linear Regression Using the Least Squares Method'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Import the required packages and classes:'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.linear_model import LinearRegression
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the data from the CSV (austin_weather.csv) and inspect the data (using
    the head() and tail() methods):'
  prefs: []
  type: TYPE_NORMAL
- en: load data and inspect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  prefs: []
  type: TYPE_NORMAL
- en: print(df.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for df.head() will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.66: Output for df.head()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-BFFQ5FTD.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.66: Output for df.head()'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for df.tail() will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.67: Output for df.tail()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-8HWYSH8L.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.67: Output for df.tail()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drop everything except the Date and TempAvgF columns:'
  prefs: []
  type: TYPE_NORMAL
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  prefs: []
  type: TYPE_NORMAL
- en: df.head()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.68: Two columns used for Activity 3.02'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-TBONUR9Z.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.68: Two columns used for Activity 3.02'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create new Year, Month, and Day columns and populate them by parsing the Date
    column:'
  prefs: []
  type: TYPE_NORMAL
- en: add some useful columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df.loc[:, 'Year'] = df.loc[:, 'Date']\
  prefs: []
  type: TYPE_NORMAL
- en: .str.slice(0, 4).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Month'] = df.loc[:, 'Date']\
  prefs: []
  type: TYPE_NORMAL
- en: .str.slice(5, 7).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Day'] = df.loc[:, 'Date']\
  prefs: []
  type: TYPE_NORMAL
- en: .str.slice(8, 10).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: print(df.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.69: Augmented data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-HRXD8ELZ.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.69: Augmented data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new column for a moving average and populate it with a 20-day moving
    average of the TempAvgF column:'
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: set a 20 day window then use that to smooth temperature in a new column
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: window = 20
  prefs: []
  type: TYPE_NORMAL
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  prefs: []
  type: TYPE_NORMAL
- en: print(df.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.70: Addition of the 20-day moving average'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-W20OBT4B.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.70: Addition of the 20-day moving average'
  prefs: []
  type: TYPE_NORMAL
- en: 'Slice one complete year of data to use in a model. Ensure the year doesn''t
    have missing data due to the moving average. Also create a column for Day_of_Year
    (it should start at 1):'
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: now let's slice exactly one year on the
  prefs: []
  type: TYPE_NORMAL
- en: calendar start and end dates
  prefs: []
  type: TYPE_NORMAL
- en: we see from the previous output that
  prefs: []
  type: TYPE_NORMAL
- en: 2014 is the first year with complete data,
  prefs: []
  type: TYPE_NORMAL
- en: however it will still have NaN values for
  prefs: []
  type: TYPE_NORMAL
- en: the moving average, so we'll use 2015
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  prefs: []
  type: TYPE_NORMAL
- en: print(df_one_year.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df_one_year.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.71: One year''s worth of data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-3PS8EM65.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.71: One year''s worth of data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a scatterplot of the raw data (the original TempAvgF column) and overlay
    it with a line for the 20-day moving average:'
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize=(10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1]);
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  prefs: []
  type: TYPE_NORMAL
- en: c = 'r', linestyle = '--', \
  prefs: []
  type: TYPE_NORMAL
- en: label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.Day_of_Year.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.72: Raw data with the 20-day moving average overlaid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-7IRREJQI.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.72: Raw data with the 20-day moving average overlaid'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a linear regression model using the default parameters, that is, calculate
    a y intercept for the model and do not normalize the data. The day numbers for
    the year (1 to 365) constitute the input data and the average temperatures constitute
    the output data. Print the parameters of the model and the r2 value:'
  prefs: []
  type: TYPE_NORMAL
- en: fit a linear model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: linear_model = LinearRegression(fit_intercept = True)
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.fit(df_one_year['Day_of_Year']\
  prefs: []
  type: TYPE_NORMAL
- en: .values.reshape((-1, 1)), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.TempAvgF)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model slope: '', linear_model.coef_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model intercept: '', linear_model.intercept_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model r squared: '', \'
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.score(df_one_year['Day_of_Year']\
  prefs: []
  type: TYPE_NORMAL
- en: .values.reshape((-1, 1)), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.TempAvgF))
  prefs: []
  type: TYPE_NORMAL
- en: 'The results should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'model slope: [0.04304568]'
  prefs: []
  type: TYPE_NORMAL
- en: 'model intercept: 62.23496914044859'
  prefs: []
  type: TYPE_NORMAL
- en: 'model r squared: 0.09549593659736466'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the r2 value is very low, which is not surprising given that the data
    has a significant variation in the slope over time, and we are fitting a single
    linear model with a constant slope.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate predictions from the model using the same x data:'
  prefs: []
  type: TYPE_NORMAL
- en: make predictions using the training data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: y_pred = linear_model.predict(df_one_year['Day_of_Year']\
  prefs: []
  type: TYPE_NORMAL
- en: .values.reshape((-1, 1)))
  prefs: []
  type: TYPE_NORMAL
- en: x_pred = df_one_year.Day_of_Year
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new scatterplot, as before, adding an overlay of the predictions of
    the model:'
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize=(10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1]);
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  prefs: []
  type: TYPE_NORMAL
- en: c = 'r', linestyle = '--', \
  prefs: []
  type: TYPE_NORMAL
- en: label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: linear model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'linear model')
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.Day_of_Year.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.73: Raw data, 20-day moving average, and linear fit'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-S2PMM96W.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.73: Raw data, 20-day moving average, and linear fit'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to https://packt.live/2CwEKyT.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at https://packt.live/3hKJSzD. You must
    execute the entire Notebook in order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.03: Dummy Variables'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Import the required packages and classes:'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.linear_model import LinearRegression
  prefs: []
  type: TYPE_NORMAL
- en: 'Load and inspect the data:'
  prefs: []
  type: TYPE_NORMAL
- en: load data and inspect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  prefs: []
  type: TYPE_NORMAL
- en: print(df.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for df.head() should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.74: Output for the df.head() function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-XIIHGZ3P.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.74: Output for the df.head() function'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output for df.tail() should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.75: Output for the df.tail() function'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-2UIYD0ID.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.75: Output for the df.tail() function'
  prefs: []
  type: TYPE_NORMAL
- en: 'Carry out the preprocessing as before. Drop all but the Date and TempAvgF columns.
    Add columns for Year, Month, and Day. Create a new column with a 20-day moving
    average. Slice out the first complete year (2015):'
  prefs: []
  type: TYPE_NORMAL
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  prefs: []
  type: TYPE_NORMAL
- en: add some useful columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: set a 20 day window then use that to smooth
  prefs: []
  type: TYPE_NORMAL
- en: temperature in a new column
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: window = 20
  prefs: []
  type: TYPE_NORMAL
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: now let's slice exactly one year on the
  prefs: []
  type: TYPE_NORMAL
- en: calendar start and end dates
  prefs: []
  type: TYPE_NORMAL
- en: we see from the previous output that
  prefs: []
  type: TYPE_NORMAL
- en: 2014 is the first year with complete data,
  prefs: []
  type: TYPE_NORMAL
- en: however it will still have NaN values for
  prefs: []
  type: TYPE_NORMAL
- en: the moving average, so we'll use 2015
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  prefs: []
  type: TYPE_NORMAL
- en: print(df_one_year.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df_one_year.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The data should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.76: Preprocessed data'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-XGAKT751.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.76: Preprocessed data'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visualize the results:'
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize=(10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1]);
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  prefs: []
  type: TYPE_NORMAL
- en: c = 'r', linestyle = '--', \
  prefs: []
  type: TYPE_NORMAL
- en: label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.Day_of_Year.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'The plot should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.77: Austin temperatures and moving average'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-3G0548EA.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.77: Austin temperatures and moving average'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that the temperature rises from January to around September, and
    then falls again. This is a clear seasonal cycle. As a first improvement, we can
    include the month in the model. As described in the introduction to dummy variables,
    if we just encoded the months as integers 1 to 12, the model might interpret that
    December (12) was more important than January (1). So, we encode the month as
    dummy variables to avoid this:'
  prefs: []
  type: TYPE_NORMAL
- en: use the month as a dummy variable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: dummy_vars = pd.get_dummies(df_one_year['Month'], drop_first = True)
  prefs: []
  type: TYPE_NORMAL
- en: dummy_vars.columns = ['Feb', 'Mar', 'Apr', 'May', 'Jun', \
  prefs: []
  type: TYPE_NORMAL
- en: '''Jul'', ''Aug'', ''Sep'', ''Oct'', ''Nov'', ''Dec'']'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year = pd.concat([df_one_year, dummy_vars], \
  prefs: []
  type: TYPE_NORMAL
- en: axis = 1).drop('Month', axis = 1)
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year
  prefs: []
  type: TYPE_NORMAL
- en: 'The data should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.78: Data augmented with dummy variables for the month'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-XN7VJ280.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.78: Data augmented with dummy variables for the month'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, fit a linear model using Day_of_Year and the dummy variables, and print
    the model coefficients and the r2 value:'
  prefs: []
  type: TYPE_NORMAL
- en: fit model using the month dummy vars
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: linear_model = LinearRegression(fit_intercept = True)
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.fit(pd.concat([df_one_year.Day_of_Year, \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.loc[:, 'Feb':'Dec']], \
  prefs: []
  type: TYPE_NORMAL
- en: axis = 1),
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['TempAvgF'])
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model coefficients: '', linear_model.coef_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model intercept: '', linear_model.intercept_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model r squared: '', \'
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.score(pd.concat([df_one_year.Day_of_Year, \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.loc[:, 'Feb':'Dec']], \
  prefs: []
  type: TYPE_NORMAL
- en: axis = 1),
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['TempAvgF']))
  prefs: []
  type: TYPE_NORMAL
- en: 'The results should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'model coefficients: [ 0.03719346 1.57445204 9.35397321 19.16903518 22.02065629
    26.80023439'
  prefs: []
  type: TYPE_NORMAL
- en: 30.17121033 30.82466482 25.6117698 15.71715435 1.542969 -4.06777548]
  prefs: []
  type: TYPE_NORMAL
- en: 'model intercept: 48.34038858048261'
  prefs: []
  type: TYPE_NORMAL
- en: 'model r squared: 0.7834805472165678'
  prefs: []
  type: TYPE_NORMAL
- en: Note the signs on the coefficients—the first value associated with Day_of_Year,
    and then the values for January through December follow. The coefficients for
    January, February, March, November, and December are negative, while those for
    June through September are positive. This makes sense for the seasons in Texas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, make predictions using the single-year data, and visualize the results:'
  prefs: []
  type: TYPE_NORMAL
- en: make predictions using the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: y_pred = \
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.predict(pd.concat([df_one_year.Day_of_Year, \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.loc[:, 'Feb':'Dec']], \
  prefs: []
  type: TYPE_NORMAL
- en: axis = 1))
  prefs: []
  type: TYPE_NORMAL
- en: x_pred = df_one_year.Day_of_Year
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize=(10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1]);
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  prefs: []
  type: TYPE_NORMAL
- en: c = 'r', linestyle = '--', \
  prefs: []
  type: TYPE_NORMAL
- en: label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: regression predictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'linear model w/dummy vars')
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.Day_of_Year.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12, loc = 'upper left')
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.79: Linear regression results with month dummy variables'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-KI6KH1EE.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.79: Linear regression results with month dummy variables'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to https://packt.live/3enegOg.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at https://packt.live/2V4VgMM. You must
    execute the entire Notebook in order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.04: Feature Engineering with Linear Regression'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Load the required packages and classes:'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: import numpy as np
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.linear_model import LinearRegression
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the data and carry out preprocessing through to the point where Day_of_Year
    is added:'
  prefs: []
  type: TYPE_NORMAL
- en: load data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  prefs: []
  type: TYPE_NORMAL
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  prefs: []
  type: TYPE_NORMAL
- en: add some useful columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: set a 20 day window then use that to smooth
  prefs: []
  type: TYPE_NORMAL
- en: temperature in a new column
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: window = 20
  prefs: []
  type: TYPE_NORMAL
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: now let's slice exactly one year on the
  prefs: []
  type: TYPE_NORMAL
- en: calendar start and end dates
  prefs: []
  type: TYPE_NORMAL
- en: we see from the previous output that
  prefs: []
  type: TYPE_NORMAL
- en: 2014 is the first year with complete data,
  prefs: []
  type: TYPE_NORMAL
- en: however it will still have NaN values for
  prefs: []
  type: TYPE_NORMAL
- en: the moving average, so we'll use 2015
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, for the feature engineering, we construct the sine and cosine of Day_of_Year
    with a period of 365 days:'
  prefs: []
  type: TYPE_NORMAL
- en: add two columns for sine and cosine of the Day_of_Year
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df_one_year['sine_Day'] = np.sin(2 * np.pi \
  prefs: []
  type: TYPE_NORMAL
- en: '* df_one_year[''Day_of_Year''] / 365)'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['cosine_Day'] = np.cos(2 * np.pi \
  prefs: []
  type: TYPE_NORMAL
- en: '* df_one_year[''Day_of_Year''] / 365)'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year
  prefs: []
  type: TYPE_NORMAL
- en: 'The data should appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.80: Austin weather data with the new features, sine_Day and cosine_Day'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-N39ZI5CT.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.80: Austin weather data with the new features, sine_Day and cosine_Day'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now fit the model using the LinearRegression class from scikit-learn,
    and print the coefficients and the r2 score:'
  prefs: []
  type: TYPE_NORMAL
- en: fit model using the Day_of_Year and sin/cos
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: linear_model = LinearRegression(fit_intercept = True)
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.fit(df_one_year[['Day_of_Year', 'sine_Day', \
  prefs: []
  type: TYPE_NORMAL
- en: '''cosine_Day'']], \'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['TempAvgF'])
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model coefficients: '', linear_model.coef_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model intercept: '', linear_model.intercept_)'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(''model r squared: '', \'
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.score(df_one_year[['Day_of_Year', 'sine_Day', \
  prefs: []
  type: TYPE_NORMAL
- en: '''cosine_Day'']], \'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['TempAvgF']))
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'model coefficients: [ 1.46396364e-02 -5.57332499e+00 -1.67824174e+01]'
  prefs: []
  type: TYPE_NORMAL
- en: 'model intercept: 67.43327530313064'
  prefs: []
  type: TYPE_NORMAL
- en: 'model r squared: 0.779745650129063'
  prefs: []
  type: TYPE_NORMAL
- en: Note that the r2 value is about the same as we achieved with the dummy variables.
    However, let's look at the predictions and see whether this model might be more
    or less suitable than before.
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate predictions using the augmented data:'
  prefs: []
  type: TYPE_NORMAL
- en: make predictions using the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: y_pred = \
  prefs: []
  type: TYPE_NORMAL
- en: linear_model.predict(df_one_year[['Day_of_Year', 'sine_Day', \
  prefs: []
  type: TYPE_NORMAL
- en: '''cosine_Day'']])'
  prefs: []
  type: TYPE_NORMAL
- en: x_pred = df_one_year.Day_of_Year
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, visualize the results:'
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize=(10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1])
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  prefs: []
  type: TYPE_NORMAL
- en: c = 'r', linestyle = '--', \
  prefs: []
  type: TYPE_NORMAL
- en: label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: regression predictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(x_pred, y_pred, c = "blue", linestyle = '-.', \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'linear model w/sin-cos fit')
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.Day_of_Year.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12, loc = 'upper left')
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.81: Austin temperature data with moving average overlay and periodic
    feature fit overlay'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-G4DBEE5E.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.81: Austin temperature data with moving average overlay and periodic
    feature fit overlay'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to https://packt.live/3dvkmet.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at https://packt.live/3epnOIJ. You must
    execute the entire Notebook in order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3.05: Gradient Descent'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Import the modules and classes:'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: import numpy as np
  prefs: []
  type: TYPE_NORMAL
- en: import matplotlib.pyplot as plt
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.metrics import r2_score
  prefs: []
  type: TYPE_NORMAL
- en: from sklearn.linear_model import SGDRegressor
  prefs: []
  type: TYPE_NORMAL
- en: 'Load the data (austin_weather.csv) and preprocess it up to the point of creating
    the Day_of_Year column and slicing one full year (2015):'
  prefs: []
  type: TYPE_NORMAL
- en: load data and inspect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df = pd.read_csv('../Datasets/austin_weather.csv')
  prefs: []
  type: TYPE_NORMAL
- en: df = df.loc[:, ['Date', 'TempAvgF']]
  prefs: []
  type: TYPE_NORMAL
- en: add time-based columns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df.loc[:, 'Year'] = df.loc[:, 'Date'].str.slice(0, 4).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Month'] = df.loc[:, 'Date'].str.slice(5, 7).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[:, 'Day'] = df.loc[:, 'Date'].str.slice(8, 10).astype('int')
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: set a 20 day window then use that to smooth
  prefs: []
  type: TYPE_NORMAL
- en: temperature in a new column
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: window = 20
  prefs: []
  type: TYPE_NORMAL
- en: df['20_d_mov_avg'] = df.TempAvgF.rolling(window).mean()
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: now let's slice exactly one year on the
  prefs: []
  type: TYPE_NORMAL
- en: calendar start and end dates
  prefs: []
  type: TYPE_NORMAL
- en: we see from the previous output that
  prefs: []
  type: TYPE_NORMAL
- en: 2014 is the first year with complete data,
  prefs: []
  type: TYPE_NORMAL
- en: however it will still have NaN values for
  prefs: []
  type: TYPE_NORMAL
- en: the moving average, so we'll use 2015
  prefs: []
  type: TYPE_NORMAL
- en: '"""'
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year = df.loc[df.Year == 2015, :].reset_index()
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year['Day_of_Year'] = df_one_year.index + 1
  prefs: []
  type: TYPE_NORMAL
- en: print(df_one_year.head())
  prefs: []
  type: TYPE_NORMAL
- en: print(df_one_year.tail())
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.82: Preprocessed data before scaling'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-WYG31OSL.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.82: Preprocessed data before scaling'
  prefs: []
  type: TYPE_NORMAL
- en: 'Scale the data for training:'
  prefs: []
  type: TYPE_NORMAL
- en: scale the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: X_min = df_one_year.Day_of_Year.min()
  prefs: []
  type: TYPE_NORMAL
- en: X_range = df_one_year.Day_of_Year.max() \
  prefs: []
  type: TYPE_NORMAL
- en: '- df_one_year.Day_of_Year.min()'
  prefs: []
  type: TYPE_NORMAL
- en: Y_min = df_one_year.TempAvgF.min()
  prefs: []
  type: TYPE_NORMAL
- en: Y_range = df_one_year.TempAvgF.max() \
  prefs: []
  type: TYPE_NORMAL
- en: '- df_one_year.TempAvgF.min()'
  prefs: []
  type: TYPE_NORMAL
- en: scale_X = (df_one_year.Day_of_Year - X_min) / X_range
  prefs: []
  type: TYPE_NORMAL
- en: train_X = scale_X.ravel()
  prefs: []
  type: TYPE_NORMAL
- en: train_Y = ((df_one_year.TempAvgF - Y_min) / Y_range).ravel()
  prefs: []
  type: TYPE_NORMAL
- en: 'Set random.seed, instantiate the model object with SGDRegressor, and fit the
    model to the training data:'
  prefs: []
  type: TYPE_NORMAL
- en: create the model object
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: np.random.seed(42)
  prefs: []
  type: TYPE_NORMAL
- en: model = SGDRegressor(loss = 'squared_loss', max_iter = 100, \
  prefs: []
  type: TYPE_NORMAL
- en: learning_rate = 'constant', eta0 = 0.0005, \
  prefs: []
  type: TYPE_NORMAL
- en: tol = 0.00009, penalty = 'none')
  prefs: []
  type: TYPE_NORMAL
- en: fit the model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: model.fit(train_X.reshape((-1, 1)), train_Y)
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.83: Model object using SGDRegressor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-837LOO8W.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.83: Model object using SGDRegressor'
  prefs: []
  type: TYPE_NORMAL
- en: 'Extract the model coefficients and rescale:'
  prefs: []
  type: TYPE_NORMAL
- en: Beta0 = (Y_min + Y_range * model.intercept_[0] \
  prefs: []
  type: TYPE_NORMAL
- en: '- Y_range * model.coef_[0] * X_min / X_range)'
  prefs: []
  type: TYPE_NORMAL
- en: Beta1 = Y_range * model.coef_[0] / X_range
  prefs: []
  type: TYPE_NORMAL
- en: print(Beta0)
  prefs: []
  type: TYPE_NORMAL
- en: print(Beta1)
  prefs: []
  type: TYPE_NORMAL
- en: 'The output should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '61.45512325422412'
  prefs: []
  type: TYPE_NORMAL
- en: '0.04533603293003107'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generate predictions using the scaled data, and then get the r2 value:'
  prefs: []
  type: TYPE_NORMAL
- en: generate predictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pred_X = df_one_year['Day_of_Year']
  prefs: []
  type: TYPE_NORMAL
- en: pred_Y = model.predict(train_X.reshape((-1, 1)))
  prefs: []
  type: TYPE_NORMAL
- en: calculate the r squared value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: r2 = r2_score(train_Y, pred_Y)
  prefs: []
  type: TYPE_NORMAL
- en: print('r squared = ', r2)
  prefs: []
  type: TYPE_NORMAL
- en: 'The result should be similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: r squared = 0.09462157379706759
  prefs: []
  type: TYPE_NORMAL
- en: 'Scale the predictions back to real values and then visualize the results:'
  prefs: []
  type: TYPE_NORMAL
- en: scale predictions back to real values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pred_Y = (pred_Y * Y_range) + Y_min
  prefs: []
  type: TYPE_NORMAL
- en: fig = plt.figure(figsize = (10, 7))
  prefs: []
  type: TYPE_NORMAL
- en: ax = fig.add_axes([1, 1, 1, 1])
  prefs: []
  type: TYPE_NORMAL
- en: Raw data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.scatter(df_one_year.Day_of_Year, df_one_year.TempAvgF, \
  prefs: []
  type: TYPE_NORMAL
- en: label = 'Raw Data', c = 'k')
  prefs: []
  type: TYPE_NORMAL
- en: Moving averages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(df_one_year.Day_of_Year, df_one_year['20_d_mov_avg'], \
  prefs: []
  type: TYPE_NORMAL
- en: c = 'r', linestyle = '--', \
  prefs: []
  type: TYPE_NORMAL
- en: label = f'{window} day moving average')
  prefs: []
  type: TYPE_NORMAL
- en: Regression predictions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.plot(pred_X, pred_Y, c = "blue", linestyle = '-.', \
  prefs: []
  type: TYPE_NORMAL
- en: linewidth = 4, label = 'linear fit (from SGD)')
  prefs: []
  type: TYPE_NORMAL
- en: put the model on the plot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ax.text(1, 85, 'Temp = ' + str(round(Beta0, 2)) + ' + ' \
  prefs: []
  type: TYPE_NORMAL
- en: + str(round(Beta1, 4)) + ' * Day', fontsize = 16)#
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_title('Air Temperature Measurements', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xlabel('Day', fontsize = 16)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_ylabel('Temperature ($^\circ$F)', fontsize = 14)
  prefs: []
  type: TYPE_NORMAL
- en: ax.set_xticks(range(df_one_year.Day_of_Year.min(), \
  prefs: []
  type: TYPE_NORMAL
- en: df_one_year.Day_of_Year.max(), 30))
  prefs: []
  type: TYPE_NORMAL
- en: ax.tick_params(labelsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: ax.legend(fontsize = 12)
  prefs: []
  type: TYPE_NORMAL
- en: plt.show()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.84: Results of linear regression using SGDRegressor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-9X6YLZSP.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.84: Results of linear regression using SGDRegressor'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to https://packt.live/2AY1bMZ.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at https://packt.live/2NgCI86\. You must
    execute the entire Notebook in order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
