["```py\nimport numpy as np \nimport pandas as pd \nimport xlrd \nimport matplotlib.pyplot as plt \n%matplotlib inline \n```", "```py\nwb = xlrd.open_workbook('SCOOP-Rating-Performance.xls') \n```", "```py\nws = wb.sheet_by_index(0)  \n```", "```py\nws.nrows \n```", "```py\nipo_list = [] \nfor i in range(36,ws.nrows): \n    if isinstance(ws.row(i)[0].value, float): \n        ipo_list.append([x.value for x in ws.row(i)]) \n    else: \n        print(i, ws.row(i)) \n```", "```py\nlen(ipo_list) \n```", "```py\ndf = pd.DataFrame(ipo_list) \n\ndf.head() \n```", "```py\ndf.columns = ['Date', 'Company', 'Ticker', 'Managers', \\ \n              'Offer Price', 'Opening Price', '1st Day Close',\\ \n              '1st Day % Chg', '$ Chg Open', '$ Chg Close',\\ \n              'Star Rating', 'Performed'] \n\ndf.head() \n```", "```py\ndef to_date(x): \n    return xlrd.xldate.xldate_as_datetime(x, wb.datemode) \ndf['Date'] = df['Date'].apply(to_date) \ndf \n```", "```py\ndf['Year'], df['Month'], df['Day'], df['Day of Week'] = \\ \ndf['Date'].dt.year, df['Date'].dt.month, df['Date'].dt.day, df['Date'].dt.weekday \ndf \n```", "```py\nby_year_cnt = df.groupby('Year')[['Ticker']].count() \n\nby_year_cnt \n```", "```py\ndf.drop(df[df['Offer Price'] < 5].index, inplace=True) \n\ndf.reset_index(drop=True, inplace=True) \n\ndf.dtypes \n```", "```py\ndf['1st Day % Chg'] = df['1st Day % Chg'].astype(float) \ndf.dtypes \n```", "```py\nfig, ax = plt.subplots(figsize=(16,8)) \nby_year_cnt.plot(kind='bar', ax=ax, color='crimson') \nax.legend(['Ticker Count']) \nax.set_title('IPO Count by Year', fontdict={'size': 18}, y=1.02); \n```", "```py\nsummary_by_year = df.groupby('Year')['1st Day % Chg'].describe() \n\nsummary_by_year \n```", "```py\nfig, ax = plt.subplots(figsize=(16,8)) \nsummary_by_year['mean'].plot(kind='bar', ax=ax) \nax.set_title('Mean First Day Percentage Change by Year', fontdict={'size': 18}, y=1.02); \n```", "```py\ndf['1st Day Open to Close % Chg'] = ((df['1st Day Close'] - df['Opening Price'])/df['Opening Price']) \n\ndf['1st Day Open to Close % Chg'].describe() \n```", "```py\nfig, ax = plt.subplots(figsize=(16,8)) \ndf.groupby('Year')['1st Day Open to Close % Chg'].mean().plot(kind='bar', ax=ax) \nax.set_title('Mean First Day Open to Close % Change by Year', fontdict={'size': 18}, y=1.02); \n```", "```py\ndf['1st Day Open to Close $ Chg'] = (df['1st Day Close'] - df['Opening Price']) \n\ndf[df['Year']==2018].sum() \n```", "```py\ndf[df['Year']==2018]['1st Day Open to Close $ Chg'].describe() \n```", "```py\nfig, ax = plt.subplots(figsize=(16,8)) \ndf[df['Year']==2018]['1st Day Open to Close % Chg'].plot(kind='hist', bins=25, ax=ax) \n```", "```py\ndf['Opening Gap % Chg'] = (df['Opening Price'] - df['Offer Price'])/df['Offer Price'] \n```", "```py\ndef get_mgr_count(x): \n    return len(x.split('/')) \n\ndf['Mgr Count'] = df['Managers'].apply(get_mgr_count) \n```", "```py\ndf.groupby('Mgr Count')['1st Day Open to Close % Chg'].mean().to_frame().style.bar(align='mid', color=['#d65f5f', '#5fba7d']) \n```", "```py\ndf['Lead Mgr'] = df['Managers'].apply(lambda x: x.split('/')[0])\n```", "```py\ndf['Lead Mgr'].unique() \n```", "```py\nfrom patsy import dmatrix \n```", "```py\ny = df['1st Day Open to Close % Chg'].apply(lambda x: 1 if x > .025 else 0) \n```", "```py\nX = dmatrix(\"Q('Opening Gap % Chg') + C(Q('Month'), Treatment) + C(Q('Day of Week'), Treatment)\\ \n+ Q('Mgr Count') + Q('Lead Mgr') + Q('Offer Price') + C(Q('Star Rating'), Treatment)\", df, return_type=\"dataframe\") \n```", "```py\nX \n```", "```py\nfrom sklearn.linear_model import LogisticRegression \n\nX_train = X[:-200] \ny_train = y[:-200] \n\nX_test = X[-200:] \ny_test = y[-200:] \n\nclf = LogisticRegression() \nclf.fit(X_train, y_train) \n```", "```py\ny_hat = clf.predict(X_test) \ny_true = y_test \n\npdf = pd.DataFrame({'y_true': y_true, 'y_hat': y_hat}) \n\npdf['correct'] = pdf.apply(lambda x: 1 if x['y_true'] == x['y_hat'] else 0, axis=1) \n\npdf \n```", "```py\npdf['y_true'].value_counts(normalize=True) \n```", "```py\npdf['correct'].value_counts(normalize=True) \n```", "```py\nresults = pd.merge(df[['1st Day Open to Close $ Chg']], pdf, left_index=True, right_index=True) \n\nresults \n```", "```py\nresults['1st Day Open to Close $ Chg'].sum() \n```", "```py\nresults['1st Day Open to Close $ Chg'].describe() \n```", "```py\n# ipo buys \nresults[results['y_hat']==1]['1st Day Open to Close $ Chg'].sum() \n```", "```py\n# ipo buys \nresults[results['y_hat']==1]['1st Day Open to Close $ Chg'].describe() \n```", "```py\nfv = pd.DataFrame(X_train.columns, clf.coef_.T).reset_index() \nfv.columns = ['Coef', 'Feature'] \nfv.sort_values('Coef', ascending=0).reset_index(drop=True) \n```", "```py\nfv[fv['Feature'].str.contains('Day')] \n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier \nclf_rf = RandomForestClassifier(n_estimators=1000) \nclf_rf.fit(X_train, y_train) \n\nf_importances = clf_rf.feature_importances_ \n\nf_names = X_train.columns \nf_std = np.std([tree.feature_importances_ for tree in clf_rf.estimators_], axis=0) \n\nzz = zip(f_importances, f_names, f_std) \nzzs = sorted(zz, key=lambda x: x[0], reverse=True) \n\nn_features = 10 \nimps = [x[0] for x in zzs[:n_features]] \nlabels = [x[1] for x in zzs[:n_features]] \nerrs = [x[2] for x in zzs[:n_features]] \n\nfig, ax = plt.subplots(figsize=(16, 8)) \nax.bar(range(n_features), imps, color=\"r\", yerr=errs) \nplt.xticks(range(n_features), labels) \nplt.setp( ax.xaxis.get_majorticklabels(), rotation=-70, ha=\"left\" ); \n```"]