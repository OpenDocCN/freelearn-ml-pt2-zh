["```py\n!pip install git+https://github.com/benman1/time-series \n```", "```py\nfrom time_series.dataset.utils import get_energy_demand\nfrom time_series.dataset.time_series import TrainingDataSet\ntrain_df = get_energy_demand()\ntds = TrainingDataSet(train_df) \n```", "```py\nfrom tensorflow.python.framework.ops import disable_eager_execution\nimport tensorflow as tf\ndisable_eager_execution()  # for graph mode\ntf.compat.v1.experimental.output_all_intermediates(True) \n```", "```py\nfrom time_series.utils import evaluate_model \n```", "```py\nN_EPOCHS = 100 \n```", "```py\nfrom time_series.models.deepar import DeepAR\nar_model = DeepAR(tds)\nar_model.instantiate_and_fit(verbose=1, epochs=N_EPOCHS) \n```", "```py\ny_predicted = ar_model.model.predict(tds.X_test)\nevaluate_model(tds=tds, y_predicted=y_predicted,\n    columns=train_df.columns, first_n=10) \n```", "```py\nMSE: 0.4338\n----------\nCT: 0.39\nMASS: 1.02\nME: 1.13\nNEMASSBOST: 1.48\nNH: 1.65\nRI: 1.48\nSEMASS: 1.65\nTOTAL: 1.45\nVT: 1.23\nWCMASS: 1.54 \n```", "```py\nfrom time_series.models.nbeats import NBeatsNet\nnb = NBeatsNet(tds)\nnb.instantiate_and_fit(verbose=1, epochs=N_EPOCHS)\ny_predicted = nb.model.predict(tds.X_test)\nevaluate_model(tds=tds, y_predicted=y_predicted,\n    columns=train_df.columns, first_n=10) \n```", "```py\nfrom time_series.models.LSTM import LSTM\nlstm = LSTM(tds)\nlstm.instantiate_and_fit(verbose=1, epochs=N_EPOCHS)\ny_predicted = lstm.model.predict(tds.X_test)\nevaluate_model(tds=tds, y_predicted=y_predicted,\n    columns=train_df.columns, first_n=10) \n```", "```py\ntrans = Transformer(tds)\ntrans.instantiate_and_fit(verbose=1, epochs=N_EPOCHS)\ny_predicted = trans.model.predict(tds.X_test)\nevaluate_model(tds=tds, y_predicted=y_predicted,\n    columns=train_df.columns, first_n=10) \n```", "```py\nfrom time_series.models.TCN import TCNModel\ntcn_model = TCNModel(tds)\ntcn_model.instantiate_and_fit(verbose=1, epochs=N_EPOCHS)\nprint(tcn_model.model.evaluate(tds.X_test, tds.y_test))\ny_predicted = tcn_model.model.predict(tds.X_test)\nevaluate_model(tds=tds, y_predicted=y_predicted, columns=train_df.columns, first_n=10 \n```", "```py\nfrom time_series.models.gaussian_process import GaussianProcess\ntds2d = TrainingDataSet(train_df.head(500), train_split=0.1, two_dim=True)\ngp = GaussianProcess(tds2d)\ngp.instantiate_and_fit(maxiter=N_EPOCHS)\ny_predicted = gp.predict(tds2d.X_test)[0].numpy().reshape(-1, tds.dimensions, tds.n_steps)\nevaluate_model(tds=tds, y_predicted=y_predicted,\n    columns=train_df.columns, first_n=10) \n```"]