["```py\nimport statsmodels.api as sm \n```", "```py\npip install statsmodels pandas_datareader \n```", "```py\nfrom datetime import datetime\nimport yfinance as yf\n\nstart_date = datetime(2005, 1, 1)\nend_date = datetime(2021, 1, 1)\ndf = yf.download(\n    'SPY',\n    start=start_date,\n    end = end_date\n) \n```", "```py\nimport matplotlib.pyplot as plt\nplt.title('Opening Prices between {} and {}'.format(\n    start_date.date().isoformat(),\n    end_date.date().isoformat()\n))\ndf['Open'].plot()\nplt.ylabel('Price')\nplt.xlabel('Date'); \n```", "```py\ndf1 = df.reset_index().resample('W', on=\"Date\")['Open'].mean()\ndf1 = df1[df1.index.week < 53] \n```", "```py\ndf1 = df1.asfreq('W').fillna(method='ffill') \n```", "```py\nimport statsmodels.api as sm\nfig, axs = plt.subplots(2)\nfig.tight_layout()\nsm.graphics.tsa.plot_pacf(df1, lags=20, ax=axs[0])\nsm.graphics.tsa.plot_acf(df1, lags=20, ax=axs[1]) \n```", "```py\nfrom statsmodels.tsa.seasonal import seasonal_decompose\nresult = seasonal_decompose(df, model='additive', period=52)\nresult.plot() \n```", "```py\nfrom arch.unitroot import KPSS, ADF\nADF(df1) \n```", "```py\nfrom pmdarima.arima.utils import ndiffs\n# ADF Test:\nndiffs(df1, test='adf') \n```", "```py\nmod = sm.tsa.arima.ARIMA(endog=df, order=(1, 0, 0))\nres = mod.fit()\nprint(res.summary()) \n```", "```py\nUserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n  warn('Non-stationary starting autoregressive parameters' \n```", "```py\nfrom statsmodels.tsa.forecasting.stl import STLForecast\nmod = STLForecast(\n  df1, sm.tsa.arima.ARIMA,\n  model_kwargs=dict(order=(1, 1, 0), trend=\"t\")\n)\nres = mod.fit().model_result\nprint(res.summary()) \n```", "```py\nSTEPS = 20\nforecasts_df = res.get_forecast(steps=STEPS).summary_frame() \n```", "```py\nax = df1.plot(figsize=(12, 6))\nplt.ylabel('SPY')\nforecasts_df['mean'].plot(style='k--')\nax.fill_between(\n    forecasts_df.index,\n    forecasts_df['mean_ci_lower'],\n    forecasts_df['mean_ci_upper'],\n    color='k',\n    alpha=0.1\n) \n```", "```py\nforecasts = []\nqs = []\nfor q in range(0, 30, 10):\n    mod = STLForecast(\n            df1, sm.tsa.arima.ARIMA, \n            model_kwargs=dict(order=(0, 1, q), trend=\"t\")\n        )\n    res = mod.fit()\n    print(f\"aic ({q}): {res.aic}\")\n    forecasts.append(\n            res.get_forecast(steps=STEPS).summary_frame()['mean']\n        )\n    qs.append(q)\nforecasts_df = pd.concat(forecasts, axis=1)\nforecasts_df.columns = qs \n```", "```py\naic (0): 3989.0104184919096\naic (10): 3934.375909262983\naic (20): 3935.3355340835 \n```", "```py\nax = df1.plot()\nplt.ylabel('SPY')\nforecasts_df.plot(ax=ax) \n```", "```py\nmod = sm.tsa.ExponentialSmoothing(\n        endog=df1, trend='add'\n    )\nres = mod.fit() \n```", "```py\nforecasts = pd.Series(res.forecast(steps=STEPS)) \n```", "```py\nax = df.plot(figsize=(12, 6))\nplt.ylabel('SPY')\nforecasts.plot(style='k--') \n```", "```py\nfrom statsmodels.tsa.forecasting.theta import ThetaModel\ntrain_length = int(len(df1) * 0.8)\ntm = ThetaModel(df1[:train_length], method=\"auto\",deseasonalize=True)\nres = tm.fit()\nforecasts = res.forecast(steps=len(df1)-train_length)\nax = df1.plot(figsize=(12, 6))\nplt.ylabel('SPY')\nforecasts.plot(style='k--') \n```", "```py\nfrom sklearn import metrics\nmetrics.mean_squared_error(forecasts, df1[train_length:], squared=False) \n```"]