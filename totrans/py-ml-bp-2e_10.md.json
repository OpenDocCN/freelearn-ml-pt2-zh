["```py\nfrom sklearn.metrics.pairwise import cosine_similarity \ncosine_similarity(np.array([4,0,5,3,5,0,0]).reshape(1,-1),\\ \n                  np.array([0,4,0,4,0,5,0]).reshape(1,-1)) \n```", "```py\ncosine_similarity(np.array([4,0,5,3,5,0,0]).reshape(1,-1),\\ \n                  np.array([2,0,2,0,1,0,0]).reshape(1,-1)) \n```", "```py\ncosine_similarity(np.array([-.25,0,.75,-1.25,.75,0,0])\\ \n                  .reshape(1,-1),\\ \n                  np.array([0,-.33,0,-.33,0,.66,0])\\ \n                  .reshape(1,-1)) \n```", "```py\ncosine_similarity(np.array([-.25,0,.75,-1.25,.75,0,0])\\ \n                  .reshape(1,-1),\\ \n                  np.array([.33,0,.33,0,-.66,0,0])\\ \n                  .reshape(1,-1)) \n```", "```py\nuser_x = [0,.33,0,-.66,0,33,0] \nuser_y = [0,0,0,-1,0,.5,.5] \n\ncosine_similarity(np.array(user_x).reshape(1,-1),\\ \n                  np.array(user_y).reshape(1,-1)) \n```", "```py\nuser_x = [0,.33,0,-.66,0,33,0] \nuser_z = [0,-.125,0,-.625,0,.375,.375] \n\ncosine_similarity(np.array(user_x).reshape(1,-1),\\ \n                  np.array(user_z).reshape(1,-1)) \n```", "```py\nimport pandas as pd \nimport numpy as np \nimport requests \nimport json \n```", "```py\nmyun = YOUR_GITHUB_HANDLE \nmypw = YOUR_PERSONAL_TOKEN \n```", "```py\nmy_starred_repos = [] \ndef get_starred_by_me(): \n    resp_list = [] \n    last_resp = '' \n    first_url_to_get = 'https://api.github.com/user/starred' \n    first_url_resp = requests.get(first_url_to_get, auth=(myun,mypw)) \n    last_resp = first_url_resp \n    resp_list.append(json.loads(first_url_resp.text)) \n\n    while last_resp.links.get('next'): \n        next_url_to_get = last_resp.links['next']['url'] \n        next_url_resp = requests.get(next_url_to_get, auth=(myun,mypw)) \n        last_resp = next_url_resp \n        resp_list.append(json.loads(next_url_resp.text)) \n\n    for i in resp_list: \n        for j in i: \n            msr = j['html_url'] \n            my_starred_repos.append(msr) \n```", "```py\nget_starred_by_me() \n```", "```py\nmy_starred_repos \n```", "```py\nmy_starred_users = [] \nfor ln in my_starred_repos: \n    right_split = ln.split('.com/')[1] \n    starred_usr = right_split.split('/')[0] \n    my_starred_users.append(starred_usr) \n\nmy_starred_users \n```", "```py\nstarred_repos = {k:[] for k in set(my_starred_users)} \ndef get_starred_by_user(user_name): \n    starred_resp_list = [] \n    last_resp = '' \n    first_url_to_get = 'https://api.github.com/users/'+ user_name +'/starred' \n    first_url_resp = requests.get(first_url_to_get, auth=(myun,mypw)) \n    last_resp = first_url_resp \n    starred_resp_list.append(json.loads(first_url_resp.text)) \n\n    while last_resp.links.get('next'): \n        next_url_to_get = last_resp.links['next']['url'] \n        next_url_resp = requests.get(next_url_to_get, auth=(myun,mypw)) \n        last_resp = next_url_resp \n        starred_resp_list.append(json.loads(next_url_resp.text)) \n\n    for i in starred_resp_list: \n        for j in i: \n            sr = j['html_url'] \n            starred_repos.get(user_name).append(sr) \n```", "```py\nfor usr in list(set(my_starred_users)): \n    print(usr) \n    try: \n        get_starred_by_user(usr) \n    except: \n        print('failed for user', usr) \n```", "```py\nrepo_vocab = [item for sl in list(starred_repos.values()) for item in sl] \n```", "```py\nrepo_set = list(set(repo_vocab)) \n```", "```py\nlen(repo_vocab) \n```", "```py\nall_usr_vector = [] \nfor k,v in starred_repos.items(): \n    usr_vector = [] \n    for url in repo_set: \n        if url in v: \n            usr_vector.extend([1]) \n        else: \n            usr_vector.extend([0]) \n    all_usr_vector.append(usr_vector) \n```", "```py\ndf = pd.DataFrame(all_usr_vector, columns=repo_set, index=starred_repos.keys()) \n\ndf \n```", "```py\nmy_repo_comp = [] \nfor i in df.columns: \n    if i in my_starred_repos: \n        my_repo_comp.append(1) \n    else: \n        my_repo_comp.append(0) \n\nmrc = pd.Series(my_repo_comp).to_frame('acombs').T \n\nmrc \n```", "```py\nmrc.columns = df.columns \n\nfdf = pd.concat([df, mrc]) \n\nfdf \n```", "```py\nfrom scipy.stats import pearsonr \n\nsim_score = {} \nfor i in range(len(fdf)): \n    ss = pearsonr(fdf.iloc[-1,:], fdf.iloc[i,:]) \n    sim_score.update({i: ss[0]}) \n\nsf = pd.Series(sim_score).to_frame('similarity') \nsf \n```", "```py\nsf.sort_values('similarity', ascending=False) \n```", "```py\nfdf.index[6] \n```", "```py\nfdf.iloc[6,:][fdf.iloc[6,:]==1] \n```", "```py\nfdf.index[42] \n```", "```py\nfdf.index[116] \n```", "```py\nall_recs = fdf.iloc[[6,42,116,159],:] \nall_recs.T \n```", "```py\nall_recs[(all_recs==1).all(axis=1)] \n```", "```py\nstr_recs_tmp = all_recs[all_recs[myun]==0].copy() \nstr_recs = str_recs_tmp.iloc[:,:-1].copy() \nstr_recs[(str_recs==1).all(axis=1)] \n```", "```py\nstr_recs.sum(axis=1).to_frame('total').sort_values(by='total', ascending=False) \n```"]