["```py\n    import pandas as pd \n    ```", "```py\n    df_bikes = pd.read_csv('bike_rentals.csv')\n    ```", "```py\n    df_bikes.head()\n    ```", "```py\ndf_bikes.describe()\n```", "```py\ndf_bikes.info()\n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 731 entries, 0 to 730\nData columns (total 16 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   instant     731 non-null    int64  \n 1   dteday      731 non-null    object \n 2   season      731 non-null    float64\n 3   yr          730 non-null    float64\n 4   mnth        730 non-null    float64\n 5   holiday     731 non-null    float64\n 6   weekday     731 non-null    float64\n 7   workingday  731 non-null    float64\n 8   weathersit  731 non-null    int64  \n 9   temp        730 non-null    float64\n 10  atemp       730 non-null    float64\n 11  hum         728 non-null    float64\n 12  windspeed   726 non-null    float64\n 13  casual      731 non-null    int64  \n 14  registered  731 non-null    int64  \n 15  cnt         731 non-null    int64  \ndtypes: float64(10), int64(5), object(1)\nmemory usage: 91.5+ KB\n```", "```py\ndf_bikes.isna().sum().sum()\n```", "```py\n12\n```", "```py\n df_bikes[df_bikes.isna().any(axis=1)]\n```", "```py\ndf_bikes['windspeed'].fillna((df_bikes['windspeed'].median()), inplace=True)\n```", "```py\ndf_bikes.iloc[[56, 81]]\n```", "```py\ndf_bikes.groupby(['season']).median()\n```", "```py\ndf_bikes.groupby('season')['hum'].transform('median')\n```", "```py\ndf_bikes['hum'] = df_bikes['hum'].fillna(df_bikes.groupby('season')['hum'].transform('median'))\n```", "```py\ndf_bikes[df_bikes['temp'].isna()]\n```", "```py\n    mean_temp = (df_bikes.iloc[700]['temp'] + df_bikes.iloc[702]['temp'])/2\n    mean_atemp = (df_bikes.iloc[700]['atemp'] + df_bikes.iloc[702]['atemp'])/2\n    ```", "```py\n    df_bikes['temp'].fillna((mean_temp), inplace=True)\n    df_bikes['atemp'].fillna((mean_atemp), inplace=True)\n    ```", "```py\ndf_bikes['dteday'] = pd.to_datetime(df_bikes['dteday'],infer_datetime_format=True)\n```", "```py\nimport datetime as dt\n```", "```py\nddf_bikes['mnth'] = df_bikes['dteday'].dt.month\n```", "```py\ndf_bikes.tail()\n```", "```py\ndf_bikes.loc[730, 'yr'] = 1.0\n```", "```py\ndf_bikes = df_bikes.drop('dteday', axis=1)\n```", "```py\ndf_bikes = df_bikes.drop(['casual', 'registered'], axis=1)\n```", "```py\ndf_bikes.to_csv('bike_rentals_cleaned.csv', index=False)\n```", "```py\nX = df_bikes.iloc[:,:-1]y = df_bikes.iloc[:,-1]\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, random_state=2)\n```", "```py\nimport warnings\nwarnings.filterwarnings('ignore')\n```", "```py\n    lin_reg = LinearRegression()\n    ```", "```py\n    lin_reg.fit(X_train, y_train)\n    ```", "```py\n    y_pred = lin_reg.predict(X_test)\n    ```", "```py\n    from sklearn.metrics import mean_squared_error\n    import numpy as np\n    mse = mean_squared_error(y_test, y_pred)\n    rmse = np.sqrt(mse)\n    ```", "```py\n    print(\"RMSE: %0.2f\" % (rmse))\n    ```", "```py\n    RMSE: 898.21\n    ```", "```py\ndf_bikes['cnt'].describe()\n```", "```py\ncount     731.000000\nmean     4504.348837\nstd      1937.211452\nmin        22.000000\n25%      3152.000000\n50%      4548.000000\n75%      5956.000000\nmax      8714.000000\nName: cnt, dtype: float64\n```", "```py\nfrom xgboost import XGBRegressor\n```", "```py\n    xg_reg = XGBRegressor()\n    ```", "```py\n    xg_reg.fit(X_train, y_train)\n    ```", "```py\n    y_pred = xg_reg.predict(X_test)\n    ```", "```py\n    mse = mean_squared_error(y_test, y_pred)\n    rmse = np.sqrt(mse)\n    ```", "```py\n    print(\"RMSE: %0.2f\" % (rmse))\n    ```", "```py\n    RMSE: 705.11\n    ```", "```py\nfrom sklearn.model_selection import cross_val_score\n```", "```py\n    model = LinearRegression()\n    ```", "```py\n    scores = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=10)\n    ```", "```py\n    rmse = np.sqrt(-scores)\n    ```", "```py\n    print('Reg rmse:', np.round(rmse, 2))\n    print('RMSE mean: %0.2f' % (rmse.mean()))\n    ```", "```py\n    Reg rmse: [ 504.01  840.55 1140.88  728.39  640.2   969.95 \n    1133.45 1252.85 1084.64  1425.33]\n    RMSE mean: 972.02\n    ```", "```py\n    model = XGBRegressor()\n    ```", "```py\n    scores = cross_val_score(model, X, y, scoring='neg_mean_squared_error', cv=10)\n    ```", "```py\n    rmse = np.sqrt(-scores)\n    ```", "```py\n    print('Reg rmse:', np.round(rmse, 2))\n    print('RMSE mean: %0.2f' % (rmse.mean()))\n    ```", "```py\n    Reg rmse: [ 717.65  692.8   520.7   737.68  835.96 1006.24  991.34  747.61  891.99 1731.13]\n    RMSE mean: 887.31\n    ```", "```py\ndf_census = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data')\ndf_census.head()\n```", "```py\ndf_census = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/adult/adult.data', header=None)\ndf_census.head()\n```", "```py\ndf_census.columns=['age', 'workclass', 'fnlwgt', 'education', 'education-num', 'marital-status', 'occupation', 'relationship', 'race', 'sex', 'capital-gain', 'capital-loss', 'hours-per-week', 'native-country', 'income']\ndf_census.head()\n```", "```py\ndf_census.info()\n```", "```py\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 32561 entries, 0 to 32560\nData columns (total 15 columns):\n #   Column          Non-Null Count  Dtype \n---  ------          --------------  ----- \n 0   age             32561 non-null  int64 \n 1   workclass       32561 non-null  object\n 2   fnlwgt          32561 non-null  int64 \n 3   education       32561 non-null  object\n 4   education-num   32561 non-null  int64 \n 5   marital-status  32561 non-null  object\n 6   occupation      32561 non-null  object\n 7   relationship    32561 non-null  object\n 8   race            32561 non-null  object\n 9   sex             32561 non-null  object\n 10  capital-gain    32561 non-null  int64 \n 11  capital-loss    32561 non-null  int64 \n 12  hours-per-week  32561 non-null  int64 \n 13  native-country  32561 non-null  object\n 14  income          32561 non-null  object\ndtypes: int64(6), object(9)\nmemory usage: 3.7+ MB\n```", "```py\ndf_census = df_census.drop(['education'], axis=1)\n```", "```py\ndf_census = pd.get_dummies(df_census)\ndf_census.head()\n```", "```py\ndf_census = df_census.drop('income_ <=50K', axis=1)\n```", "```py\nX = df_census.iloc[:,:-1]y = df_census.iloc[:,-1]\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\n```", "```py\ndef cross_val(classifier, num_splits=10):    model = classifier     scores = cross_val_score(model, X, y, cv=num_splits)    print('Accuracy:', np.round(scores, 2))    print('Accuracy mean: %0.2f' % (scores.mean()))\n```", "```py\ncross_val(LogisticRegression())\n```", "```py\nAccuracy: [0.8  0.8  0.79 0.8  0.79 0.81 0.79 0.79 0.8  0.8 ]\nAccuracy mean: 0.80\n```", "```py\nfrom xgboost import XGBClassifier\n```", "```py\ncross_val(XGBClassifier(n_estimators=5))\n```", "```py\nAccuracy: [0.85 0.86 0.87 0.85 0.86 0.86 0.86 0.87 0.86 0.86]\nAccuracy mean: 0.86\n```"]