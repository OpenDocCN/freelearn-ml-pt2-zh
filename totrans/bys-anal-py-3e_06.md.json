["```py\nK = 2 \nwith pm.Model() as model_kg: \n   p = pm.Dirichlet('p', a=np.ones(K)) \n   z = pm.Categorical('z', p=p, shape=len(cs_exp)) \n   means = pm.Normal('means', mu=cs_exp.mean(), sigma=10, shape=K) \n   sd = pm.HalfNormal('sd', sigma=10) \n\n   y = pm.Normal('y', mu=means[z], sigma=sd, observed=cs_exp) \n   idata_kg = pm.sample()\n```", "```py\nwith pm.Model() as model_mg: \n    p = pm.Dirichlet('p', a=np.ones(K)) \n    means = pm.Normal('means', mu=cs_exp.mean(), sigma=10, shape=K) \n    sd = pm.HalfNormal('sd', sigma=5) \n    y = pm.NormalMixture('y', w=p, mu=means, sigma=sd, observed=cs_exp) \n    idata_mg = pm.sample()\n```", "```py\nwith pm.Model() as model_mgo: \n    p = pm.Dirichlet('p', a=np.ones(K)) \n    means = pm.Normal('means', mu=cs_exp.mean(), sigma=10, shape=K, \n                      transform=pm.distributions.transforms.ordered, \n                      initval=np.array([cs_exp.mean()-1, cs_exp.mean()+1])) \n    sd = pm.HalfNormal('sd', sigma=10) \n    y = pm.NormalMixture('y', w=p, mu=means, sigma=sd, observed=cs_exp) \n\n    idata_mgo = pm.sample()\n```", "```py\nKs = [2, 3, 4, 5] \n\nmodels = [] \nidatas = [] \nfor k in Ks: \n    with pm.Model() as model: \n        p = pm.Dirichlet('p', a=np.ones(k)) \n        means = pm.Normal('means', \n                          mu=np.linspace(cs_exp.min(), cs_exp.max(), k), \n                          sigma=cs_exp.var() / k, shape=k, \n                          transform=pm.distributions.transforms.ordered, \n                          ) \n        sd = pm.HalfNormal('sd', sigma=5) \n        y = pm.NormalMixture('y', w=p, mu=means, sigma=sd, observed=cs_exp) \n        idata = pm.sample(random_seed=123, \n                          idata_kwargs={\"log_likelihood\":True} \n                         ) \n\n        idatas.append(idata) \n        models.append(model)\n```", "```py\nwith pm.Model() as ZIP_reg: \n    ![](img/Phi_02.png) = pm.Beta('![](img/Phi_02.png)', 1, 1) \n    *α* = pm.Normal('*α*', 0, 1) \n    *β* = pm.Normal('*β*', 0, 1, shape=2) \n    *θ* = pm.math.exp(*α* + *β*[0] * fish_data['child'] + *β*[1] * fish_data['camper']) \n    yl = pm.ZeroInflatedPoisson('yl', ![](img/Phi_02.png), *θ*, observed=fish_data['count']) \n    trace_ZIP_reg = pm.sample()\n```", "```py\nmodel_crab_p = bmb.Model(\"satellite ∼ width + C(color)\", \n                         family=\"poisson\", data=crab) \nmodel_crab_hp = bmb.Model(\"satellite ∼ width + C(color)\", \n                          family=\"hurdle_poisson\", data=crab) \nmodel_crab_nb = bmb.Model(\"satellite ∼ width + C(color)\", \n                          family=\"negativebinomial\", data=crab) \nmodel_crab_hnb = bmb.Model(\"satellite ∼ width + C(color)\", \n                           family=\"hurdle_negativebinomial\", data=crab)\n```", "```py\nK = 10 \n\ndef stick_breaking(*α*, K): \n    *β* = pm.Beta('*β*', 1., *α*, shape=K) \n    w = *β* * pt.concatenate([[1.], pt.extra_ops.cumprod(1\\. - *β*)[:-1]]) + 1E-6 \n    return w/w.sum()\n```", "```py\nwith pm.Model() as model_DP: \n    *α* = pm.Gamma('*α*', 2, 1) \n    w = pm.Deterministic('w', stick_breaking(*α*, K)) \n    means = pm.Normal('means', \n                      mu=np.linspace(cs_exp.min(), cs_exp.max(), K), \n                      sigma=5, shape=K, \n                      transform=pm.distributions.transforms.ordered, \n                     ) \n\n    sd = pm.HalfNormal('sd', sigma=10, shape=K) \n    obs = pm.NormalMixture('obs', w, means, sigma=sd, observed=cs_exp.values) \n    idata = pm.sample()\n```"]