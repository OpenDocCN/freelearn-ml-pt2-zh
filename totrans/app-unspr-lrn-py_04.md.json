["```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')\n    df.head()\n    ```", "```py\n    df = df[['Sepal Length', 'Sepal Width']]\n    df.head()\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.scatter(df['Sepal Length'], df['Sepal Width']);\n    plt.xlabel('Sepal Length (mm)');\n    plt.ylabel('Sepal Width (mm)');\n    plt.title('Sepal Length versus Width');\n    ```", "```py\n    df.mean()\n    ```", "```py\n    Sepal Length    5.843333\n    Sepal Width     3.054000\n    dtype: float64\n    ```", "```py\n    np.mean(df.values, axis=0)\n    ```", "```py\n    array([5.84333333, 3.054     ])\n    ```", "```py\n    df.std()\n    ```", "```py\n    Sepal Length    0.828066\n    Sepal Width     0.433594\n    dtype: float64\n    ```", "```py\n    np.std(df.values, axis=0)\n    ```", "```py\n    array([0.82530129, 0.43214658])\n    ```", "```py\n    df.var()\n    ```", "```py\n    Sepal Length    0.685694\n    Sepal Width     0.188004\n    dtype: float64\n    ```", "```py\n    np.var(df.values, axis=0)\n    ```", "```py\n    array([0.68112222, 0.18675067])\n    ```", "```py\n    df.cov()\n    ```", "```py\n    np.cov(df.values.T)\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')\n    df.head()\n    ```", "```py\n    df = df[['Sepal Length', 'Sepal Width']]\n    df.head()\n    ```", "```py\n    eigenvectors, eigenvalues, _ = np.linalg.svd(df.values, full_matrices=False)\n    ```", "```py\n    eigenvalues\n    ```", "```py\n    array([81.25483015,  6.96796793])\n    ```", "```py\n    eigenvalues = np.cumsum(eigenvalues)\n    eigenvalues\n    ```", "```py\n    array([81.25483015, 88.22279808])\n    ```", "```py\n    eigenvalues /= eigenvalues.max()\n    eigenvalues\n    ```", "```py\n    array([0.92101851, 1\\.        ])\n    ```", "```py\n    eigenvectors\n    ```", "```py\n    eigenvectors.shape\n    ```", "```py\n    (150, 2)\n    ```", "```py\n    P = eigenvectors[0]\n    P\n    ```", "```py\n    array([-0.07553027, -0.11068158])\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')\n    df.head()\n    ```", "```py\n    df = df[['Sepal Length', 'Sepal Width']]\n    df.head()\n    ```", "```py\n    data = np.cov(df.values.T)\n    # The transpose is required to ensure the covariance matrix is \n    #based on features, not samples data\n    data\n    ```", "```py\n    eigenvectors, eigenvalues, _ = np.linalg.svd(data, full_matrices=False)\n    ```", "```py\n    eigenvalues\n    ```", "```py\n    array([0.6887728 , 0.18492474])\n    ```", "```py\n    eigenvectors\n    ```", "```py\n    eigenvalues = np.cumsum(eigenvalues)\n    eigenvalues /= eigenvalues.max()\n    eigenvalues\n    ```", "```py\n    array([0.78834238, 1\\.        ])\n    ```", "```py\n    P = eigenvectors[0]\n    P\n    ```", "```py\n    array([-0.99693955,  0.07817635])\n    ```", "```py\n    x_t_p = P.dot(df.values.T)\n    x_t_p\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(x_t_p);\n    plt.title('Principal Component of Selected Iris Dataset');\n    plt.xlabel('Sample');\n    plt.ylabel('Component Value');\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.decomposition import PCA\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')\n    df.head()\n    ```", "```py\n    df = df[['Sepal Length', 'Sepal Width']]\n    df.head()\n    ```", "```py\n    model = PCA()\n    model.fit(df.values)\n    ```", "```py\n    model.explained_variance_ratio_\n    ```", "```py\n    array([0.78834238, 0.21165762])\n    ```", "```py\n    model.components_\n    ```", "```py\n    model = PCA(n_components=1)\n    ```", "```py\n    model.fit(df.values)\n    ```", "```py\n    model.components_\n    ```", "```py\n    array([[ 0.99693955, -0.07817635]])\n    ```", "```py\n    data_t = model.fit_transform(df.values)\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(data_t);\n    plt.xlabel('Sample');\n    plt.ylabel('Transformed Data');\n    plt.title('The dataset transformed by the principal component');\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')[['Sepal Length', 'Sepal Width']]\n    df.head()\n    ```", "```py\n    means = np.mean(df.values, axis=0)\n    means\n    ```", "```py\n    array([5.84333333, 3.054     ])\n    ```", "```py\n    data = df.values - means\n    data\n    ```", "```py\n    eigenvectors, eigenvalues, _ = np.linalg.svd(np.cov(data.T), full_matrices=False)\n    P = eigenvectors[0]\n    P\n    ```", "```py\n    array([-0.99693955,  0.07817635])\n    ```", "```py\n    data_transformed = P.dot(data.T)\n    ```", "```py\n    P = P.reshape((-1, 1))\n    ```", "```py\n    P_transformed = np.linalg.pinv(P)\n    P_transformed\n    ```", "```py\n    array([[-0.99693955,  0.07817635]])\n    ```", "```py\n    data_transformed = data_transformed.reshape((-1, 1))\n    ```", "```py\n    data_restored = data_transformed.dot(P_transformed)\n    data_restored\n    ```", "```py\n    data_restored += means\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.plot(data_restored[:,0], data_restored[:,1], linestyle=':', label='PCA restoration');\n    plt.scatter(df['Sepal Length'], df['Sepal Width'], marker='*', label='Original');\n    plt.legend();\n    plt.xlabel('Sepal Length');\n    plt.ylabel('Sepal Width');\n    plt.title('Inverse transform after removing variance');\n    ```", "```py\n    P = eigenvectors\n    data_transformed = P.dot(data.T)\n    ```", "```py\n    data_transformed = data_transformed.T\n    ```", "```py\n    data_restored = data_transformed.dot(P)\n    data_restored\n    ```", "```py\n    data_restored += means\n    ```", "```py\n    plt.figure(figsize=(10, 7))\n    plt.scatter(data_restored[:,0], data_restored[:,1], marker='d', label='PCA restoration', c='k');\n    plt.scatter(df['Sepal Length'], df['Sepal Width'], marker='o', label='Original', c='k');\n    plt.legend();\n    plt.xlabel('Sepal Length');\n    plt.ylabel('Sepal Width');\n    plt.title('Inverse transform after removing variance');\n    ```", "```py\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from sklearn.decomposition import PCA\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')[['Sepal Length', 'Sepal Width']]\n    df.head()\n    ```", "```py\n    model = PCA(n_components=1)\n    data_p = model.fit_transform(df.values)\n    ```", "```py\n    data = model.inverse_transform(data_p);\n    plt.figure(figsize=(10, 7))\n    plt.plot(data[:,0], data[:,1], linestyle=':', label='PCA restoration');\n    plt.scatter(df['Sepal Length'], df['Sepal Width'], marker='*', label='Original');\n    plt.legend();\n    plt.xlabel('Sepal Length');\n    plt.ylabel('Sepal Width');\n    plt.title('Inverse transform after removing variance');\n    ```", "```py\n    model = PCA()\n    data_p = model.fit_transform(df.values)\n    data = model.inverse_transform(data_p);\n    plt.figure(figsize=(10, 7))\n    plt.scatter(data[:,0], data[:,1], marker='d', label='PCA restoration', c='k');\n    plt.scatter(df['Sepal Length'], df['Sepal Width'], marker='o', label='Original', c='k');\n    plt.legend();\n    plt.xlabel('Sepal Length');\n    plt.ylabel('Sepal Width');\n    plt.title('Inverse transform after removing variance');\n    ```", "```py\n    from mpl_toolkits.mplot3d import Axes3D\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    ```", "```py\n    df = pd.read_csv('iris-data.csv')[['Sepal Length', 'Sepal Width', 'Petal Width']]\n    df.head()\n    ```", "```py\n    fig = plt.figure(figsize=(10, 7))\n    ax = fig.add_subplot(111, projection='3d') # Where Axes3D is required\n    ax.scatter(df['Sepal Length'], df['Sepal Width'], df['Petal Width']);\n    ax.set_xlabel('Sepal Length (mm)');\n    ax.set_ylabel('Sepal Width (mm)');\n    ax.set_zlabel('Petal Width (mm)');\n    ax.set_title('Expanded Iris Dataset');\n    ```", "```py\n    fig = plt.figure(figsize=(10, 14))\n    # Original Data\n    ax = fig.add_subplot(211, projection='3d')\n    # Transformed Data\n    ax = fig.add_subplot(212, projection='3d')\n    ```"]