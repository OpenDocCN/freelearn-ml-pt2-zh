["```py\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfrom sklearn.cluster import KMeans\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.manifold import TSNE\n\nnp.random.seed(123456)\n\nbc = load_breast_cancer()\n```", "```py\ndata = tsne.fit_transform(bc.dataa)\nreds = bc.target == 0\nblues = bc.target == 1\nplt.scatter(data[reds, 0], data[reds, 1], label='malignant')\nplt.scatter(data[blues, 0], data[blues, 1], label='benign')\nplt.xlabel('1st Component')\nplt.ylabel('2nd Component')\nplt.title('Breast Cancer dataa')\nplt.legend()\n```", "```py\nplt.figure()\nplt.title('2, 4, and 6 clusters.')\nfor clusters in [2, 4, 6]:\n km = KMeans(n_clusters=clusters)\n preds = km.fit_predict(data)\n plt.subplot(1, 3, clusters/2)\n plt.scatter(*zip(*data), c=preds)\n\nclassified = {x: {'m': 0, 'b': 0} for x in range(clusters)}\n\nfor i in range(len(data)):\n cluster = preds[i]\n label = bc.target[i]\n label = 'm' if label == 0 else 'b'\n classified[cluster][label] = classified[cluster][label]+1\n\nprint('-'*40)\nfor c in classified:\n print('Cluster %d. Malignant percentage: ' % c, end=' ')\n print(classified[c], end=' ')\n print('%.3f' % (classified[c]['m'] /\n (classified[c]['m'] + classified[c]['b']))) \n```", "```py\n# --- SECTION 1 ---\n# Libraries and data loading\nimport openensembles as oe\nimport pandas as pd\nimport sklearn.metrics\n\nfrom sklearn.datasets import load_breast_cancer\n\nbc = load_breast_cancer()\n\n# --- SECTION 2 ---\n# Create the data object\ncluster_data = oe.data(pd.DataFrame(bc.data), bc.feature_names)\n```", "```py\nensemble = oe.cluster(cluster_data)\n```", "```py\n# --- SECTION 3 ---\n# Create the ensembles and calculate the homogeneity score\nfor K in [2, 3, 4, 5, 6, 7]:\n for ensemble_size in [3, 4, 5]:\n ensemble = oe.cluster(cluster_data)\n for i in range(ensemble_size):\n name = f'kmeans_{ensemble_size}_{i}'\n ensemble.cluster('parent', 'kmeans', name, K)\n\npreds = ensemble.finish_majority_vote(threshold=0.5)\nprint(f'K: {K}, size {ensemble_size}:', end=' ')\nprint('%.2f' % sklearn.metrics.homogeneity_score(\n bc.target, preds.labels['majority_vote']))\n```", "```py\n# --- SECTION 1 ---\n# Libraries and data loading\nimport openensembles as oe\nimport pandas as pd\nimport sklearn.metrics\n\nfrom sklearn.datasets import load_breast_cancer\n\nbc = load_breast_cancer()\n\n# --- SECTION 2 ---\n# Create the data object\ncluster_data = oe.data(pd.DataFrame(bc.data), bc.feature_names)\n```", "```py\n# --- SECTION 3 ---\n# Create the ensembles and calculate the homogeneity score\nfor K in [2, 3, 4, 5, 6, 7]:\n for ensemble_size in [3, 4, 5]:\n ensemble = oe.cluster(cluster_data)\n for i in range(ensemble_size):\n name = f'kmeans_{ensemble_size}_{i}'\n ensemble.cluster('parent', 'kmeans', name, K)\n\npreds = ensemble.finish_majority_vote(threshold=0.5)\nprint(f'K: {K}, size {ensemble_size}:', end=' ')\nprint('%.2f' % sklearn.metrics.homogeneity_score(\n bc.target, preds.labels['majority_vote']))\n```", "```py\n# --- SECTION 1 ---\n# Libraries and data loading\nimport openensembles as oe\nimport pandas as pd\nimport sklearn.metrics\n\nfrom sklearn.datasets import load_breast_cancer\n\nbc = load_breast_cancer()\n\n# --- SECTION 2 ---\n# Create the data object\ncluster_data = oe.data(pd.DataFrame(bc.data), bc.feature_names)\n\n# --- SECTION 3 ---\n# Create the ensembles and calculate the homogeneity score\nfor K in [2, 3, 4, 5, 6, 7]:\n for ensemble_size in [3, 4, 5]:\n  ensemble = oe.cluster(cluster_data)\n  for i in range(ensemble_size):\n  name = f'kmeans_{ensemble_size}_{i}'\n  ensemble.cluster('parent', 'kmeans', name, K)\n  preds = ensemble.finish_co_occ_linkage(threshold=0.5)\n  print(f'K: {K}, size {ensemble_size}:', end=' ')\n  print('%.2f' % sklearn.metrics.homogeneity_score(\n        bc.target, preds.labels['co_occ_linkage']))\n```"]