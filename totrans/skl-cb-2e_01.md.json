["```py\nimport numpy as np\n```", "```py\nnp.arange(10)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n```", "```py\narray_1 = np.arange(10)\narray_1.shape\n(10L,)\n```", "```py\narray_1.ndim      #Find number of dimensions of array_1\n1\n```", "```py\narray_1.reshape((5,2))\narray([[0, 1],\n [2, 3],\n [4, 5],\n [6, 7],\n [8, 9]])\n```", "```py\narray_1 = array_1.reshape((5,2))\n```", "```py\narray_1.ndim\n2\n```", "```py\narray_1 + 1\narray([[ 1,  2],\n [ 3,  4],\n [ 5,  6],\n [ 7,  8],\n [ 9, 10]])\n```", "```py\narray_2 = np.arange(10)\narray_2 * array_2\narray([ 0,  1,  4,  9, 16, 25, 36, 49, 64, 81])\n```", "```py\narray_2 = array_2 ** 2  #Note that this is equivalent to array_2 * array_2\narray_2 = array_2.reshape((5,2))\narray_2\narray([[ 0,  1],\n [ 4,  9],\n [16, 25],\n [36, 49],\n [64, 81]])\n```", "```py\narray_1 = array_1 + 1\narray_1\narray([[ 1,  2],\n [ 3,  4],\n [ 5,  6],\n [ 7,  8],\n [ 9, 10]])\n```", "```py\narray_1 + array_2\narray([[ 1,  3],\n [ 7, 13],\n [21, 31],\n [43, 57],\n [73, 91]])\n```", "```py\nnp.zeros((5,2))\narray([[ 0.,  0.],\n [ 0.,  0.],\n [ 0.,  0.],\n [ 0.,  0.],\n [ 0.,  0.]])\n```", "```py\nnp.ones((5,2), dtype = np.int)\narray([[1, 1],\n [1, 1],\n [1, 1],\n [1, 1],\n [1, 1]])\n```", "```py\nnp.empty((5,2), dtype = np.float)\narray([[  3.14724935e-316,   3.14859499e-316],\n [  3.14858945e-316,   3.14861159e-316],\n [  3.14861435e-316,   3.14861712e-316],\n [  3.14861989e-316,   3.14862265e-316],\n [  3.14862542e-316,   3.14862819e-316]])\n```", "```py\narray_1[0,0]   #Finds value in first row and first column.\n1\n```", "```py\narray_1[0,:]\narray([1, 2])\n```", "```py\narray_1[:,0]\narray([1, 3, 5, 7, 9])\n```", "```py\narray_1[2:5, :]\narray([[ 5,  6],\n [ 7,  8],\n [ 9, 10]])\n```", "```py\narray_1[2:5,0]\narray([5, 7, 9])\n```", "```py\narray_1 > 5\narray([[False, False],\n [False, False],\n [False,  True],\n [ True,  True],\n [ True,  True]], dtype=bool)\n```", "```py\narray_1[array_1 > 5]\narray([ 6,  7,  8,  9, 10])\n```", "```py\narray_1\narray([[ 1,  2],\n [ 3,  4],\n [ 5,  6],\n [ 7,  8],\n [ 9, 10]])\narray_1.sum()\n55\n```", "```py\narray_1.sum(axis = 1)\narray([ 3,  7, 11, 15, 19])\n```", "```py\narray_1.sum(axis = 0)\narray([25, 30])\n```", "```py\narray_1.mean(axis = 0)\narray([ 5.,  6.])\n```", "```py\narray_3 = np.array([np.nan, 0, 1, 2, np.nan])\n```", "```py\nnp.isnan(array_3)\narray([ True, False, False, False,  True], dtype=bool)\n```", "```py\narray_3[~np.isnan(array_3)]\n>array([ 0.,  1.,  2.])\n```", "```py\narray_3[np.isnan(array_3)] = 0\narray_3\narray([ 0.,  0.,  1.,  2.,  0.])\n```", "```py\nimport numpy as np    #Load the numpy library for fast array computations\nimport pandas as pd   #Load the pandas data-analysis library\nimport matplotlib.pyplot as plt   #Load the pyplot visualization library\n```", "```py\n%matplotlib inline \n```", "```py\nfrom sklearn import datasets\niris = datasets.load_iris()\n```", "```py\nfrom sklearn import datasets  #Import datasets module from scikit-learn\ndiabetes = datasets.load_diabetes()   \n```", "```py\ndatasets.load_*?\n```", "```py\ndigits = datasets.load_digits()\n```", "```py\niris.data\n```", "```py\narray([[ 5.1,  3.5,  1.4,  0.2],\n [ 4.9,  3\\. ,  1.4,  0.2],\n [ 4.7,  3.2,  1.3,  0.2], \n#...rest of output suppressed because of length\n```", "```py\niris.data.shape\n```", "```py\n(150L, 4L)\n```", "```py\niris.data[0]\n\narray([ 5.1,  3.5,  1.4,  0.2])\n```", "```py\niris.feature_names\n['sepal length (cm)',\n 'sepal width (cm)',\n 'petal length (cm)',\n 'petal width (cm)']\n```", "```py\niris.target\n```", "```py\niris.target.shape\n```", "```py\n(150L,)\n```", "```py\niris.target_names\n\narray(['setosa', 'versicolor', 'virginica'], \n dtype='|S10')\n```", "```py\niris.target[0]\n```", "```py\nimport pandas as pd\niris_df = pd.DataFrame(iris.data, columns = iris.feature_names)\n```", "```py\niris_df['sepal length (cm)'].hist(bins=30)\n```", "```py\nfor class_number in np.unique(iris.target):\n plt.figure(1)\n iris_df['sepal length (cm)'].iloc[np.where(iris.target == class_number)[0]].hist(bins=30)\n```", "```py\nnp.where(iris.target== class_number)[0]\n```", "```py\nimport numpy as np\n import matplotlib.pyplot as plt\n %matplotlib inline\n```", "```py\nplt.plot(numpy array, numpy array of same length)\n```", "```py\nplt.plot(np.arange(10), np.arange(10))\n```", "```py\nplt.plot(np.arange(10), np.exp(np.arange(10)))\n```", "```py\nplt.figure()\nplt.subplot(121)\nplt.plot(np.arange(10), np.exp(np.arange(10)))\nplt.subplot(122)\nplt.scatter(np.arange(10), np.exp(np.arange(10)))\n```", "```py\nplt.figure()\nplt.subplot(211)\nplt.plot(np.arange(10), np.exp(np.arange(10)))\nplt.subplot(212)\nplt.scatter(np.arange(10), np.exp(np.arange(10)))\n```", "```py\nplt.figure()\nplt.subplot(221)\nplt.plot(np.arange(10), np.exp(np.arange(10)))\nplt.subplot(222)\nplt.scatter(np.arange(10), np.exp(np.arange(10)))\nplt.subplot(223)\nplt.scatter(np.arange(10), np.exp(np.arange(10)))\nplt.subplot(224)\nplt.scatter(np.arange(10), np.exp(np.arange(10)))\n```", "```py\nfrom sklearn.datasets import load_iris\n\niris = load_iris()\ndata = iris.data\ntarget = iris.target\n\n# Resize the figure for better viewing\nplt.figure(figsize=(12,5))\n\n# First subplot\nplt.subplot(121)\n\n# Visualize the first two columns of data:\nplt.scatter(data[:,0], data[:,1], c=target)\n\n# Second subplot\nplt.subplot(122)\n\n# Visualize the last two columns of data:\nplt.scatter(data[:,2], data[:,3], c=target)\n```", "```py\nX = iris.data[:, :2] \ny = iris.target\n```", "```py\nfrom sklearn.model_selection import train_test_split\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n```", "```py\nfrom sklearn.svm import SVC\n```", "```py\nclf = SVC(kernel='linear',random_state=1)\n```", "```py\nclf.fit(X_train, y_train)\n```", "```py\ny_pred = clf.predict(X_test)\n```", "```py\nfrom sklearn.metrics import accuracy_score\n```", "```py\naccuracy_score(y_test,y_pred)\n\n0.76315789473684215\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\n```", "```py\nimport matplotlib.pyplot as plt\nfrom sklearn import datasets\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX = iris.data[:, :2]   #load the iris data\ny = iris.target\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=1)\n\n#train the model\nclf = LogisticRegression(random_state = 1)\nclf.fit(X_train, y_train)\n\n#predict with Logistic Regression\ny_pred = clf.predict(X_test)\n\n#examine the model accuracy\naccuracy_score(y_test,y_pred)\n\n0.60526315789473684\n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X_train, y_train, test_size=0.25, random_state=1)\n```", "```py\nfrom sklearn import datasets\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n#load the classifying models\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\n\niris = datasets.load_iris()\nX = iris.data[:, :2]  #load the first two features of the iris data \ny = iris.target #load the target of the iris data\n\n#split the whole set one time\n#Note random state is 7 now\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=7)\n\n#split the training set into parts\nX_train_2, X_test_2, y_train_2, y_test_2 = train_test_split(X_train, y_train, test_size=0.25, random_state=7)\n```", "```py\nsvc_clf = SVC(kernel = 'linear',random_state = 7)\nsvc_clf.fit(X_train_2, y_train_2)\n```", "```py\nlr_clf = LogisticRegression(random_state = 7).fit(X_train_2, y_train_2)\n```", "```py\nsvc_pred = svc_clf.predict(X_test_2)\nlr_pred = lr_clf.predict(X_test_2)\n\nprint \"Accuracy of SVC:\",accuracy_score(y_test_2,svc_pred)\nprint \"Accuracy of LR:\",accuracy_score(y_test_2,lr_pred)\n\nAccuracy of SVC: 0.857142857143\nAccuracy of LR: 0.714285714286\n```", "```py\nprint \"Accuracy of SVC on original Test Set: \",accuracy_score(y_test, svc_clf.predict(X_test))\n\nAccuracy of SVC on original Test Set:  0.684210526316\n```", "```py\nfrom sklearn.model_selection import cross_val_score\n```", "```py\nsvc_scores = cross_val_score(svc_clf, X_train, y_train, cv=4)\nsvc_scores \narray([ 0.82758621,  0.85714286,  0.92857143,  0.77777778])\n```", "```py\nprint \"Average SVC scores: \", svc_scores.mean()\nprint \"Standard Deviation of SVC scores: \", svc_scores.std()\n\nAverage SVC scores:  0.847769567597\nStandard Deviation of SVC scores:  0.0545962864696\n```", "```py\nlr_scores = cross_val_score(lr_clf, X_train, y_train, cv=4)\nprint \"Average SVC scores: \", lr_scores.mean()\nprint \"Standard Deviation of SVC scores: \", lr_scores.std()\n\nAverage SVC scores:  0.748893906221\nStandard Deviation of SVC scores:  0.0485633168699\n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y)\n```", "```py\nsvc_scores = cross_val_score(svc_clf, X_train, y_train, cv=4)\nprint \"Average SVC scores: \" , svc_scores.mean()\nprint \"Standard Deviation of SVC scores: \", svc_scores.std()\nprint \"Score on Final Test Set:\", accuracy_score(y_test, svc_clf.predict(X_test))\n\nAverage SVC scores:  0.831547619048\nStandard Deviation of SVC scores:  0.0792488953372\nScore on Final Test Set: 0.789473684211\n```", "```py\nfrom sklearn.model_selection import cross_val_score\nsvc_scores = cross_val_score(svc_clf, X_train, y_train, cv = 4)\n```", "```py\nfrom sklearn.model_selection import cross_val_score, StratifiedKFold\nskf = StratifiedKFold(n_splits = 4)\nsvc_scores = cross_val_score(svc_clf, X_train, y_train, cv = skf)\n```", "```py\nfrom sklearn.neighbors import KNeighborsClassifier\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state = 0) \n```", "```py\nfrom sklearn.model_selection import cross_val_score\nknn_3_clf = KNeighborsClassifier(n_neighbors = 3)\nknn_5_clf = KNeighborsClassifier(n_neighbors = 5)\n\nknn_3_scores = cross_val_score(knn_3_clf, X_train, y_train, cv=10)\nknn_5_scores = cross_val_score(knn_5_clf, X_train, y_train, cv=10)\n```", "```py\nprint \"knn_3 mean scores: \", knn_3_scores.mean(), \"knn_3 std: \",knn_3_scores.std()\nprint \"knn_5 mean scores: \", knn_5_scores.mean(), \" knn_5 std: \",knn_5_scores.std()\n\nknn_3 mean scores:  0.798333333333 knn_3 std:  0.0908142181722\nknn_5 mean scores:  0.806666666667 knn_5 std:  0.0559320575496\n```", "```py\nall_scores = []\nfor n_neighbors in range(3,9,1):\n knn_clf = KNeighborsClassifier(n_neighbors = n_neighbors)\n all_scores.append((n_neighbors, cross_val_score(knn_clf, X_train, y_train, cv=10).mean()))\nsorted(all_scores, key = lambda x:x[1], reverse = True)  \n```", "```py\n[(4, 0.85111111111111115),\n (7, 0.82611111111111113),\n (6, 0.82333333333333347),\n (5, 0.80666666666666664),\n (3, 0.79833333333333334),\n (8, 0.79833333333333334)]\n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom sklearn import datasets\n\niris = datasets.load_iris()\n```", "```py\nX = iris.data[iris.target < 2]\ny = iris.target[iris.target < 2]\n```", "```py\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state= 7)\n```", "```py\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import cross_val_score\n\nsvc_clf = SVC(kernel = 'linear').fit(X_train, y_train)\nsvc_scores = cross_val_score(svc_clf, X_train, y_train, cv=4)\n```", "```py\nsvc_scores.mean()\n\n0.94795321637426899\n```", "```py\nfrom sklearn.svm import SVR\n```", "```py\nsvr_clf = SVR(kernel = 'linear').fit(X_train, y_train)\n```", "```py\nfrom sklearn.metrics import make_scorer\n```", "```py\n#Only works for this iris example with targets 0 and 1\ndef for_scorer(y_test, orig_y_pred):\n y_pred = np.rint(orig_y_pred).astype(np.int)   #rounds prediction to the nearest integer\n return accuracy_score(y_test, y_pred)\n```", "```py\nsvr_to_class_scorer = make_scorer(for_scorer, greater_is_better=True) \n```", "```py\nsvr_scores = cross_val_score(svr_clf, X_train, y_train, cv=4, scoring = svr_to_class_scorer)\n```", "```py\nsvr_scores.mean()\n\n0.94663742690058483\n```", "```py\nfrom sklearn.svm import SVC   #Usual import of SVC\nsvc_poly_clf = SVC(kernel = 'poly', degree= 3).fit(X_train, y_train)  #Polynomial Kernel of Degree 3\n```", "```py\nsvc_poly_scores = cross_val_score(svc_clf, X_train, y_train, cv=4)\nsvc_poly_scores.mean()\n\n0.95906432748538006\n```"]