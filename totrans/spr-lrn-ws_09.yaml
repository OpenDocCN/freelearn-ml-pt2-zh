- en: 1\. Fundamentals
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 1.01: Implementing Pandas Functions'
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Open a new Jupyter notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use pandas to load the Titanic dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: import pandas as pd
  prefs: []
  type: TYPE_NORMAL
- en: df = pd.read_csv(r'../Datasets/titanic.csv')
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the head function on the dataset as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Have a look at the first 5 sample of the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: df.head()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26: First five rows'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-C8LRLI2Q.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.26: First five rows'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the describe function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: df.describe(include='all')
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27: Output of describe()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-08I9W255.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.27: Output of describe()'
  prefs: []
  type: TYPE_NORMAL
- en: 'We do not need the Unnamed: 0 column. We can remove the column without using
    the del command, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'del df[''Unnamed: 0'']'
  prefs: []
  type: TYPE_NORMAL
- en: 'df = df[df.columns[1:]] # Use the columns'
  prefs: []
  type: TYPE_NORMAL
- en: df.head()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28: First five rows after deleting the Unnamed: 0 column'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-3IS9NYQ8.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.28: First five rows after deleting the Unnamed: 0 column'
  prefs: []
  type: TYPE_NORMAL
- en: 'Compute the mean, standard deviation, minimum, and maximum values for the columns
    of the DataFrame without using describe:'
  prefs: []
  type: TYPE_NORMAL
- en: df.mean()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29: Output for mean()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-UT30C1VE.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.29: Output for mean()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, calculate the standard deviation:'
  prefs: []
  type: TYPE_NORMAL
- en: df.std()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30: Output for std()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-HM1BXAG1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.30: Output for std()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Calculate the minimum value of the columns:'
  prefs: []
  type: TYPE_NORMAL
- en: df.min()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31: Output for min()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-OZ5WBQAJ.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.31: Output for min()'
  prefs: []
  type: TYPE_NORMAL
- en: Next, calculate the maximum value of the column of the dataframe.
  prefs: []
  type: TYPE_NORMAL
- en: df.max()
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.32: Output for max()'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-EM11IS7E.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.32: Output for max()'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the quantile method for the 33, 66, and 99% quantiles, as shown in the
    following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: df.quantile(0.33)
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.33: Output for the 33% quantile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-4IN2M7WQ.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.33: Output for the 33% quantile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, use the quantile method for 66%:'
  prefs: []
  type: TYPE_NORMAL
- en: df.quantile(0.66)
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.34: Output for the 66% quantile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-Q0TROBCG.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.34: Output for the 66% quantile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the same method for 99%:'
  prefs: []
  type: TYPE_NORMAL
- en: df.quantile(0.99)
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.35: Output for the 99% quantile'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-7CC087HR.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.35: Output for the 99% quantile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find out how many passengers were from each class using the groupby method:'
  prefs: []
  type: TYPE_NORMAL
- en: class_groups = df.groupby('Pclass')
  prefs: []
  type: TYPE_NORMAL
- en: 'for name, index in class_groups:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f''Class: {name}: {len(index)}'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: 1: 323'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: 2: 277'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class: 3: 709'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find out how many passengers were from each class by using selecting/indexing
    methods to count the members of each class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for clsGrp in df.Pclass.unique():'
  prefs: []
  type: TYPE_NORMAL
- en: num_class = len(df[df.Pclass == clsGrp])
  prefs: []
  type: TYPE_NORMAL
- en: 'print(f''Class {clsGrp}: {num_class}'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class 3: 709'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class 1: 323'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class 2: 277'
  prefs: []
  type: TYPE_NORMAL
- en: The answers to Step 6 and Step 7 do match.
  prefs: []
  type: TYPE_NORMAL
- en: 'Determine who the eldest passenger in third class was:'
  prefs: []
  type: TYPE_NORMAL
- en: third_class = df.loc[(df.Pclass == 3)]
  prefs: []
  type: TYPE_NORMAL
- en: third_class.loc[(third_class.Age == third_class.Age.max())]
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.36: Eldest passenger in third class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-3E0I4FN3.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.36: Eldest passenger in third class'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a number of machine learning problems, it is very common to scale the numerical
    values between 0 and 1\. Use the agg method with Lambda functions to scale the
    Fare and Age columns between 0 and 1:'
  prefs: []
  type: TYPE_NORMAL
- en: fare_max = df.Fare.max()
  prefs: []
  type: TYPE_NORMAL
- en: age_max = df.Age.max()
  prefs: []
  type: TYPE_NORMAL
- en: 'df.agg({''Fare'': lambda x: x / fare_max, \'
  prefs: []
  type: TYPE_NORMAL
- en: '''Age'': lambda x: x / age_max,}).head()'
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.37: Scaling numerical values between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-B8SLI1KY.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.37: Scaling numerical values between 0 and 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify the one individual entry in the dataset without a listed Fare value:'
  prefs: []
  type: TYPE_NORMAL
- en: df_nan_fare = df.loc[(df.Fare.isna())]
  prefs: []
  type: TYPE_NORMAL
- en: df_nan_fare
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.38: Individual without a listed fare value'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-FKM88B4Y.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.38: Individual without a listed fare value'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the NaN values of this row in the main DataFrame with the mean Fare
    value for those corresponding to the same class and Embarked location using the
    groupby method:'
  prefs: []
  type: TYPE_NORMAL
- en: embarked_class_groups = df.groupby(['Embarked', 'Pclass'])
  prefs: []
  type: TYPE_NORMAL
- en: indices = embarked_class_groups\
  prefs: []
  type: TYPE_NORMAL
- en: .groups[(df_nan_fare.Embarked.values[0], \
  prefs: []
  type: TYPE_NORMAL
- en: df_nan_fare.Pclass.values[0])]
  prefs: []
  type: TYPE_NORMAL
- en: mean_fare = df.iloc[indices].Fare.mean()
  prefs: []
  type: TYPE_NORMAL
- en: df.loc[(df.index == 1043), 'Fare'] = mean_fare
  prefs: []
  type: TYPE_NORMAL
- en: df.iloc[1043]
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.39: Output for the individual without listed fare details'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/image-HQ9K9JV1.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 1.39: Output for the individual without listed fare details'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To access the source code for this specific section, please refer to https://packt.live/2AWHbu0.
  prefs: []
  type: TYPE_NORMAL
- en: You can also run this example online at https://packt.live/2NmAnse. You must
    execute the entire Notebook in order to get the desired result.
  prefs: []
  type: TYPE_NORMAL
