["```py\nfrom sklearn.datasets import make_blobs\n\nx, y = make_blobs(n_samples=100, centers=4, n_features=2, cluster_std=[1, 1.5, 2, 2], random_state=7)\n\ndf_blobs = pd.DataFrame(\n    {\n        'x1': x[:,0],\n        'x2': x[:,1],\n        'y': y\n    }\n)\n```", "```py\ndef plot_2d_clusters(x, y, ax):\n\n    y_uniques = pd.Series(y).unique()\n\n    for y_unique_item in y_uniques:\n x[\n            y == y_unique_item\n        ].plot(\n            title=f'{len(y_uniques)} Clusters',\n            kind='scatter',\n            x='x1', y='x2',\n            marker=f'${y_unique_item}$',\n            ax=ax,\n        )\n```", "```py\nfig, ax = plt.subplots(1, 1, figsize=(10, 6))\nx, y = df_blobs[['x1', 'x2']], df_blobs['y']\nplot_2d_clusters(x, y, ax)\n```", "```py\nfrom sklearn.cluster import KMeans\nkmeans = KMeans(n_clusters=2, random_state=7)\nx, y = df_blobs[['x1', 'x2']], df_blobs['y']\ny_pred = kmeans.fit_predict(x)\n```", "```py\nfig, axs = plt.subplots(1, 2, figsize=(14, 6))\n\nx, y = df_blobs[['x1', 'x2']], df_blobs['y']\nplot_2d_clusters(x, y, axs[0])\nplot_2d_clusters(x, y_pred, axs[1])\n\naxs[0].set_title(f'Actuals: {axs[0].get_title()}')\naxs[1].set_title(f'KMeans: {axs[1].get_title()}')\n```", "```py\nfrom sklearn.cluster import KMeans\n\nn_clusters_options = [2, 4, 6]\n\nfig, axs = plt.subplots(1, len(n_clusters_options), figsize=(16, 6))\n\nfor i, n_clusters in enumerate(n_clusters_options):\n\n    x, y = df_blobs[['x1', 'x2']], df_blobs['y']\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=7)\n    y_pred = kmeans.fit_predict(x)\n\n    plot_2d_clusters(x, y_pred, axs[i])\n\n    axs[i].plot(\n        kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], \n        'k^', ms=12, alpha=0.75\n    )\n\n```", "```py\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import silhouette_score\n\nn_clusters_options = [2, 3, 4, 5, 6, 7, 8]\nsilhouette_scores = []\n\nfor i, n_clusters in enumerate(n_clusters_options):\n\n    x, y = df_blobs[['x1', 'x2']], df_blobs['y']\n    kmeans = KMeans(n_clusters=n_clusters, random_state=7)\n    y_pred = kmeans.fit_predict(x)\n\n    silhouette_scores.append(silhouette_score(x, y_pred))\n```", "```py\nfig, ax = plt.subplots(1, 1, figsize=(12, 6), sharey=False)\n\npd.DataFrame(\n    {\n        'n_clusters': n_clusters_options,\n        'silhouette_score': silhouette_scores,\n    }\n).set_index('n_clusters').plot(\n    title='KMeans: Silhouette Score vs # Clusters chosen',\n    kind='bar',\n    ax=ax\n)\n```", "```py\nfrom sklearn.cluster import KMeans\n\ninitial_centroid_options = np.array([\n    [(-10,5), (0, 5), (10, 0), (-10, 0)],\n    [(0,0), (0.1, 0.1), (0, 0), (0.1, 0.1)],\n])\n\nfig, axs = plt.subplots(1, 2, figsize=(16, 6))\n\nfor i, initial_centroids in enumerate(initial_centroid_options):\n\n    x, y = df_blobs[['x1', 'x2']], df_blobs['y']\n    kmeans = KMeans(\n       init=initial_centroids, max_iter=500, n_clusters=4, random_state=7\n    )\n    y_pred = kmeans.fit_predict(x)\n    plot_2d_clusters(x, y_pred, axs[i])\n\n    axs[i].plot(\n       kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], 'k^'\n    )\n```", "```py\nfrom sklearn.cluster import AgglomerativeClustering\n\nx, y = df_blobs[['x1', 'x2']], df_blobs['y']\n\nagglo = AgglomerativeClustering(n_clusters=4)\ny_pred = agglo.fit_predict(x)\n\n```", "```py\nagglo.children_[-5:]\n```", "```py\narray([[182, 193],\n       [188, 192],\n       [189, 191],\n       [194, 195],\n       [196, 197]])\n```", "```py\ndef get_children(node, n_samples):\n    if node[0] >= n_samples:\n        child_cluster_id = node[0] - n_samples\n        left = get_children(\n            agglo.children_[child_cluster_id], \n            n_samples\n        )\n    else:\n        left = node[0]\n\n    if node[1] >= n_samples:\n        child_cluster_id = node[1] - n_samples\n        right = get_children(\n            agglo.children_[child_cluster_id], \n            n_samples\n        )\n    else:\n        right = node[1]\n\n    return [left, right]\n```", "```py\nroot = agglo.children_[-1]\nn_samples = df_blobs.shape[0]\ntree = get_children(root, n_samples)\n```", "```py\n[[[46, [[25, 73], [21, 66]]], [87, 88]],\n [[[22, 64], [4, [49, 98]]],\n  [[19, [55, 72]], [[37, 70], [[[47, 82], [13, [39, 92]]], [2, [8, 35]]]]]]]\n```", "```py\ndef flatten(sub_tree, flat_list):\n    if type(sub_tree) is not list:\n        flat_list.append(sub_tree)\n    else:\n        r, l = sub_tree\n        flatten(r, flat_list)\n        flatten(l, flat_list)\n```", "```py\nflat_list = []\nflatten(tree[0][0], flat_list)\nprint(flat_list)\n```", "```py\nn_samples = x.shape[0]\ny_pred_dash = np.zeros(n_samples)\nfor i, j, label in [(0,0,0), (0,1,1), (1,0,2), (1,1,3)]:\n    flat_list = []\n    flatten(tree[i][j], flat_list)\n    for sample_index in flat_list:\n        y_pred_dash[sample_index] = label\n```", "```py\nfrom sklearn.metrics import adjusted_rand_score\nadjusted_rand_score(y_pred, y_pred_dash)\n```", "```py\nfrom sklearn.datasets import make_circles\nx, y = make_circles(n_samples=150, factor=0.5, noise=0.05, random_state=7)\ndf_circles = pd.DataFrame({'x1': x[:,0], 'x2': x[:,1], 'y': y})\n```", "```py\nfrom sklearn.cluster import AgglomerativeClustering\n\nlinkage_options = ['complete', 'single']\n\nfig, axs = plt.subplots(1, len(linkage_options) + 1, figsize=(14, 6))\n\nx, y = df_circles[['x1', 'x2']], df_circles['y']\n\nplot_2d_clusters(x, y, axs[0])\naxs[0].set_title(f'{axs[0].get_title()}\\nActuals')\n\nfor i, linkage in enumerate(linkage_options, 1):\n\n    y_pred = AgglomerativeClustering(\n        n_clusters=2, affinity='manhattan', linkage=linkage\n    ).fit_predict(x)\n\n    plot_2d_clusters(x, y_pred, axs[i])\n\n    axs[i].set_title(f'{axs[i].get_title()}\\nAgglomerative\\nLinkage= {linkage}')\n```", "```py\nfrom sklearn.datasets import make_circles\nx, y = make_circles(n_samples=150, factor=0.5, noise=0.08, random_state=7)\ndf_circles = pd.DataFrame({'x1': x[:,0], 'x2': x[:,1], 'y': y})\n```", "```py\nfrom sklearn.cluster import DBSCAN\n\neps_options = [0.1, 1.0, 2.0, 5.0]\n\nfig, axs = plt.subplots(1, len(eps_options) + 1, figsize=(14, 6))\n\nx, y = df_blobs[['x1', 'x2']], df_blobs['y']\n\nplot_2d_clusters(x, y, axs[0])\naxs[0].set_title(f'{axs[0].get_title()}\\nActuals')\n\nfor i, eps in enumerate(eps_options, 1):\n\n    y_pred = DBSCAN(eps=eps, min_samples=3, metric='euclidean').fit_predict(x)\n\n    plot_2d_clusters(x, y_pred, axs[i])\n    axs[i].set_title(f'{axs[i].get_title()}\\nDBSCAN\\neps = {eps}')\n```", "```py\nfrom sklearn.cluster import DBSCAN\n\nmin_samples_options = [3, 5, 10]\n\nfig, axs = plt.subplots(1, len(min_samples_options) + 1, figsize=(14, 6))\n\nx, y = df_circles[['x1', 'x2']], df_circles['y']\n\nplot_2d_clusters(x, y, axs[0])\naxs[0].set_title(f'{axs[0].get_title()}\\nActuals')\n\nfor i, min_samples in enumerate(min_samples_options, 1):\n\n    y_pred = DBSCAN(\n        eps=0.25, min_samples=min_samples, metric='euclidean', n_jobs=-1\n    ).fit_predict(x)\n\n    plot_2d_clusters(x, y_pred, axs[i])\n\n    axs[i].set_title(f'{axs[i].get_title()}\\nDBSCAN\\nmin_samples = {min_samples}')\n```", "```py\nfrom sklearn.neighbors import NearestNeighbors\n\nx = df_circles[['x1', 'x2']]\ndistances, _ = NearestNeighbors(n_neighbors=2).fit(x).kneighbors()\n```", "```py\npd.Series(distances[:,-1]).sort_values().reset_index(drop=True).plot() \n```"]