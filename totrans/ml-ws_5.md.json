["```py\ncost = -(y * log(yhat) + (1-y) *(1-yhat))\n```", "```py\nNew weight = old weight – derivative rate * learning rate\nNew bias = old bias – derivative rate * learning rate\n```", "```py\n    import pandas as pd\n    from sklearn.neural_network import MLPClassifier\n    from sklearn.metrics import accuracy_score\n    ```", "```py\n    data = pd.read_csv(\"fertility_Diagnosis.csv\", header=None)\n    ```", "```py\n    X = data.iloc[:,:9]\n    Y = data.iloc[:,9]\n    ```", "```py\n    model = MLPClassifier(random_state=101)\n    model = model.fit(X, Y)\n    ```", "```py\n    model = MLPClassifier(random_state=101, max_iter =1200)\n    model = model.fit(X, Y)\n    ```", "```py\n    pred = model.predict([[-0.33,0.69,0,1,1,0,0.8,0,0.88]])\n    print(pred)\n    ```", "```py\n    pred = model.predict(X)\n    score = accuracy_score(Y, pred)\n    print(score)\n    ```", "```py\nfrom sklearn.neural_network import MLPClassifier\nmodel = MLPClassifier(random_state=101, max_iter = 500, \\\n                      hidden_layer_sizes=(100,100,100))\nmodel = model.fit(X_train, Y_train)\n```"]