["```py\nfrom sklearn import datasets\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n%matplotlib inline\n\niris = datasets.load_iris()\niris_X = iris.data\ny = iris.target\n```", "```py\nfrom sklearn import decomposition\n```", "```py\npca = decomposition.PCA()\npca\n\nPCA(copy=True, iterated_power='auto', n_components=None, random_state=None,\n  svd_solver='auto', tol=0.0, whiten=False)\n```", "```py\niris_pca = pca.fit_transform(iris_X)\niris_pca[:5]\n\narray([[ -2.68420713e+00,   3.26607315e-01,  -2.15118370e-02,\n          1.00615724e-03],\n       [ -2.71539062e+00,  -1.69556848e-01,  -2.03521425e-01,\n          9.96024240e-02],\n       [ -2.88981954e+00,  -1.37345610e-01,   2.47092410e-02,\n          1.93045428e-02],\n       [ -2.74643720e+00,  -3.11124316e-01,   3.76719753e-02,\n         -7.59552741e-02],\n       [ -2.72859298e+00,   3.33924564e-01,   9.62296998e-02,\n         -6.31287327e-02]])\n```", "```py\npca.explained_variance_ratio_\narray([ 0.92461621,  0.05301557,  0.01718514,  0.00518309])\n```", "```py\npca = decomposition.PCA(n_components=2)\niris_X_prime = pca.fit_transform(iris_X)\niris_X_prime.shape\n(150L, 2L)\n```", "```py\npca.explained_variance_ratio_.sum()\n0.97763177502480336\n```", "```py\nfig = plt.figure(figsize=(20,7))\nax = fig.add_subplot(121)\nax.scatter(iris_X[:,0],iris_X[:,1],c=y,s=40)\nax.set_title('Before PCA')\n\nax2 = fig.add_subplot(122)\nax2.scatter(iris_X_prime[:,0],iris_X_prime[:,1],c=y,s=40)\nax2.set_title('After PCA')\n```", "```py\npca = decomposition.PCA(n_components=.98)\niris_X_prime = pca.fit(iris_X).transform(iris_X)\npca.explained_variance_ratio_.sum()\n0.99481691454981014\n```", "```py\nfrom sklearn import preprocessing\n\niris_X_scaled = preprocessing.scale(iris_X)\npca = decomposition.PCA(n_components=2)\niris_X_scaled = pca.fit_transform(iris_X_scaled)\n```", "```py\nfig = plt.figure(figsize=(20,7))\nax = fig.add_subplot(121)\nax.scatter(iris_X_prime[:,0],iris_X_prime[:,1],c=y,s=40)\nax.set_title('Regular PCA')\n\nax2 = fig.add_subplot(122)\nax2.scatter(iris_X_scaled[:,0],iris_X_scaled[:,1],c=y,s=40)\nax2.set_title('Scaling followed by PCA')\n```", "```py\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\n\npipe = Pipeline([('scaler', StandardScaler()), ('pca',decomposition.PCA(n_components=2))])\niris_X_scaled = pipe.fit_transform(iris_X)\n```", "```py\nfrom sklearn import datasets\niris = datasets.load_iris()\niris_X = iris.data\nfrom sklearn.decomposition import FactorAnalysis\n```", "```py\nfa = FactorAnalysis(n_components=2)\niris_two_dim = fa.fit_transform(iris.data)\niris_two_dim[:5]\narray([[-1.33125848, -0.55846779],\n       [-1.33914102,  0.00509715],\n       [-1.40258715,  0.307983  ],\n       [-1.29839497,  0.71854288],\n       [-1.33587575, -0.36533259]])\n```", "```py\nfrom sklearn import datasets, decomposition\niris = datasets.load_iris()\niris_X = iris.data\n```", "```py\nkpca = decomposition.KernelPCA(kernel='cosine', n_components=2)\niris_X_prime = kpca.fit_transform(iris_X)\n```", "```py\nfrom sklearn.datasets import load_iris\niris = load_iris()\niris_X = iris.data\ny = iris.target\n```", "```py\nfrom sklearn.decomposition import TruncatedSVD\nsvd = TruncatedSVD(2)\niris_transformed = svd.fit_transform(iris_X)\n```", "```py\nsvd.explained_variance_ratio_\narray([ 0.53028106,  0.44685765])\n```", "```py\nfrom scipy.linalg import svd\nimport numpy as np\nD = np.array([[1, 2], [1, 3], [1, 4]])\nD\n\narray([[1, 2],\n[1, 3],\n[1, 4]])\n\nU, S, V = svd(D, full_matrices=False)\n\nU.shape, S.shape, V.shape\n((3L, 2L), (2L,), (2L, 2L))\n```", "```py\nnp.dot(U.dot(np.diag(S)), V)\n\narray([[1, 2],\n[1, 3],\n[1, 4]])\n```", "```py\nnew_S = S[0]\nnew_U = U[:, 0]\nnew_U.dot(new_S)\n\narray([-2.20719466, -3.16170819, -4.11622173])\n```", "```py\ntsvd = TruncatedSVD(2)\ntsvd.fit(iris_X)\ntsvd.transform(iris_X)\n```", "```py\nfrom sklearn.datasets import load_iris\niris = load_iris()\niris_X = iris.data\ny = iris.target\n```", "```py\nX_train = iris_X[::2]\nX_test = iris_X[1::2]\ny_train = y[::2]\ny_test = y[1::2]\n```", "```py\nfrom sklearn.decomposition import DictionaryLearning\n```", "```py\ndl = DictionaryLearning(3)\n```", "```py\ntransformed = dl.fit_transform(X_train)\ntransformed[:5]\n\narray([[ 0\\.        ,  6.34476574,  0\\.        ],\n       [ 0\\.        ,  5.83576461,  0\\.        ],\n       [ 0\\.        ,  6.32038375,  0\\.        ],\n       [ 0\\.        ,  5.89318572,  0\\.        ],\n       [ 0\\.        ,  5.45222715,  0\\.        ]])\n```", "```py\ntest_transform = dl.transform(X_test)\n```", "```py\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\n\nfig = plt.figure(figsize=(14,7))\nax = fig.add_subplot(121, projection='3d')\nax.scatter(transformed[:,0],transformed[:,1],transformed[:,2],c=y_train,marker = '^')\nax.set_title(\"Training Set\")\n\nax2 = fig.add_subplot(122, projection='3d')\nax2.scatter(test_transform[:,0],test_transform[:,1],test_transform[:,2],c=y_test,marker = '^')\nax2.set_title(\"Testing Set\")\n```", "```py\nfrom sklearn.datasets import load_iris\niris = load_iris()\niris_X = iris.data\ny = iris.target\n```", "```py\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE, MDS, Isomap\n\n#Load visualization library\nimport matplotlib.pyplot as plt\n%matplotlib inline\n```", "```py\niris_pca = PCA(n_components = 2).fit_transform(iris_X)\niris_tsne = TSNE(learning_rate=200).fit_transform(iris_X)\n\niris_MDS = MDS(n_components = 2).fit_transform(iris_X)\niris_ISO = Isomap(n_components = 2).fit_transform(iris_X)\n```", "```py\nplt.figure(figsize=(20, 10))\nplt.subplot(221)\nplt.title('PCA')\nplt.scatter(iris_pca [:, 0], iris_pca [:, 1], c=y)\n\nplt.subplot(222)\nplt.scatter(iris_tsne[:, 0], iris_tsne[:, 1], c=y)\nplt.title('TSNE')\n\nplt.subplot(223)\nplt.scatter(iris_MDS[:, 0], iris_MDS[:, 1], c=y)\nplt.title('MDS')\n\nplt.subplot(224)\nplt.scatter(iris_ISO[:, 0], iris_ISO[:, 1], c=y)\nplt.title('ISO')\n```", "```py\niris_pca_then_tsne = TSNE(learning_rate=200).fit_transform(iris_pca)\nplt.figure(figsize=(10, 7))\nplt.scatter(iris_pca_then_tsne[:, 0], iris_pca_then_tsne[:, 1], c=y)\nplt.title(\"PCA followed by TSNE\")\n```", "```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.datasets import load_iris\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.svm import SVC, LinearSVC\nfrom sklearn.decomposition import PCA, NMF, TruncatedSVD\nfrom sklearn.manifold import Isomap\n%matplotlib inline\n```", "```py\npipe = Pipeline([\n ('reduce_dim', PCA()),\n ('classify', SVC())\n])\n```", "```py\nparam_grid = [\n {\n 'reduce_dim': [PCA(), NMF(),Isomap(),TruncatedSVD()],\n 'reduce_dim__n_components': [2, 3],\n 'classify' : [SVC(), LinearSVC()],\n 'classify__C': [1, 10, 100, 1000]\n },\n]\n```", "```py\ngrid = GridSearchCV(pipe, cv=3, n_jobs=-1, param_grid=param_grid)\niris = load_iris()\ngrid.fit(iris.data, iris.target)\n```", "```py\ngrid.best_params_\n\n{'classify': SVC(C=10, cache_size=200, class_weight=None, coef0=0.0,\n   decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n   max_iter=-1, probability=False, random_state=None, shrinking=True,\n   tol=0.001, verbose=False),\n 'classify__C': 10,\n 'reduce_dim': PCA(copy=True, iterated_power='auto', n_components=3, random_state=None,\n   svd_solver='auto', tol=0.0, whiten=False),\n 'reduce_dim__n_components': 3}\n\ngrid.best_score_\n\n0.97999999999999998\n```", "```py\nimport pandas as pd\nresults_df = pd.DataFrame(grid.cv_results_)\n```"]