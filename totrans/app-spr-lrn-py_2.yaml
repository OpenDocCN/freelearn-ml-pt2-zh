- en: '*Chapter 2*'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Exploratory Data Analysis and Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Learning Objectives
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By the end of the chapter, you will be able to:'
  prefs: []
  type: TYPE_NORMAL
- en: Explain the importance of data exploration and communicate the summary statistics
    of a dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualize patterns in missing values in data and be able to replace null values
    appropriately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identify continuous features and categorical features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualize distributions of values across individual variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe and analyze relationships between different types of variables using
    correlation and visualizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter takes us through how to perform exploration and analysis on a new
    dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Say we have a problem statement that involves predicting whether a particular
    earthquake caused a tsunami or not. How do we decide what model to use? What do
    we know about the data we have? Nothing! But if we don't know and understand our
    data, chances are we'll end up building a model that's not very interpretable
    or reliable.
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to data science, it's important to have a thorough understanding
    of the data we're dealing with, in order to generate features that are highly
    informative and, consequently, to build accurate and powerful models.
  prefs: []
  type: TYPE_NORMAL
- en: In order to gain this understanding, we perform an exploratory analysis on the
    data to see what the data can tell us about the relationships between the features
    and the target variable. Getting to know our data will even help us interpret
    the model we build and identify ways we can improve its accuracy.
  prefs: []
  type: TYPE_NORMAL
- en: The approach we take to achieve this is to allow the data to reveal its structure
    or model, which helps gain some new, often unsuspected, insight into the data.
    Let's learn more about this approach.
  prefs: []
  type: TYPE_NORMAL
- en: Exploratory Data Analysis (EDA)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Exploratory data analysis** (**EDA**) is defined as an approach to analyzing
    datasets to summarize their main characteristics, often with visual methods.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The purpose of EDA is to:'
  prefs: []
  type: TYPE_NORMAL
- en: Discover patterns within a dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spot anomalies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Form hypotheses about the behavior of data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Validate assumptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Everything from basic summary statistics to complex visualizations help us gain
    an intuitive understanding of the data itself, which is highly important when
    it comes to forming new hypotheses about the data and uncovering what parameters
    affect the target variable. Often, discovering how the target variable varies
    across a single feature gives us an indication of how important a feature might
    be, and a variation across a combination of several features helps us come up
    with ideas for new informative features to engineer.
  prefs: []
  type: TYPE_NORMAL
- en: Most exploration and visualization is intended to understand the relationship
    between the features and the target variable. This is because we want to find
    out what relationships exist (or don't exist) between the data we have and the
    values we want to predict.
  prefs: []
  type: TYPE_NORMAL
- en: A very basic domain knowledge is usually necessary to be able to understand
    both the problem statement itself as well as what the data is telling us. In this
    chapter, we'll look at the ways we can get to know more about the data we have
    by analyzing the features we have.
  prefs: []
  type: TYPE_NORMAL
- en: 'EDA can tell us about:'
  prefs: []
  type: TYPE_NORMAL
- en: Features that are unclean, have missing values, or have outliers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features that are informative and are a good indicator of the target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The kind of relationships features have with the target
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Further features that the data might need that we don't already have
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Edge cases you might need to account for separately
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filters you might need to apply on the dataset
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The presence of incorrect or fake data points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we've looked at why EDA is important and what it can tell us, let's
    talk about what exactly EDA involves. EDA can involve anything from looking at
    basic summary statistics to visualizing complex trends over multiple variables.
    However, even simple statistics and plots can be powerful tools, as they may reveal
    important facts about the data that could change our modeling perspective. When
    we see plots representing data, we are able to easily detect trends and patterns,
    compared to just raw data and numbers. These visualizations further allow us to
    ask questions such as "How?" and "Why?", and form hypotheses about the dataset
    that can be validated by further visualizations. This is a continuous process
    that leads to a deeper understanding of the data. This chapter will introduce
    you to some of the basic tools that can be used to explore any dataset while keeping
    in mind the ultimate problem statement.
  prefs: []
  type: TYPE_NORMAL
- en: We'll start by walking through some basic summary statistics and how to interpret
    them, followed by a section on finding, analyzing, and dealing with missing values.
    Then we'll look at univariate relationships, that is, distributions and the behavior
    of individual variables. This will be followed by the final section on exploring
    relationships between variables. In this chapter, you will be introduced to types
    of plots that can be used to gain a basic overview of the dataset and its features,
    as well as how to gain insights by creating visualizations that combine several
    features, and we'll then work through some examples on how they can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The dataset that we will use for our exploratory analysis and visualizations
    has been taken from the *Significant Earthquake Database* from NOAA, available
    as a public dataset on Google BigQuery (`table ID: ''bigquery-public-data.noaa_significant_earthquakes.earthquakes''`).
    We will be using a subset of the columns available, the metadata for which is
    available at [https://console.cloud.google.com/bigquery?project=packt-data&folder&organizationId&p=bigquery-public-data&d=noaa_significant_earthquakes&t=earthquakes&page=table](https://console.cloud.google.com/bigquery?project=packt-data&folder&organizationId&p=bigquery-public-data&d=noaa_significant_earthquakes&t=earthquakes&page=table),
    and loading it into a pandas DataFrame to perform the exploration. We''ll primarily
    be using Matplotlib for most of our visualizations, along with Seaborn and Missingno
    for some. It is to be noted, however, that Seaborn merely provides a wrapper over
    Matplotlib''s functionalities, so anything that is plotted using Seaborn can also
    be plotted using Matplotlib. We''ll try to keep things interesting by mixing up
    visualizations from both libraries.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The exploration and analysis will be conducted keeping in mind a sample problem
    statement: *Given the data we have, we want to predict whether an earthquake caused
    a tsunami or not*. This will be a classification problem (more on this in *Chapter
    4*, *Classification*) where the target variable is the `flag_tsunami` column.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 10: Importing Libraries for Data Exploration'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Before we begin, let''s first import the required libraries, which we will
    be using for most of our data manipulations and visualizations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a Jupyter notebook, import the following libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `%matplotlib inline` command allows Jupyter to display the plots inline
    within the notebook itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can also read in the metadata containing the data types for each column,
    which are stored in the form of a JSON file. Do this using the following command.
    This command opens the file in readable format and uses the `json` library to
    read the file into a dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, let's get started.
  prefs: []
  type: TYPE_NORMAL
- en: Summary Statistics and Central Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to find out what our data really looks like, we use a technique known
    as **data profiling**. This is defined as the process of examining the data available
    from an existing information source (for example, a database or a file) and collecting
    statistics or informative summaries about that data. The goal is to make sure
    that you understand your data well and are able to identify any challenges that
    the data may pose early on in the project, which is done by summarizing the dataset
    and assessing its structure, content, and quality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Data profiling includes collecting descriptive statistics and data types. Here
    are a few commands that are commonly used to get a summary of a dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data.info()`: This command tells us how many non-null values there are there
    in each column, along with the data type of the values (non-numeric types are
    represented as `object` types).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.describe()`: This gives us basic summary statistics for all the numerical
    columns in the DataFrame, such as the count of non-null values, minimum and maximum,
    the mean and standard deviation, and the quarter-wise percentiles for all numerical
    features. If there are any string-type features, it does not include a summary
    of those.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`data.head()` and `data.tail()`: These commands display the first five and
    last five rows of the DataFrame respectively. While the previous commands give
    us a general idea of the dataset, it is a good idea to get a closer look at the
    actual data itself, which can be done using these commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard Deviation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The standard deviation represents how widespread the distribution of the values
    of *x* are.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a set of numerical values, xi, the standard deviation is given by:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: Standard deviation equation](img/C12622_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: Standard deviation equation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, 𝝈 is the standard deviation, *N* is the number of data points, and 𝝁 is
    the mean.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we have a set of 10 values, *x = [0,1,1,2,3,4,2,2,0,1]*. The mean, 𝝁, will
    be the sum of these values, divided by 10\. That is, 𝝁 = 1.6:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: Mean square values for x](img/C12622_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Mean square values for x'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Then, standard deviation = sqrt(14.4/10) = 1.2.
  prefs: []
  type: TYPE_NORMAL
- en: Percentiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For a set of values, the *n**th* percentile is equal to the value that is greater
    than *n%* of values in the set. For example, the 50*th* percentile is the value
    in the dataset that has as many values greater than it as it does that are less
    than it. Additionally, the fiftieth percentile of a dataset is also known as its
    median, and the twenty-fifth and seventy-fifth percentiles are also known as the
    lower and upper quartiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Say we have the same set of 10 values as earlier, *x = [0,1,1,2,3,4,2,2,0,1]*.
    Let''s first sort this list of values. Upon sorting, we have *x = [0,0,1,1,1,2,2,2,3,4]*.
    To find the twenty-fifth percentile, let''s first calculate the index at which
    the value occurs: *i = (p/100) * n)*, where *p = 25* and *n = 10*. Then, *i =
    2.5*.'
  prefs: []
  type: TYPE_NORMAL
- en: Since *i* is not an integer, we round it up to 3 and take the third element
    in the list as the twenty-fifth percentile. The twenty-fifth percentile in the
    given list would then be *1*, which is the third element in our sorted list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 11: Summary Statistics of Our Dataset'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we will use the summary statistics functions we read about
    previously to get a basic idea of our dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Read the earthquakes data into a `data` pandas DataFrame and use the `dtyp`
    dictionary we read using the `json` library in the previous exercise to specify
    the data types of each column in the CSV:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `data.info()` function to get an overview of the dataset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.3: Overview of the dataset](img/C12622_02_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.3: Overview of the dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Print the first five and last five rows of the dataset. The first five rows
    are printed as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.4: The first five rows](img/C12622_02_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.4: The first five rows'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The last five rows are printed as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.5: The last five rows](img/C12622_02_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.5: The last five rows'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see in these outputs that there are 28 columns, but not all of them are
    displayed. Only the first 10 and last 10 columns are displayed, with the ellipses
    representing the fact that there are columns in between that are not displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use `data.describe()` to find the summary statistics of the dataset. Run `data.describe().T`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `.T` indicates that we're taking a transpose of the DataFrame to which
    it is applied, that is, turning the columns into rows and vice versa. Applying
    it to the `describe()` function allows us to see the output more easily with each
    row in the transposed DataFrame now corresponding to the statistics for a single
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We should get an output like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.6: Summary statistics](img/C12622_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Summary statistics'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice here that the `describe()` function only shows the statistics for columns
    with numerical values. This is because we cannot calculate the statistics for
    the columns having non-numerical values.
  prefs: []
  type: TYPE_NORMAL
- en: Missing Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When there is no value (that is, a null value) recorded for a particular feature
    in a data point, we say the data is missing. Having missing values in a real dataset
    is inevitable; no dataset is ever perfect. However, it is important to understand
    why the data is missing, and if there is a factor that has affected the loss of
    data. Appreciating and recognizing this allows us to handle the remaining data
    in an appropriate manner. For example, if the data is missing randomly, then it's
    highly likely that the remaining data is still representative of the population.
    However, if the missing data is not random in nature and we assume that it is,
    it could bias our analysis and subsequent modeling.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at the common reasons (or mechanisms) for missing data:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Missing Completely at Random** (**MCAR**): Values in a dataset are said to
    be MCAR if there is no correlation whatsoever between the value missing and any
    other recorded variable or external parameter. This means that the remaining data
    is still representative of the population, though this is rarely the case and
    taking missing data to be completely random is usually an unrealistic assumption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, in a study that involves determining the reason for obesity among
    K12 children, MCAR is when the parents forgot to take their kids to the clinic
    for the study.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Missing at Random** (**MAR**): If the case where the data is missing is related
    to the data that was recorded rather than the data that was not, then the data
    is said to be MAR. Since it''s unfeasible to statistically verify whether data
    is MAR, we''d have to depend on whether it''s a reasonable possibility or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the K12 study, missing data in this case is due to parents moving to a
    different city, hence the children had to leave the study; *missingness* has nothing
    to do with the study itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Missing Not at Random** (**MNAR**): Data that is neither MAR nor MCAR is
    said to be MNAR. This is the case of a non-ignorable non-response, that is, the
    value of the variable that''s missing is related to the reason it is missing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Continuing with the example of the case study, data would be MNAR if the parents
    were offended by the nature of the study and did not want their children to be
    bullied, so they withdrew their kids from the study.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Finding Missing Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, now that we know why it's important to familiarize ourselves with the reasons
    behind why our data is missing, let's talk about how we can find these missing
    values in a dataset. For a pandas DataFrame, this is most commonly done using
    the `.isnull()` method on a DataFrame to create a mask of the null values (that
    is, a DataFrame of Boolean values) indicating where the null values exist—a `True`
    value at any position indicates a null value, while a `False` value indicates
    the existence of a valid value at that position.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `.isnull()` method can be used interchangeably with the `.isna()` method
    for pandas DataFrames. Both these methods do exactly the same thing—the reason
    there are two methods to do the same thing is because pandas DataFrames were originally
    based on R DataFrames, and hence have reproduced much of the syntax and ideas
    in the latter.
  prefs: []
  type: TYPE_NORMAL
- en: 'It may not be immediately obvious whether the missing data is random or not:
    discovering the nature of missing values across features in a dataset is possible
    through two common visualization techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Nullity matrix**: This is a data-dense display that lets us quickly visualize
    the patterns in data completion. It gives us a quick glance at how the null values
    within a feature (and across features) are distributed, how many there are, and
    how often they appear with other features.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Nullity-correlation heatmap**: This heatmap visually describes the nullity
    relationship (or a data completeness relationship) between each pair of features,
    that is, it measures how strongly the presence or absence of one variable affects
    the presence of another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Akin to regular correlation, nullity correlation values range from -1 to 1:
    the former indicating that one variable appears when the other definitely does
    not, and the latter indicating the simultaneous presence of both variables. A
    value of 0 implies that one variable having a null value has no effect on the
    other being null.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Exercise 12: Visualizing Missing Values'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s analyze the nature of the missing values by first looking at the count
    and percentage of missing values for each feature, then plotting a nullity matrix
    and correlation heatmap using the `missingno` library in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: Calculate the count and percentage of missing values in each column and arrange
    these in decreasing order. We will use the `.isnull()` function on the DataFrame
    to get a mask. The count of null values in each column can then be found using
    the `.sum()` function over the mask DataFrame. Similarly, the fraction of null
    values can be found using `.mean()` over the mask DataFrame and multiplied by
    100 to convert it into a percentage.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, we combine the total and percentage of null values into a single DataFrame
    using the `pd.concat()` function, and subsequently sort the rows by percentage
    of missing values and print the DataFrame:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.7: Count and percentage of missing values in each column](img/C12622_02_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.7: Count and percentage of missing values in each column'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we can see that the `state`, `total_damage_millions_dollars`, and `damage_millions_dollars`
    columns have over 90% missing values, which means that data for less than 10%
    of data points in the dataset are available for these columns. On the other hand,
    `year`, `flag_tsunami`, `country`, and `region_code` have no missing values.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the nullity matrix. First, we find the list of columns that have any null
    values in them using the `.any()` function on the mask DataFrame from the previous
    step. Then, we use the `missingno` library to plot the nullity matrix for a random
    sample of 500 data points from our dataset, for only those columns that have missing
    values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.8: The nullity matrix](img/C12622_02_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.8: The nullity matrix'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, black lines represent non-nullity while the white lines indicate the presence
    of a null value in that column. At a glance, `location_name` appears to be completely
    populated (we know from the previous step that there is, in fact, only one missing
    value in this column), while `latitude` and `longitude` seem mostly complete,
    but spottier.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The spark line at the right summarizes the general shape of the data completeness
    and points out the rows with the maximum and minimum nullity in the dataset.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot the nullity correlation heatmap. We will plot the nullity correlation
    heatmap using the `missingno` library for our dataset, for only those columns
    that have missing values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.9: The nullity correlation heatmap](img/C12622_02_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: The nullity correlation heatmap'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we can also see some boxes labeled `injuries` and `total_injuries`, which
    tells us that there are a few records that have one or the other, but not both.
    These types of cases will require special attention—if the correlation between
    the values of the variables themselves is high, it means that having both is not
    a value and one of the two can be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: Imputation Strategies for Missing Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are multiple ways of dealing with missing values in a column. The simplest
    way is to simply delete rows having missing values; however, this can result in
    the loss of valuable information from other columns. Another option is to impute
    the data, that is, replace the missing values with a valid value inferred from
    the known part of the data. The common ways in which this can be done are listed
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new value that is distinct from the other values to replace the missing
    values in the column so as to differentiate those rows altogether. Then, use a
    non-linear machine learning algorithm (such as ensemble models or support vectors)
    that can separate the values out.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an appropriate central value from the column (mean, median, or mode) to
    replace the missing values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use a model (such as a K-nearest neighbors or a Gaussian mixture model) to learn
    the best value with which to replace the missing values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python has a few functions that are useful for replacing null values in a column
    with a static value. One way to do this is using the inherent pandas `.fillna(0)`
    function: there is no ambiguity in imputation here—the static value with which
    to substitute the null data point in the column is the argument being passed to
    the function (the value in the brackets).'
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if the number of null values in a column is significant and it''s
    not immediately obvious what the appropriate central value is that can be used
    to replace each null value, then we can either delete the rows having null values
    or delete the column altogether from the modeling perspective, as it may not add
    any significant value. This can be done by using the `.dropna()` function on the
    DataFrame. The parameters that can be passed to the function are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`axis`: This defines whether to drop rows or columns, which is determined by
    assigning the parameter a value of 0 or 1 respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`how`: A value of `all` or `any` can be assigned to this parameter to indicate
    whether the row/column should contain all null values to drop the column, or whether
    to drop the column if there is at least one null value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`thresh`: This defines the minimum number of null values the row/column should
    have in order to be dropped.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, if an appropriate replacement for a null value for a categorical
    feature cannot be determined, a possible alternative to deleting the column is
    to create a new category in the feature that can represent the null values.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: If it is immediately obvious how a null value for a column can be replaced from
    an intuitive understanding or domain knowledge, then we can replace the value
    on the spot. In many cases, however, such inferences become more obvious at later
    stages in the exploration process. In these cases, we can substitute null values
    as and when we find an appropriate way to do so.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 13: Imputation Using pandas'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's look at missing values and replace them with zeros in time-based (continuous)
    features having at least one null value (month, day, hour, minute, and second).
    We do this because for cases where we do not have recorded values, it would be
    safe to assume that the events take place at the beginning of the time duration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a list containing the names of the columns whose values we want to impute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Impute the null values using `.fillna()`. We will replace the missing values
    in these columns with `0` using the inherent pandas `.fillna()` function and pass
    `0` as an argument to the function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `.info()` function to view null value counts for the imputed columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.10: Null value counts](img/C12622_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Null value counts'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see now, all values for our features in the DataFrame are now non-null.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 14: Imputation Using scikit-learn'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s replace the null values in the description-related categorical features
    using scikit-learn''s `SimpleImputer` class. In *Exercise 12: Visualizing Missing
    Values*, we saw that almost all of these features comprised more than 50% of null
    values in the data. Replacing these null values with a central value might bias
    any model we try to build using the features, deeming them irrelevant. Let''s
    instead replace the null values with a separate category, having value `NA`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a list containing the names of the columns whose values we want to impute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create an object of the `SimpleImputer` class. Here, we first create an `imp`
    object of the `SimpleImputer` class and initialize it with parameters that represent
    how we want to impute the data. The parameters we will pass to initialize the
    object are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`missing_values`: This is the placeholder for the missing values, that is,
    all occurrences of the values in the `missing_values` parameter will be imputed.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`strategy`: This is the imputation strategy, which can be one of `mean`, `median`,
    `most_frequent` (that is, the mode), or `constant`. While the first three can
    only be used with numeric data and will replace missing values using the specified
    central value along each column, the last one will replace missing values with
    a constant as per the `fill_value` parameter.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`fill_value`: This specifies the value with which to replace all occurrences
    of `missing_values`. If left to the default, the imputed value will be `0` when
    imputing numerical data and the `missing_value` string for strings or object data
    types:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Perform the imputation. We will use `imp.fit_transform()` to actually perform
    the imputation. It takes the DataFrame with null values as input and returns the
    imputed DataFrame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `.info()` function to view null value counts for the imputed columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.11: The null value counts](img/C12622_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: The null value counts'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Exercise 15: Imputation Using Inferred Values'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s replace the null values in the continuous `damage_millions_dollars`
    feature with information from the categorical `damage_description` feature. Although
    we may not know the exact dollar amount that was incurred, the categorical feature
    gives us information on the range of the amount that was incurred due to damage
    from the earthquake:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find how many rows have null `damage_millions_dollars` values, and how many
    of those have non-null `damage_description` values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.12: Count of rows with null values'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: As we can see, 3,849 of 5,594 null values can be easily substituted with the
    help of another variable.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the mean `damage_millions_dollars` value for each category. Since each
    of the categories in `damage_description` represent a range of values, we find
    the mean `damage_millions_dollars` value for each category from the non-null values
    already available. These provide a reasonable estimate for the most likely value
    for that category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.13: The mean damage_millions_dollars value for each category](img/C12622_02_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.13: The mean damage_millions_dollars value for each category'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Store the mean values as a dictionary. In this step, we will convert the DataFrame
    containing the mean values to a dictionary (a Python `dict` object) so that accessing
    them is convenient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Additionally, since the value for the newly created `NA` category (the imputed
    value in the previous exercise) was `NaN` and the value for the `0` category was
    absent (no rows had `damage_description` equal to `0` in the dataset), we explicitly
    added these values in the dictionary as well:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.14: The dictionary of mean values](img/C12622_02_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.14: The dictionary of mean values'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create a series of replacement values. For each value in the `damage_description`
    column, we map the categorical value onto the mean value using the `map` function.
    The `.map()` function is used to map the keys in the column to the corresponding
    values for each element from the `replacement_values` dictionary:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace null values in the column. We do this by using `np.where` as a ternary
    operator: the first argument is the mask, the second is the series from which
    to take the value if the mask is positive, and the third is the series from which
    to take the value if the mask is negative.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This ensures that the array returned by `np.where` only replaces the null values
    in `damage_millions_dollars` with values from the `imputed_values` series:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `.info()` function to view null value counts for the imputed columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.15: The null value counts](img/C12622_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: The null value counts'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see that, after replacement, there are no null values in the `damage_millions_dollars`
    column.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 2: Summary Statistics and Missing Values'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this activity, we''ll revise some of the summary statistics and missing
    value exploration we have looked at thus far in this chapter. We will be using
    a new dataset, taken from Kaggle''s *House Prices: Advanced Regression Techniques*
    competition (available at [https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data)
    or on GitHub at [https://github.com/TrainingByPackt/Applied-Supervised-Learning-with-Python](https://github.com/TrainingByPackt/Applied-Supervised-Learning-with-Python)).
    While the Earthquakes dataset used in the exercises is aimed at solving a classification
    problem (when the target variable has only discrete values), the dataset we will
    use in the activities will be aimed at solving a regression problem (when the
    target variable takes on a range of continuous values). We''ll use pandas functions
    to generate summary statistics and visualize missing values using a nullity matrix
    and nullity correlation heatmap.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to be performed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Read the data.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use pandas' `.info()` and `.describe()` methods to view the summary statistics
    of the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the total count and total percentage of missing values in each column of
    the DataFrame and display them for columns having at least one null value, in
    descending order of missing percentages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot the nullity matrix and nullity correlation heatmap.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the columns having more than 80% of values missing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace null values in the `FireplaceQu` column with `NA` values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 307.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Distribution of Values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we'll look at how individual variables behave—what kind of
    values they take, what the distribution across those values is, and how those
    distributions can be represented visually.
  prefs: []
  type: TYPE_NORMAL
- en: Target Variable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The target variable can either have values that are continuous (in the case
    of a regression problem) or discrete (as in the case of a classification problem).
    The problem statement we're looking at in this chapter involves predicting whether
    or not an earthquake caused a tsunami, that is, the `flag_tsunami` variable, which
    takes on two discrete values only—making it a classification problem.
  prefs: []
  type: TYPE_NORMAL
- en: One way of visualizing how many earthquakes resulted in tsunamis and how many
    didn't is a bar chart, where each bar represents a single discrete value of the
    variable, and the height of the bars is equal to the count of the data points
    having the corresponding discrete value. This gives us a good comparison of the
    absolute counts of each category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16: Plotting a Bar Chart'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s look at how many of the earthquakes in our dataset resulted in a tsunami.
    We will do this by using the `value_counts()` method over the column and directly
    using the `.plot(kind=''bar'')` function on the returned pandas series. Follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `plt.figure()` to initiate the plotting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, type in our primary plotting command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the display parameters and display the plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.16: Bar chart showing how many earthquakes resulted in a tsunami](img/C12622_02_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: Bar chart showing how many earthquakes resulted in a tsunami'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From this bar plot, we can see that most of the earthquakes did not result in
    tsunamis, and that less than one-third of the earthquakes did. This shows us that
    the dataset is slightly imbalanced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look more closely at what these Matplotlib commands do:'
  prefs: []
  type: TYPE_NORMAL
- en: '`plt.figure(figsize=(8,6))`: This command defines how big our plot should be,
    by providing width and height values. This is always the first command before
    any plotting command is written.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plt.xlabel()` and `plt.ylabel()`: These commands take a string as input, and
    allow us to specify what the labels for the *X* and *Y* axes on the plot should
    be.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plt.show()`: This is the final command written when plotting that displays
    the plot inline within the Jupyter notebook.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Categorical Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Categorical variables are ones that take discrete values representing different
    categories or levels of observation that can either be string objects, or integer
    values. For example, our target variable, `flag_tsunami`, is a categorical variable
    having two categories: `Tsu` and `No`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Categorical variables can be of two types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`location_name`. The values that this variable takes cannot be said to be ordered,
    that is, one location is not *greater* than the other. Similarly, more examples
    of such a variable would be color, types of footwear, ethnicity type, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`damage_description`, since each value represents an increasing value of damage
    incurred. Another example could be day of the week, which would have values from
    Monday to Sunday, which have some order associated with them and we know that
    Thursday comes after Wednesday but before Friday.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although ordinal variables can be represented by object data types, they are
    often represented as numerical data types as well, often making it difficult to
    differentiate between them and continuous variables.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: One of the major challenges faced when dealing with categorical variables in
    a dataset is high cardinality, that is, a large number of categories or distinct
    values with each value appearing a relatively small number of times. For example,
    `location_name` has a large number of unique values, with each value occurring
    a small fraction of times in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, non-numerical categorical variables will always require some form
    of preprocessing to be converted into a numerical format so that they can be ingested
    for training by a machine learning model. It can be a challenge to encode categorical
    variables numerically without losing out on contextual information that despite
    being easy for humans to interpret (due to domain knowledge or otherwise just
    plain common sense), would be hard for a computer to automatically understand.
    For example, a geographical feature such as country or location name by itself
    would give no indication of the geographical proximity of different values, but
    that might just be an important feature—what if earthquakes that occur at locations
    in South-East Asia trigger more tsunamis than those that occur in Europe? There
    would be no way of capturing that information by merely numerically encoding the
    feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 17: Datatypes for Categorical Variables'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s find which variables in our Earthquake dataset are categorical and which
    are continuous. As we now know, categorical variables can also have numerical
    values, so having a numeric data type doesn''t guarantee that a variable is continuous:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find all the columns that are numerical and object types. We use the `.select_dtypes()`
    method on the DataFrame to create a subset DataFrame having numeric (`np.number`)
    and categorical (`np.object`) columns, and then print the column names for each.
    For numeric columns, use this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.17: All columns that are numerical ](img/C12622_02_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.17: All columns that are numerical'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For categorical columns, use this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.18: All columns that are object types](img/C12622_02_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.18: All columns that are object types'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, it is evident that the columns of object type are categorical variables.
    To differentiate between the categorical and continuous variables from the numeric
    columns, let's see how many unique values there are for each of these features.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Find the number of unique values for numeric features. We use the `select_dtypes`
    method on the DataFrame to find the number of unique values in each column and
    sort the resulting series in ascending order. For numeric columns, use this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.19: Number of unique values for numeric features](img/C12622_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: Number of unique values for numeric features'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'For categorical columns, use this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.20: Number of unique values for categorical columns](img/C12622_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.20: Number of unique values for categorical columns'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: For the numeric variables, we can see that the top nine have significantly fewer
    unique values than the remaining rows, and it's likely that these are categorical
    variables. However, we must keep in mind that it is possible that some of them
    might just be continuous variables with a low range of rounded-up values. Also,
    `month` and `day` would not be considered categorical variables here.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 18: Calculating Category Value Counts'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For columns with categorical values, it would be useful to see what the unique
    values (categories) of the feature are, along with what the frequencies of these
    categories are, that is, how much does each distinct value occur in the dataset.
    Let''s find the number of occurrences of each `0` to `4` label and `NaN` values
    for the `injuries_description` categorical variable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `value_counts()` function on the `injuries_description` column to find
    the frequency of each category. Using `value_counts` gives us the frequencies
    of each value in decreasing order in the form of a pandas series:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output should be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.21: Frequency of each category](img/C12622_02_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.21: Frequency of each category'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Sort the values in increasing order of the ordinal variable. If we want the
    frequencies in the order of the values themselves, we can reset the index to give
    us a DataFrame and sort values by the index (that is, the ordinal variable):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 2.22: Sorted values](img/C12622_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.22: Sorted values'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Exercise 19: Plotting a Pie Chart'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Since our target variable in our sample data is categorical, the example in
    *Exercise 16: Plotting a Bar Chart* showed us one way of visualizing how the categorical
    values are distributed (using a bar chart). Another plot that can make it easy
    to see how each category functions as a fraction of the overall dataset is a pie
    chart. Let''s plot a pie chart to visualize the distribution of the discrete values
    of the `damage_description` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Format the data into the form that needs to be plotted. Here, we run `value_counts()`
    over the column and sort the series by index:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Plot the pie chart. The `plt.pie()` category plots the pie chart using the
    count data. We will use the same three steps for plotting as described in *Exercise
    16: Plotting a Bar Chart*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.23: Pie chart showing counts for damage_description categories](img/C12622_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.23: Pie chart showing counts for damage_description categories'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Continuous Data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Continuous variables can take any number of values and are usually integer
    (for example, number of deaths) or float data types (for example, the height of
    a mountain). It''s useful to get an idea of the basic statistics of the values
    in the feature: the minimum, maximum, and percentile values we see from the output
    of the `describe()` function gives us a fair estimate of this.'
  prefs: []
  type: TYPE_NORMAL
- en: However, for continuous variables, it is also very useful to see how the values
    are distributed in the range they operate in. Since we cannot simply find the
    counts of individual values, instead we order the values in ascending order, group
    them into evenly-sized intervals, and find the counts for each interval. This
    gives us the underlying frequency distribution, and plotting this gives us a histogram,
    which allows us to examine the shape, central values, and amount of variability
    in the data.
  prefs: []
  type: TYPE_NORMAL
- en: Histograms give us an easy view of the data that we're looking at. They tell
    us about the behavior of the values at a glance in terms of the underlying distribution
    (for example, a normal or exponential distribution), the presence of outliers,
    skewness, and more.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: It is easy to get confused between a bar chart and a histogram. The major difference
    is that a histogram is used to plot continuous data that has been binned to visualize
    the frequency distribution, while bar charts can be used for a variety of other
    use cases, including to represent categorical variables as we have done. Additionally,
    it is not just the height of the bar that indicates the frequency of that bin,
    but also the width of the bin itself, which is not the case in a bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common frequency distributions is a Gaussian (or normal) distribution.
    This is a symmetric distribution that has a bell-shaped curve, which indicates
    that the values near the middle of the range have the highest occurrences in the
    dataset with a symmetrically decreasing frequency of occurrences as we move away
    from the middle.
  prefs: []
  type: TYPE_NORMAL
- en: It is a probability distribution and the area under the curve equals one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24: Normal distribution](img/C12622_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.24: Normal distribution'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '**Skewness**'
  prefs: []
  type: TYPE_NORMAL
- en: A distribution is said to be skewed if it is not symmetric in nature, and skewness
    measures the asymmetry of a variable about its mean. The value can be positive
    or negative (or undefined). In the former case, the tail is on the right-hand
    side of the distribution, while the latter indicates that the tail is on the left-hand
    side.
  prefs: []
  type: TYPE_NORMAL
- en: However, it must be noted that a thick and short tail would have the same effect
    on the value of skewness as a long, thin tail.
  prefs: []
  type: TYPE_NORMAL
- en: '**Kurtosis**'
  prefs: []
  type: TYPE_NORMAL
- en: Kurtosis is a measure of the *tailedness* of the distribution of a variable
    and is used to measure the presence of outliers in one tail versus the other.
    A high value of kurtosis indicates a fatter tail and the presence of outliers.
    In a similar way to the concept of skewness, kurtosis also describes the shape
    of the distribution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 20: Plotting a Histogram'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s plot the histogram for the `eq_primary` feature using the Seaborn library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use `plt.figure()` to initiate the plotting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`sns.distplot()` is the primary command that we will use to plot the histogram.
    The first parameter is the one-dimensional data over which to plot the histogram,
    the bins parameter defines the number and size of the bins. Use this as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Display the plot using `plt.show()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.25: Histogram for the eq_primary feature](img/C12622_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.25: Histogram for the eq_primary feature'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The plot gives us a normed (or normalized) histogram, which means that the area
    under the bars of the histogram equals unity. Additionally, the line over the
    histogram is the **kernel density estimate**, which gives us an idea of what the
    probability distribution for the variable would look like.
  prefs: []
  type: TYPE_NORMAL
- en: From the plot, we can see that the values of `eq_primary` lie mostly between
    5 and 8, which means that most earthquakes had a magnitude with a moderate to
    high value, with barely any earthquakes having a low or very high magnitude.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 21: Skew and Kurtosis'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s calculate the skew and kurtosis values for all the features in the dataset
    using the core pandas functions available to us:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the `.skew()` DataFrame method to calculate the skew for all features and
    then sort the values in ascending order:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.26: Skew values for all the features in the dataset'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `.kurt()` DataFrame method to calculate the kurtosis for all features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.27: Kurtosis values for all the features in the dataset](img/C12622_02_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27: Kurtosis values for all the features in the dataset'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Here, we can see that the kurtosis values for some variables deviate significantly
    from 0\. This means that these columns have a long tail. But the values that are
    at the tail end of these variables (which indicate the number of people dead,
    injured, and the monetary value of damage), in our case, may be outliers that
    we may need to pay special attention to. Larger values might, in fact, indicate
    an additional force that added to the devastation caused by an earthquake, that
    is, a tsunami.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 3: Visually Representing the Distribution of Values'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this activity, we will revise what we learned in the previous section about
    different types of data. We will use the same dataset we used in *Activity 2:
    Summary Statistics and Missing Values*, that is, *House Prices: Advanced Regression
    Techniques* (available at [https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data)
    or on GitHub at [https://github.com/TrainingByPackt/Applied-Supervised-Learning-with-Python](https://github.com/TrainingByPackt/Applied-Supervised-Learning-with-Python)).
    We''ll use different types of plots to visually represent the distribution of
    values for this dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to be performed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Plot a histogram using Matplotlib for the target variable, `SalePrice`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the number of unique values within each column having an object type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a DataFrame representing the number of occurrences for each categorical
    value in the `HouseStyle` column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot a pie chart representing these counts.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Find the number of unique values within each column having a number type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot a histogram using Seaborn for the `LotArea` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate the skew and kurtosis values for the values in each column.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 312.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Relationships within the Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two reasons why it is important to find relationships between variables
    in the data:'
  prefs: []
  type: TYPE_NORMAL
- en: Finding which features are potentially important can be deemed essential, since
    finding ones that have a strong relationship with the target variable will aid
    in the feature selection process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding relationships between different features themselves can be useful, since
    variables in the dataset are usually never completely independent of every other
    variable and this can affect our modeling in a number of ways.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, there are a number of ways we can visualize these relationships, and this
    really depends on the types of variable we are trying to find the relationship
    between, and how many we are considering as part of the equation or comparison.
  prefs: []
  type: TYPE_NORMAL
- en: Relationship between Two Continuous Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To find a relationship between two continuous variables is basically to see
    how one varies as the value of the other is increased. The most common way to
    visualize this would be using a scatter plot, in which we take each variable along
    a single axis (the *X* and *Y* axes in a two-dimensional plane when we have two
    variables) and plot each data point using a marker in the *X-Y* plane. This visualization
    gives us a good idea of whether any kind of relationship exists between the two
    variables at all.
  prefs: []
  type: TYPE_NORMAL
- en: If we want to quantize the relationship between the two variables, however,
    the most common method is to find the correlation between them. If the target
    variable is continuous and it has a high degree of correlation with another variable,
    this is an indication that the feature would be an important part of the model.
  prefs: []
  type: TYPE_NORMAL
- en: '**Pearson''s Coefficient of Correlation**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Pearson''s Coefficient of Correlation** is a correlation coefficient that
    is commonly used to show the linear relationship between a pair of variables.
    The formula returns a value between -1 and +1, where:'
  prefs: []
  type: TYPE_NORMAL
- en: +1 indicates a strong positive relationship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: -1 indicates a strong negative relationship
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 0 indicates no relationship at all
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's also useful to find correlations between pairs of features themselves.
    Although the presence of highly correlated features wouldn't worsen the model,
    they wouldn't necessarily make any model better, either. For the sake of simplicity,
    it is always better to keep only one from a set of highly correlated features.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When fitting a linear model, having features that are highly correlated to each
    other can result in an unpredictable and widely varying model. This is because
    the coefficients of each feature in a linear model can be interpreted as the unit
    change in the target variable, keeping all other features constant. When a set
    of features are not independent (that is, are correlated), however, we cannot
    determine the effect of the independent changes to the target variable due to
    each feature, resulting in widely varying coefficients.
  prefs: []
  type: TYPE_NORMAL
- en: To find the pairwise correlation for every numeric feature in a DataFrame with
    every other feature, we can use the `.corr()` function on the DataFrame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 22: Plotting a Scatter Plot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s plot a scatter plot between the primary earthquake magnitude on the
    *X* axis and the corresponding number of injuries on the *Y* axis:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter out null values. Since we know that there are null values in both columns,
    let''s first filter the data to include only the non-null rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create and display the scatter plot. We will use Matplotlib''s `plt.scatter(x=...,
    y=...)` as the primary command for plotting the data. The `x` and `y` parameters
    state which feature is to be considered along which axis. They take a single-dimensional
    data structure such as a list, a tuple, or a pandas series. We can also send the
    `scatter` function more parameters that define, say, the icon to use to plot an
    individual data point. For example, to use a red cross as the icon, we would need
    to send the following parameters: `marker=''x'', c=''r''`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28: Scatter plot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From the plot, we can infer that although there doesn't seem to be a trend between
    the number of people who were injured and the earthquake magnitude, there are
    an increasing number of earthquakes with large injury counts as the magnitude
    increases. However, for the majority of earthquakes, there does not seem to be
    a relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 23: Correlation Heatmap'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's plot a correlation heatmap between all the numeric variables in our dataset
    using Seaborn's `sns.heatmap()` function on the inter-feature correlation values
    in the dataset.
  prefs: []
  type: TYPE_NORMAL
- en: 'The optional parameters passed to the `sns.heatmap()` function are `square`
    and `cmap`, which indicate that the plot should be such that each pixel is square
    and specify which color scheme to use, respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Plot a basic heatmap with all the features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.29: Correlation heatmap'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see from the color bar on the right of the plot that the minimum value,
    around `-0.2`, is the lightest shade, which is a misrepresentation of the correlation
    values, which vary from -1 to 1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Plot a subset of features in a more customized heatmap. We will specify the
    upper and lower limits using the `vmin` and `vmax` parameters, and plot the heatmap
    again with annotations specifying the pairwise correlation values on a subset
    of features. We will also change the color scheme to one that can be better interpreted—while
    the neutral white will represent no correlation, increasingly darker shades of
    blue and red will represent higher positive and negative correlation values respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.30: Customized correlation heatmap'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, while we can calculate the value of correlation, this only gives us an
    indication of a linear relationship. To better judge whether there's a possible
    dependency, we could plot a scatter plot between pairs of features, which is mostly
    useful when the relationship between the two variables is not known and visualizing
    how the data points are scattered or distributed could give us an idea of whether
    (and how) the two may be related.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 24: Pairplot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A pairplot is useful for visualizing multiple relationships between pairs of
    features at once, and can be plotted using Seaborn''s `.pairplot()` function.
    In this exercise, we will look at a pairplot between the features having the highest
    pair-wise correlation in the dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a list having the subset of features on which to create the pairplot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the pairplot using Seaborn. The arguments sent to the plotting function
    are: `kind=''scatter''`, which indicates that we want each individual plot between
    the pair of variables in the grid to be represented as a scatter plot, and `diag_kind=''kde''`,
    which indicates that we want the plots along the diagonal (where both the features
    in the pair are the same) to be a kernel density estimate.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It should also be noted here that the plots symmetrically across the diagonal
    from each other will essentially be the same, just with the axes reversed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.31: Pairplot between the features having the highest pair-wise correlation'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Relationship between a Continuous and a Categorical Variable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common way to see the relationship between two variables when one is categorical
    and the other is continuous can be using a bar plot or a box plot.
  prefs: []
  type: TYPE_NORMAL
- en: A bar plot helps compare the value of a variable for a discrete set of parameters
    and is one of the most common types of plots. Each bar represents a categorical
    value and the height of the bar usually represents an aggregated value of the
    continuous variable over that category (such as average, sum, or count of the
    values of the continuous variable in that category).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A box plot is a rectangle drawn to represent the distribution of the continuous
    variable for each discrete value of the categorical variable. It not only allows
    us to visualize outliers efficiently but also allows us to compare the distribution
    of the continuous variable across categories of the categorical variable. The
    lower and upper edges of the rectangle represent the first and third quartiles
    respectively, the line down through the middle represents the median value, and
    the points (or fliers) above and below the rectangle represent outlier values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exercise 25: Bar Chart'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s visualize the total number of tsunamis created by earthquakes of each
    intensity level using a bar chart:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Preprocess the `flag_tsunami` variable. Before we can use the `flag_tsunami`
    variable, we need to preprocess it to convert the `No` values to zeros and the
    `Tsu` values to ones. This will give us the binary target variable. To do this,
    we set the values in the column using the `.loc` operator, with `:` indicating
    that values need to be set for all rows, and the second parameter specifying the
    name of the column for which values are to be set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Remove all rows having null `intensity` values from the data we want to plot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Find the total number of tsunamis for each `intensity` level and display the
    DataFrame. To get the data in a format using which a bar plot can be visualized,
    we will need to group the rows by each intensity level, and then sum over the
    `flag_tsunami` values to get the total number of tsunamis for each intensity level:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.32: Total number of tsunamis for each intensity level](img/C12622_02_32.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.32: Total number of tsunamis for each intensity level'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Plot the bar chart, using Matplotlib''s `plt.bar(x=..., height=...)` method,
    which takes two arguments, one specifying the `x` values at which bars need to
    be drawn, and the second specifying the height of each bar. Both of these are
    one-dimensional data structures that must have the same length:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.33: Bar chart](img/C12622_02_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.33: Bar chart'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From this plot, we can see that as the earthquake intensity increases, the number
    of tsunamis caused also increases, but beyond an intensity of 9, the number of
    tsunamis seems to suddenly drop.
  prefs: []
  type: TYPE_NORMAL
- en: Think about why this could be happening. Perhaps it's just that there are fewer
    earthquakes with an intensity that high, and hence fewer tsunamis. Or it could
    be an entirely independent factor; maybe high-intensity earthquakes have historically
    occurred on land and couldn't trigger a tsunami. Explore the data to find out.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 26: Box Plot'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll plot a box plot that represents the variation in `eq_primary`
    over the countries with at least 100 earthquakes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find countries with over 100 earthquakes. We will find the value counts for
    all the countries in the dataset. Then, we''ll create a series comprising only
    those countries having a count greater than 100:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.34: Countries with over 100 earthquakes](img/C12622_02_34.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.34: Countries with over 100 earthquakes'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Subset the DataFrame to filter in only those rows having countries in the preceding
    set. To filter the rows, we use the `.isin()` method on the pandas series to select
    those rows containing a value in the array-like object passed as a parameter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create and display the box plot. The primary command for plotting the data
    is `sns.boxplot(x=..., y=..., data=..., order=)`. The `x` and `y` parameters are
    the names of the columns in the DataFrame to be plotted on each axis—the former
    is assumed to be the categorical variable and the latter the continuous. The `data`
    parameter takes the DataFrame from which to take the data and `order` takes a
    list of category names that indicates the order in which to display the categories
    on the *X* axis:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.35: Box plot](img/C12622_02_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.35: Box plot'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Relationship between Two Categorical Variables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we are looking at only a pair of categorical variables to find a relationship
    between them, the most intuitive way to do this is to divide the data on the basis
    of the first category, and then subdivide it further on the basis of the second
    categorical variable and look at the resultant counts to find the distribution
    of data points. While this might seem confusing, a popular way to visualize this
    is using stacked bar charts. As in a regular bar chart, each bar would represent
    a categorical value. But each bar would again be subdivided into color-coded categories
    that would provide an indication of what fraction of the data points in the primary
    category fall into each subcategory (that is, the second category). The variable
    with a larger number of categories is usually considered the primary category.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 27: Stacked Bar Chart'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this exercise, we''ll plot a stacked bar chart that represents the number
    of tsunamis that occurred for for each intensity level:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Find the number of data points that fall into each grouped value of `intensity`
    and `flag_tsunami`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/C12622_02_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.36: Data points falling into each grouped value of intensity and flag_tsunami'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Use the `.unstack()` method on the resultant DataFrame to get the level 1 index
    (`flag_tsunami`) as a column:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.37: The level 1 index](img/C12622_02_37.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 2.37: The level 1 index'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Create the stacked bar chart. We first use the `sns.set()` function to indicate
    that we want to use Seaborn as our visualization library. Then, we can easily
    use the native `.plot()` function in pandas to plot a stacked bar chart by passing
    the `kind=''bar''` and `stacked=True` arguments:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.38: A stacked bar chart](img/C12622_02_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.38: A stacked bar chart'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The plot now lets us visualize and interpret the fraction of earthquakes that
    caused tsunamis at each intensity level. In *Exercise 25: Bar Chart*, we saw the
    number of tsunamis drop for earthquakes having intensity greater than 9\. From
    this plot, we can now confirm that this was primarily because the number of earthquakes
    themselves dropped beyond level 10; the fraction of tsunamis even increased for
    level 11.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4: Relationships Within the Data'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this activity, we will revise what we learned in the previous section about
    relationships between data. We will use the same dataset we used in *Activity
    2: Summary Statistics and Missing Values*, that is, *House Prices: Advanced Regression
    Techniques* (available at [https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data](https://www.kaggle.com/c/house-prices-advanced-regression-techniques/data)
    or on GitHub at [https://github.com/TrainingByPackt/Applied-Supervised-Learning-with-Python](https://github.com/TrainingByPackt/Applied-Supervised-Learning-with-Python)).
    We''ll use different plots to highlight relationships between values in this dataset.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to be performed are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Plot the correlation heatmap for the dataset.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Plot a more compact heatmap having annotations for correlation values using
    the following subset of features:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Display the pairplot for the same subset of features, with the KDE plot on the
    diagonals and scatter plot elsewhere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a boxplot to show the variation in `SalePrice` for each category of `GarageCars`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plot a line graph using Seaborn to show the variation in `SalePrice` for older
    and more recently built flats.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: The solution for this activity can be found on page 319.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter, we started by talking about why data exploration is an important
    part of the modeling process and how it can help in not only preprocessing the
    dataset for the modeling process, but also help us engineer informative features
    and improve model accuracy. This chapter focused on not only gaining a basic overview
    of the dataset and its features, but also gaining insights by creating visualizations
    that combine several features.
  prefs: []
  type: TYPE_NORMAL
- en: We looked at how to find the summary statistics of a dataset using core functionality
    from pandas. We looked at how to find missing values and talked about why they're
    important, while learning how to use the Missingno library to analyze them and
    the pandas and scikit-learn libraries to impute the missing values.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we looked at how to study the univariate distributions of variables in
    the dataset and visualize them for both categorical and continuous variables using
    bar charts, pie charts, and histograms. Lastly, we learned how to explore relationships
    between variables, and about how they can be represented using scatter plots,
    heatmaps, box plots, and stacked bar charts, to name a few.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chapters, we will start exploring supervised machine learning
    algorithms. Now that we have an idea of how to explore a dataset that we have,
    we can proceed to the modeling phase. The next chapter will introduce regression:
    a class of algorithms that are primarily used to build models for continuous target
    variables.'
  prefs: []
  type: TYPE_NORMAL
