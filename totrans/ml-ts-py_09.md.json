["```py\npip install -U tensorflow \n```", "```py\nimport pandas as pd\npassengers = pd.read_csv(\n  \"passengers.csv\", parse_dates=[\"date\"]\n).set_index(\"date\") \n```", "```py\nimport tensorflow as tf\nimport tensorflow.keras as keras\nfrom tensorflow.keras.layers import Dense, Input, Dropout\nDROPOUT_RATIO = 0.2\nHIDDEN_NEURONS = 10\ncallback = tf.keras.callbacks.EarlyStopping(\n  monitor='loss', patience=3\n) \n```", "```py\ndef create_model(passengers):\n  input_layer = Input(len(passengers.columns))\n  hiden_layer = Dropout(DROPOUT_RATIO)(input_layer)\n  hiden_layer = Dense(HIDDEN_NEURONS, activation='relu')(hiden_layer)\n  output_layer = Dropout(DROPOUT_RATIO)(hiden_layer)\n  output_layer = Dense(1)(output_layer)\n  model = keras.models.Model(\n    inputs=input_layer, outputs=output_layer\n  )\n  model.compile(\n    loss='mse',\n  optimizer=keras.optimizers.Adagrad(),\n    metrics=[keras.metrics.RootMeanSquaredError(), keras.metrics.MeanAbsoluteError()])\n  return model \n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n  passengers, passengers.passengers.shift(-1), shuffle=False\n) \n```", "```py\nmodel = create_model(X_train)\nmodel.fit(X_train, y_train, epochs=1000, callbacks=[callback]) \n```", "```py\npredicted = model.predict(X_test) \n```", "```py\nimport matplotlib.pyplot as plt\ndef show_result(y_test, predicted):\n  plt.figure(figsize=(16, 6))\n  plt.plot(y_test.index, predicted, 'o-', label=\"predicted\")\n  plt.plot(y_test.index, y_test, '.-', label=\"actual\")\n  plt.ylabel(\"Passengers\")\n  plt.legend() \n```", "```py\nshow_result(y_test, predicted) \n```", "```py\npassengers[\"month\"] = passengers.index.month.values\npassengers[\"year\"] = passengers.index.year.values \n```", "```py\nmodel = create_model(passengers) \n```", "```py\nX_train, X_test, y_train, y_test = train_test_split(\n  passengers, passengers.passengers.shift(-1), shuffle=False\n)\nmodel.fit(X_train, y_train, epochs=100, callbacks=[callback])\npredicted = model.predict(X_test)\nshow_result(y_test, predicted) \n```", "```py\nfrom tensorflow.keras.layers.experimental preprocessing\nfrom tensorflow.keras.layers import Embedding, Flatten, Concatenate\nfrom tensorflow.keras.metrics import (\n  RootMeanSquaredError, MeanAbsoluteError\n) \n```", "```py\ndef create_model(train):\n  scale = tf.constant(train.passengers.std())\n  cont_layer = Input(shape=1)\n  cat_layer = Input(shape=1)\n  embedded = Embedding(12, 5)(cat_layer)\n  emb_flat = Flatten()(embedded)\n  year_input = Input(shape=1)\n  year_layer = Dense(1)(year_input)\n  hidden_output = Concatenate(-1)([emb_flat, year_layer, cont_layer])\n  output_layer = keras.layers.Dense(1)(hidden_output)\n  output = output_layer * scale + cont_layer\n  model = keras.models.Model(inputs=[\n    cont_layer, cat_layer, year_input\n  ], outputs=output)\n  model.compile(loss='mse', optimizer=keras.optimizers.Adam(),\n    metrics=[RootMeanSquaredError(), MeanAbsoluteError()])\n  return model \n```", "```py\nmodel = create_model(X_train) \n```", "```py\nmodel.fit(\n  (X_train[\"passengers\"], X_train[\"year\"], X_train[\"month\"]),\n  y_train, epochs=1000,\n  callbacks=[callback]\n)\npredicted = model.predict((X_test[\"passengers\"], X_test[\"year\"], X_test[\"month\"])) \n```", "```py\ndef wrap_data(df, lookback: int):\n  dataset = []\n  for index in range(lookback, len(df)+1):\n    features = {\n        f\"col_{i}\": float(val) for i, val in enumerate(\n          df.iloc[index-lookback:index].values\n        )\n    }\n    row = pd.DataFrame.from_dict([features])\n    row.index = [df.index[index-1]]\n    dataset.append(row)\n  return pd.concat(dataset, axis=0) \n```", "```py\nLOOKBACK = 10\ndataset = wrap_data(passengers, lookback=LOOKBACK)\ndataset = dataset.join(passengers.shift(-1)) \n```", "```py\nimport tensorflow.keras as keras\nfrom tensorflow.keras.layers import Input, Bidirectional, LSTM, Dense\nimport tensorflow as tf \n```", "```py\ndef create_model(passengers):\n  input_layer = Input(shape=(LOOKBACK, 1))\n  recurrent = Bidirectional(LSTM(20, activation=\"tanh\"))(input_layer)\n  output_layer = Dense(1)(recurrent)\n  model = keras.models.Model(inputs=input_layer, outputs=output_layer)\n  model.compile(loss='mse', optimizer=keras.optimizers.Adagrad(),\n    metrics=[keras.metrics.RootMeanSquaredError(), keras.metrics.MeanAbsoluteError()])\n  return model \n```", "```py\nfrom sklearn.model_selection import train_test_split\ncallback = tf.keras.callbacks.EarlyStopping(monitor='loss', patience=3)\nmodel = create_model(passengers)\nX_train, X_test, y_train, y_test = train_test_split(\n    dataset.drop(columns=\"passengers\"),\n    dataset[\"passengers\"],\n    shuffle=False\n) \n```", "```py\nmodel.fit(X_train, y_train, epochs=1000, callbacks=[callback]) \n```", "```py\nimport numpy as np\nimport pandas as pd\nfrom keras.layers import Conv1D, Input, Add, Activation, Dropout\nfrom keras.models import Sequential, Model\nfrom keras.layers.advanced_activations import LeakyReLU, ELU\nfrom keras import optimizers\nimport tensorflow as tf \n```", "```py\ndef DC_CNN_Block(nb_filter, filter_length, dilation):\n    def f(input_):\n        residual =    input_\n        layer_out =   Conv1D(\n            filters=nb_filter, kernel_size=filter_length, \n            dilation_rate=dilation, \n            activation='linear', padding='causal', use_bias=False\n        )(input_)                    \n        layer_out =   Activation('selu')(layer_out)        \n        skip_out =    Conv1D(1, 1, activation='linear', use_bias=False)(layer_out)        \n        network_in =  Conv1D(1, 1, activation='linear', use_bias=False)(layer_out)                      \n        network_out = Add()([residual, network_in])        \n        return network_out, skip_out    \n    return f \n```", "```py\ndef DC_CNN_Model(length):\n    input = Input(shape=(length,1))\n    l1a, l1b = DC_CNN_Block(32, 2, 1)(input)    \n    l2a, l2b = DC_CNN_Block(32, 2, 2)(l1a) \n    l3a, l3b = DC_CNN_Block(32, 2, 4)(l2a)\n    l4a, l4b = DC_CNN_Block(32, 2, 8)(l3a)\n    l5a, l5b = DC_CNN_Block(32, 2, 16)(l4a)\n    l6a, l6b = DC_CNN_Block(32, 2, 32)(l5a)\n    l6b = Dropout(0.8)(l6b)\n    l7a, l7b = DC_CNN_Block(32, 2, 64)(l6a)\n    l7b = Dropout(0.8)(l7b)\n    l8 =   Add()([l1b, l2b, l3b, l4b, l5b, l6b, l7b])\n    l9 =   Activation('relu')(l8)   \n    l21 =  Conv1D(1, 1, activation='linear', use_bias=False)(l9)\n    model = Model(inputs=input, outputs=l21)\n    model.compile(loss='mae', optimizer=optimizers.Adam(), metrics=['mse'])\n    return model \n```", "```py\npassengers = pd.read_csv(\n  \"passengers.csv\", parse_dates=[\"date \"]\n).set_index(\"date\") \n```", "```py\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(\n    passengers.passengers, passengers.passengers.shift(-1), shuffle=False\n) \n```", "```py\ndef fit_model(timeseries):\n    length = len(timeseries)-1\n    model = DC_CNN_Model(length)\n    model.summary()\n    X = timeseries[:-1].reshape(1,length, 1)\n    y = timeseries[1:].reshape(1,length, 1)\n    model.fit(X, y, epochs=3000, callbacks=[callback])\n    return model \n```", "```py\ndef forecast(model, timeseries, horizon: int):\n    length = len(timeseries)-1\n    pred_array = np.zeros(horizon).reshape(1, horizon, 1)\n    X_test_initial = timeseries[1:].reshape(1,length,1)\n    pred_array[: ,0, :] = model.predict(X_test_initial)[:, -1:, :]\n    for i in range(horizon-1):\n        pred_array[:, i+1:, :] = model.predict(\n            np.append(\n                X_test_initial[:, i+1:, :], \n                pred_array[:, :i+1, :]\n            ).reshape(1, length, 1))[:, -1:, :]\n    return pred_array.flatten() \n```", "```py\ndef evaluate_timeseries(series, horizon: int):\n    model = fit_model(series)\n    pred_array = forecast(model, series, horizon)\n    return pred_array, model \n```", "```py\nHORIZON = len(y_test)\npredictions, model = evaluate_timeseries(\n    X_train.values.reshape(-1, 1), horizon= HORIZON\n) \n```"]