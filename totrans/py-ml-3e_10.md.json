["```py\n>>> import pandas as pd\n>>> df = pd.read_csv('https://raw.githubusercontent.com/rasbt/'\n...                  'python-machine-learning-book-3rd-edition'\n...                  '/master/ch10/housing.data.txt',\n...                  header=None,\n...                  sep='\\s+')\n>>> df.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS',\n...               'NOX', 'RM', 'AGE', 'DIS', 'RAD',\n...               'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n>>> df.head() \n```", "```py\ndf = pd.read_csv(\n    'https://raw.githubusercontent.com/rasbt/'\n    'python-machine-learning-book-3rd-edition/'\n    'master/ch10/housing.data.txt',\n    header=None,\n    sep='\\s+') \n```", "```py\ndf = pd.read_csv('./housing.data.txt',\n    sep='\\s+') \n```", "```py\n>>> import matplotlib.pyplot as plt\n>>> from mlxtend.plotting import scatterplotmatrix\n>>> cols = ['LSTAT', 'INDUS', 'NOX', 'RM', 'MEDV']\n>>> scatterplotmatrix(df[cols].values, figsize=(10, 8), \n...                   names=cols, alpha=0.5)\n>>> plt.tight_layout()\n>>> plt.show() \n```", "```py\n>>> from mlxtend.plotting import heatmap\n>>> import numpy as np\n>>> cm = np.corrcoef(df[cols].values.T)\n>>> hm = heatmap(cm,\n...              row_names=cols,\n...              column_names=cols)\n>>> plt.show() \n```", "```py\nclass LinearRegressionGD(object):\n\n    def __init__(self, eta=0.001, n_iter=20):\n        self.eta = eta\n        self.n_iter = n_iter\n\n    def fit(self, X, y):\n        self.w_ = np.zeros(1 + X.shape[1])\n        self.cost_ = []\n\n        for i in range(self.n_iter):\n            output = self.net_input(X)\n            errors = (y - output)\n            self.w_[1:] += self.eta * X.T.dot(errors)\n            self.w_[0] += self.eta * errors.sum()\n            cost = (errors**2).sum() / 2.0\n            self.cost_.append(cost)\n        return self\n\n    def net_input(self, X):\n        return np.dot(X, self.w_[1:]) + self.w_[0]\n\n    def predict(self, X):\n        return self.net_input(X) \n```", "```py\n>>> X = df[['RM']].values\n>>> y = df['MEDV'].values\n>>> from sklearn.preprocessing import StandardScaler\n>>> sc_x = StandardScaler()\n>>> sc_y = StandardScaler()\n>>> X_std = sc_x.fit_transform(X)\n>>> y_std = sc_y.fit_transform(y[:, np.newaxis]).flatten()\n>>> lr = LinearRegressionGD()\n>>> lr.fit(X_std, y_std) \n```", "```py\n>>> plt.plot(range(1, lr.n_iter+1), lr.cost_)\n>>> plt.ylabel('SSE')\n>>> plt.xlabel('Epoch')\n>>> plt.show() \n```", "```py\n>>> def lin_regplot(X, y, model):\n...     plt.scatter(X, y, c='steelblue', edgecolor='white', s=70)\n...     plt.plot(X, model.predict(X), color='black', lw=2)\n...     return None \n```", "```py\n>>> lin_regplot(X_std, y_std, lr)\n>>> plt.xlabel('Average number of rooms [RM] (standardized)')\n>>> plt.ylabel('Price in $1000s [MEDV] (standardized)')\n>>> plt.show() \n```", "```py\n>>> num_rooms_std = sc_x.transform(np.array([[5.0]]))\n>>> price_std = lr.predict(num_rooms_std)\n>>> print(\"Price in $1000s: %.3f\" % \\\n...       sc_y.inverse_transform(price_std))\nPrice in $1000s: 10.840 \n```", "```py\n>>> print('Slope: %.3f' % lr.w_[1])\nSlope: 0.695\n>>> print('Intercept: %.3f' % lr.w_[0])\nIntercept: -0.000 \n```", "```py\n>>> from sklearn.linear_model import LinearRegression\n>>> slr = LinearRegression()\n>>> slr.fit(X, y)\n>>> y_pred = slr.predict(X)\n>>> print('Slope: %.3f' % slr.coef_[0])\nSlope: 9.102\n>>> print('Intercept: %.3f' % slr.intercept_)\nIntercept: -34.671 \n```", "```py\n>>> lin_regplot(X, y, slr)\n>>> plt.xlabel('Average number of rooms [RM]')\n>>> plt.ylabel('Price in $1000s [MEDV]')\n>>> plt.show() \n```", "```py\n# adding a column vector of \"ones\"\n>>> Xb = np.hstack((np.ones((X.shape[0], 1)), X))\n>>> w = np.zeros(X.shape[1])\n>>> z = np.linalg.inv(np.dot(Xb.T, Xb))\n>>> w = np.dot(z, np.dot(Xb.T, y))\n>>> print('Slope: %.3f' % w[1])\nSlope: 9.102\n>>> print('Intercept: %.3f' % w[0])\nIntercept: -34.671 \n```", "```py\n>>> from sklearn.linear_model import RANSACRegressor\n>>> ransac = RANSACRegressor(LinearRegression(),\n...                          max_trials=100,\n...                          min_samples=50,\n...                          loss='absolute_loss',\n...                          residual_threshold=5.0,\n...                          random_state=0)\n>>> ransac.fit(X, y) \n```", "```py\n>>> inlier_mask = ransac.inlier_mask_\n>>> outlier_mask = np.logical_not(inlier_mask)\n>>> line_X = np.arange(3, 10, 1)\n>>> line_y_ransac = ransac.predict(line_X[:, np.newaxis])\n>>> plt.scatter(X[inlier_mask], y[inlier_mask],\n...             c='steelblue', edgecolor='white',\n...             marker='o', label='Inliers')\n>>> plt.scatter(X[outlier_mask], y[outlier_mask],\n...             c='limegreen', edgecolor='white',\n...             marker='s', label='Outliers')\n>>> plt.plot(line_X, line_y_ransac, color='black', lw=2)\n>>> plt.xlabel('Average number of rooms [RM]')\n>>> plt.ylabel('Price in $1000s [MEDV]')\n>>> plt.legend(loc='upper left')\n>>> plt.show() \n```", "```py\n>>> print('Slope: %.3f' % ransac.estimator_.coef_[0])\nSlope: 10.735\n>>> print('Intercept: %.3f' % ransac.estimator_.intercept_)\nIntercept: -44.089 \n```", "```py\n>>> from sklearn.model_selection import train_test_split\n>>> X = df.iloc[:, :-1].values\n>>> y = df['MEDV'].values\n>>> X_train, X_test, y_train, y_test = train_test_split(\n...       X, y, test_size=0.3, random_state=0)\n>>> slr = LinearRegression()\n>>> slr.fit(X_train, y_train)\n>>> y_train_pred = slr.predict(X_train)\n>>> y_test_pred = slr.predict(X_test) \n```", "```py\n>>> plt.scatter(y_train_pred, y_train_pred - y_train,\n...             c='steelblue', marker='o', edgecolor='white',\n...             label='Training data')\n>>> plt.scatter(y_test_pred, y_test_pred - y_test,\n...             c='limegreen', marker='s', edgecolor='white',\n...             label='Test data')\n>>> plt.xlabel('Predicted values')\n>>> plt.ylabel('Residuals')\n>>> plt.legend(loc='upper left')\n>>> plt.hlines(y=0, xmin=-10, xmax=50, color='black', lw=2)\n>>> plt.xlim([-10, 50])\n>>> plt.show() \n```", "```py\n>>> from sklearn.metrics import mean_squared_error\n>>> print('MSE train: %.3f, test: %.3f' % (\n...        mean_squared_error(y_train, y_train_pred),\n...        mean_squared_error(y_test, y_test_pred)))\nMSE train: 19.958, test: 27.196 \n```", "```py\n>>> from sklearn.metrics import r2_score\n>>> print('R^2 train: %.3f, test: %.3f' %\n...       (r2_score(y_train, y_train_pred),\n...        r2_score(y_test, y_test_pred)))\nR^2 train: 0.765, test: 0.673 \n```", "```py\n>>> from sklearn.linear_model import Ridge\n>>> ridge = Ridge(alpha=1.0) \n```", "```py\n>>> from sklearn.linear_model import Lasso\n>>> lasso = Lasso(alpha=1.0) \n```", "```py\n>>> from sklearn.linear_model import ElasticNet\n>>> elanet = ElasticNet(alpha=1.0, l1_ratio=0.5) \n```", "```py\n    >>> from sklearn.preprocessing import PolynomialFeatures\n    >>> X = np.array([ 258.0, 270.0, 294.0, 320.0, 342.0,\n    ...                368.0, 396.0, 446.0, 480.0, 586.0])\\\n    ...              [:, np.newaxis]\n    >>> y = np.array([ 236.4, 234.4, 252.8, 298.6, 314.2,\n    ...                342.2, 360.8, 368.0, 391.2, 390.8])\n    >>> lr = LinearRegression()\n    >>> pr = LinearRegression()\n    >>> quadratic = PolynomialFeatures(degree=2)\n    >>> X_quad = quadratic.fit_transform(X) \n    ```", "```py\n    >>> lr.fit(X, y)\n    >>> X_fit = np.arange(250, 600, 10)[:, np.newaxis]\n    >>> y_lin_fit = lr.predict(X_fit) \n    ```", "```py\n    >>> pr.fit(X_quad, y)\n    >>> y_quad_fit = pr.predict(quadratic.fit_transform(X_fit)) \n    ```", "```py\n    >>> plt.scatter(X, y, label='Training points')\n    >>> plt.plot(X_fit, y_lin_fit,\n    ...          label='Linear fit', linestyle='--')\n    >>> plt.plot(X_fit, y_quad_fit,\n    ...          label='Quadratic fit')\n    >>> plt.xlabel('Explanatory variable')\n    >>> plt.ylabel('Predicted or known target values')\n    >>> plt.legend(loc='upper left')\n    >>> plt.tight_layout()\n    >>> plt.show() \n    ```", "```py\n>>> y_lin_pred = lr.predict(X)\n>>> y_quad_pred = pr.predict(X_quad)\n>>> print('Training MSE linear: %.3f, quadratic: %.3f' % (\n...       mean_squared_error(y, y_lin_pred),\n...       mean_squared_error(y, y_quad_pred)))\nTraining MSE linear: 569.780, quadratic: 61.330\n>>> print('Training R^2 linear: %.3f, quadratic: %.3f' % (\n...       r2_score(y, y_lin_pred),\n...       r2_score(y, y_quad_pred)))\nTraining R^2 linear: 0.832, quadratic: 0.982 \n```", "```py\n>>> X = df[['LSTAT']].values\n>>> y = df['MEDV'].values\n>>> regr = LinearRegression()\n# create quadratic features\n>>> quadratic = PolynomialFeatures(degree=2)\n>>> cubic = PolynomialFeatures(degree=3)\n>>> X_quad = quadratic.fit_transform(X)\n>>> X_cubic = cubic.fit_transform(X)\n# fit features\n>>> X_fit = np.arange(X.min(), X.max(), 1)[:, np.newaxis]\n>>> regr = regr.fit(X, y)\n>>> y_lin_fit = regr.predict(X_fit)\n>>> linear_r2 = r2_score(y, regr.predict(X))\n>>> regr = regr.fit(X_quad, y)\n>>> y_quad_fit = regr.predict(quadratic.fit_transform(X_fit))\n>>> quadratic_r2 = r2_score(y, regr.predict(X_quad))\n>>> regr = regr.fit(X_cubic, y)\n>>> y_cubic_fit = regr.predict(cubic.fit_transform(X_fit))\n>>> cubic_r2 = r2_score(y, regr.predict(X_cubic))\n# plot results\n>>> plt.scatter(X, y, label='Training points', color='lightgray')\n>>> plt.plot(X_fit, y_lin_fit,\n...          label='Linear (d=1), $R^2=%.2f$' % linear_r2,\n...          color='blue',\n...          lw=2,\n...          linestyle=':')\n>>> plt.plot(X_fit, y_quad_fit,\n...          label='Quadratic (d=2), $R^2=%.2f$' % quadratic_r2,\n...          color='red',\n...          lw=2,\n...          linestyle='-')\n>>> plt.plot(X_fit, y_cubic_fit,\n...          label='Cubic (d=3), $R^2=%.2f$' % cubic_r2,\n...          color='green',\n...          lw=2,\n...          linestyle='--')\n>>> plt.xlabel('% lower status of the population [LSTAT]')\n>>> plt.ylabel('Price in $1000s [MEDV]')\n>>> plt.legend(loc='upper right')\n>>> plt.show() \n```", "```py\n>>> # transform features\n>>> X_log = np.log(X)\n>>> y_sqrt = np.sqrt(y)\n>>>\n>>> # fit features\n>>> X_fit = np.arange(X_log.min()-1,\n...                   X_log.max()+1, 1)[:, np.newaxis]\n>>> regr = regr.fit(X_log, y_sqrt)\n>>> y_lin_fit = regr.predict(X_fit)\n>>> linear_r2 = r2_score(y_sqrt, regr.predict(X_log))\n>>> # plot results\n>>> plt.scatter(X_log, y_sqrt,\n...             label='Training points',\n...             color='lightgray')\n>>> plt.plot(X_fit, y_lin_fit,\n...          label='Linear (d=1), $R^2=%.2f$' % linear_r2,\n...          color='blue',\n...          lw=2)\n>>> plt.xlabel('log(% lower status of the population [LSTAT])')\n>>> plt.ylabel('$\\sqrt{Price \\; in \\; \\$1000s \\; [MEDV]}$')\n>>> plt.legend(loc='lower left')\n>>> plt.tight_layout()\n>>> plt.show() \n```", "```py\n>>> from sklearn.tree import DecisionTreeRegressor\n>>> X = df[['LSTAT']].values\n>>> y = df['MEDV'].values\n>>> tree = DecisionTreeRegressor(max_depth=3)\n>>> tree.fit(X, y)\n>>> sort_idx = X.flatten().argsort()\n>>> lin_regplot(X[sort_idx], y[sort_idx], tree)\n>>> plt.xlabel('% lower status of the population [LSTAT]')\n>>> plt.ylabel('Price in $1000s [MEDV]')\n>>> plt.show() \n```", "```py\n>>> X = df.iloc[:, :-1].values\n>>> y = df['MEDV'].values\n>>> X_train, X_test, y_train, y_test =\\\n...     train_test_split(X, y,\n...                      test_size=0.4,\n...                      random_state=1)\n>>>\n>>> from sklearn.ensemble import RandomForestRegressor\n>>> forest = RandomForestRegressor(n_estimators=1000,\n...                                criterion='mse',\n...                                random_state=1,\n...                                n_jobs=-1)\n>>> forest.fit(X_train, y_train)\n>>> y_train_pred = forest.predict(X_train)\n>>> y_test_pred = forest.predict(X_test)\n>>> print('MSE train: %.3f, test: %.3f' % (\n...       mean_squared_error(y_train, y_train_pred),\n...       mean_squared_error(y_test, y_test_pred)))\nMSE train: 1.642, test: 11.052\n>>> print('R^2 train: %.3f, test: %.3f' % (\n...       r2_score(y_train, y_train_pred),\n...       r2_score(y_test, y_test_pred)))\nR^2 train: 0.979, test: 0.878 \n```", "```py\n>>> plt.scatter(y_train_pred,\n...             y_train_pred - y_train,\n...             c='steelblue',\n...             edgecolor='white',\n...             marker='o',\n...             s=35,\n...             alpha=0.9,\n...             label='Training data')\n>>> plt.scatter(y_test_pred,\n...             y_test_pred - y_test,\n...             c='limegreen',\n...             edgecolor='white',\n...             marker='s',\n...             s=35,\n...             alpha=0.9,\n...             label='Test data')\n>>> plt.xlabel('Predicted values')\n>>> plt.ylabel('Residuals')\n>>> plt.legend(loc='upper left')\n>>> plt.hlines(y=0, xmin=-10, xmax=50, lw=2, color='black')\n>>> plt.xlim([-10, 50])\n>>> plt.tight_layout()\n>>> plt.show() \n```"]