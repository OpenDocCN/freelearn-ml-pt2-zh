["```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport openensembles as oe \nimport pandas as pd\n\nfrom sklearn import metrics\n\n# Load the datasets\ndata = pd.read_csv('WHR.csv')\nregs = pd.read_csv('Regions.csv')\n\n# DATA LOADING SECTION START #\n# Use the 2017 data and fill any NaNs\nrecents = data[data.Year == 2017]\nrecents = recents.dropna(axis=1, how=\"all\")\nrecents = recents.fillna(recents.median())\n\n# Use only these specific features\ncolumns = ['Log GDP per capita',\n 'Social support', 'Healthy life expectancy at birth',\n 'Freedom to make life choices', 'Generosity',\n 'Perceptions of corruption','Positive affect', 'Negative affect',\n 'Confidence in national government', 'Democratic Quality',\n 'Delivery Quality']\n\n# Create the data object\ncluster_data = oe.data(recents[columns], columns)\n# DATA LOADING SECTION END #\n```", "```py\nnp.random.seed(123456)\nresults = {'K':[], 'size':[], 'silhouette': []}\n# Test different ensemble setups\nKs = [2, 4, 6, 8, 10, 12, 14]\nsizes = [5, 10, 20, 50]\nfor K in Ks:\n    for ensemble_size in sizes:\n        ensemble = oe.cluster(cluster_data)\n        for i in range(ensemble_size):\n            name = f'kmeans_{ensemble_size}_{i}'\n            ensemble.cluster('parent', 'kmeans', name, K)\n\n        preds = ensemble.finish_co_occ_linkage(threshold=0.5)\n        print(f'K: {K}, size {ensemble_size}:', end=' ')\n        silhouette = metrics.silhouette_score(recents[columns], \n        preds.labels['co_occ_linkage'])\n        print('%.2f' % silhouette)\n        results['K'].append(K)\n        results['size'].append(ensemble_size)\n        results['silhouette'].append(silhouette)\n\nresults_df = pd.DataFrame(results)\ncross = pd.crosstab(results_df.K, results_df['size'], \nresults_df['silhouette'], aggfunc=lambda x: x)\n```", "```py\n# DATA LOADING SECTION START #\n\n# Use the 2017 data and fill any NaNs\nrecents = data[data.Year == 2017]\nrecents = recents.dropna(axis=1, how=\"all\")\nrecents = recents.fillna(recents.median())\n\n# Use only these specific features\ncolumns = ['Log GDP per capita',\n 'Social support', 'Healthy life expectancy at birth',\n 'Freedom to make life choices', 'Generosity',\n 'Perceptions of corruption','Positive affect', 'Negative affect',\n 'Confidence in national government', 'Democratic Quality',\n 'Delivery Quality']\n\n# Normalize the features by subtracting the mean\n# and dividing by the standard deviation\nnormalized = recents[columns]\nnormalized = normalized - normalized.mean()\nnormalized = normalized / normalized.std()\n\n# Create the data object\ncluster_data = oe.data(recents[columns], columns)\n# DATA LOADING SECTION END #\n```", "```py\n# DATA LOADING SECTION START #\n\n# Use the 2017 data and fill any NaNs\nrecents = data[data.Year == 2017]\nrecents = recents.dropna(axis=1, how=\"all\")\nrecents = recents.fillna(recents.median())\n\n# Use only these specific features\ncolumns = ['Log GDP per capita',\n 'Social support', 'Healthy life expectancy at birth',\n 'Freedom to make life choices', 'Generosity',\n 'Perceptions of corruption','Positive affect', 'Negative affect',\n 'Confidence in national government', 'Democratic Quality',\n 'Delivery Quality']\n\n# Transform the data with TSNE\ntsne = t_sne.TSNE()\ntransformed = pd.DataFrame(tsne.fit_transform(recents[columns]))\n# Create the data object\ncluster_data = oe.data(transformed, [0, 1])\n\n# DATA LOADING SECTION END #\n```", "```py\n# DATA LOADING SECTION START #\n\n# Use the 2017 data and fill any NaNs\nrecents = data[data.Year == 2017]\nrecents = recents.dropna(axis=1, how=\"all\")\nrecents = recents.fillna(recents.median())\n\n# Use only these specific features\ncolumns = ['Log GDP per capita',\n 'Social support', 'Healthy life expectancy at birth',\n 'Freedom to make life choices', 'Generosity',\n 'Perceptions of corruption','Positive affect', 'Negative affect',\n 'Confidence in national government', 'Democratic Quality',\n 'Delivery Quality']\n\n# Transform the data with TSNE\ntsne = t_sne.TSNE()\ntransformed = pd.DataFrame(tsne.fit_transform(recents[columns]))\n# Create the data object\ncluster_data = oe.data(transformed, [0, 1])\n\n# DATA LOADING SECTION END #\n\n# Create the ensemble\nensemble = oe.cluster(cluster_data)\nfor i in range(20):\n    name = f'kmeans_{i}-tsne'\n    ensemble.cluster('parent', 'kmeans', name, 10)\n\n# Create the cluster labels\npreds = ensemble.finish_co_occ_linkage(threshold=0.5)\n\n# Add Life Ladder to columns\ncolumns = ['Life Ladder', 'Log GDP per capita',\n 'Social support', 'Healthy life expectancy at birth',\n 'Freedom to make life choices', 'Generosity',\n 'Perceptions of corruption','Positive affect', 'Negative affect',\n 'Confidence in national government', 'Democratic Quality',\n 'Delivery Quality']\n# Add the cluster to the dataframe and group by the cluster\nrecents['Cluster'] = preds.labels['co_occ_linkage']\ngrouped = recents.groupby('Cluster')\n# Get the means\nmeans = grouped.mean()[columns]\n# Create barplots\ndef create_bar(col, nc, nr, index):\n    plt.subplot(nc, nr, index)    \n    values = means.sort_values('Life Ladder')[col]\n    mn = min(values) * 0.98\n    mx = max(values) * 1.02\n    values.plot(kind='bar', ylim=[mn, mx])\n    plt.title(col[:18])\n\n# Plot for each feature\nplt.figure(1)\ni = 1\nfor col in columns:\n    create_bar(col, 4, 3, i)\n    i += 1\nplt.show()\n```"]