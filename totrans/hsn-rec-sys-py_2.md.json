["```py\n[rounakbanik:~]$ cd RecoSys/Chapter2\n[rounakbanik:~/RecoSys/Chapter2]$ jupyter notebook\n```", "```py\nimport pandas as pd\npd.__version__\n```", "```py\n#Read the CSV File into df\ndf = pd.read_csv('../data/movies_metadata.csv')\n\n#We will find out what the following code does a little later!\ndf.head()\n```", "```py\n#Output the type of df\ntype(df)\n```", "```py\n#Output the shape of df\ndf.shape\n\nOUTPUT:\n(45466, 24)\n```", "```py\n#Output the columns of df\ndf.columns\n\nOUTPUT:\n\nIndex(['adult', 'belongs_to_collection', 'budget', 'genres', 'homepage', 'id',\n       'imdb_id', 'original_language', 'original_title', 'overview',\n       'popularity', 'poster_path', 'production_companies',\n       'production_countries', 'release_date', 'revenue', 'runtime',\n       'spoken_languages', 'status', 'tagline', 'title', 'video',\n       'vote_average', 'vote_count'],\n      dtype='object')\n```", "```py\n#Select the second movie in df\nsecond = df.iloc[1]\nsecond\n```", "```py\n#Change the index to the title\ndf = df.set_index('title')\n\n#Access the movie with title 'Jumanji'\njum = df.loc['Jumanji']\njum\n```", "```py\n#Revert back to the previous zero-based indexing\ndf = df.reset_index()\n```", "```py\n#Create a smaller dataframe with a subset of all features\nsmall_df = df[['title', 'release_date', 'budget', 'revenue', 'runtime', 'genres']]\n\n#Output only the first 5 rows of small_df\nsmall_df.head()\n```", "```py\n#Display the first 15 rows\nsmall_df.head(15)\n```", "```py\n#Get information of the data types of each feature\nsmall_df.info()\n\nOUTPUT:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 45466 entries, 0 to 45465\nData columns (total 6 columns):\ntitle 45460 non-null object\nrelease_date 45379 non-null object\nbudget 45466 non-null object\nrevenue 45460 non-null float64\nruntime 45203 non-null float64\ngenres 45466 non-null object\ndtypes: float64(2), object(4)\nmemory usage: 2.1+ MB\n```", "```py\n#Convert budget to float\ndf['budget'] = df['budget'].astype('float')\n\nOUTPUT: ...\n...\nValueError: could not convert string to float: '/zaSf5OG7V8X8gqFvly88zDdRm46.jpg'\n```", "```py\n#Import the numpy library \nimport numpy as np\n\n#Function to convert to float manually\ndef to_float(x):\n    try:\n        x = float(x)\n    except: \n        x = np.nan\n    return x\n\n#Apply the to_float function to all values in the budget column\nsmall_df['budget'] = small_df['budget'].apply(to_float)\n\n#Try converting to float using pandas astype\nsmall_df['budget'] = small_df['budget'].astype('float')\n\n#Get the data types for all features\nsmall_df.info()\n```", "```py\n#Convert release_date into pandas datetime format\nsmall_df['release_date'] = pd.to_datetime(small_df['release_date'], errors='coerce')\n\n#Extract year from the datetime\nsmall_df['year'] = small_df['release_date'].apply(lambda x: str(x).split('-')[0] if x != np.nan else np.nan)\n\n#Display the DataFrame with the new 'year' feature\nsmall_df.head()\n```", "```py\n#Sort DataFrame based on release year\nsmall_df = small_df.sort_values('year')\n\nsmall_df.head()\n```", "```py\n#Sort Movies based on revenue (in descending order)\nsmall_df = small_df.sort_values('revenue', ascending=False)\n\nsmall_df.head()\n```", "```py\n#Select only those movies which earned more than 1 billion\nnew = small_df[small_df['revenue'] > 1e9]\nnew\n```", "```py\n#Select only those movies which earned more than 1 billion and spent less than 150 million\n\nnew2 = small_df[(small_df['revenue'] > 1e9) & (small_df['budget'] < 1.5e8)]\nnew2\n```", "```py\ntype(small_df['year'])\n\nOUTPUT:\npandas.core.series.Series\n```", "```py\n#Get the runtime Series object\nruntime = small_df['runtime']\n\n#Print the longest runtime of any movie\nprint(runtime.max())\n\n#Print the shortest runtime of any movie\nprint(runtime.min())\n```", "```py\n#Get the budget Series object\nbudget = small_df['budget']\n\n#Print the mean budget of the movies\nprint(budget.mean())\n\n#Print the median budget of the movies\nprint(budget.median())\n```", "```py\n#Get the revenue Series object\nrevenue = small_df['revenue']\n\n#Revenue generated by the 90th percentile movie\nrevenue.quantile(0.90)\n```", "```py\n#Get number of movies released each year\nsmall_df['year'].value_counts()\n```"]