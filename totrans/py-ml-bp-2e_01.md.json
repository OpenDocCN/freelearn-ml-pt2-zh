["```py\nimport requests r = requests.get(r\"https://api.github.com/users/acombs/starred\") r.json() \n```", "```py\nimport matplotlib.pyplot as plt \nplt.style.use('ggplot') \n%matplotlib inline \n```", "```py\nfig, ax = plt.subplots(figsize=(6,4)) \nax.hist(df['petal width (cm)'], color='black'); \nax.set_ylabel('Count', fontsize=12) \nax.set_xlabel('Width', fontsize=12) \nplt.title('Iris Petal Width', fontsize=14, y=1.01) \n```", "```py\nfig, ax = plt.subplots(2,2, figsize=(6,4)) \n\nax[0][0].hist(df['petal width (cm)'], color='black'); \nax[0][0].set_ylabel('Count', fontsize=12) \nax[0][0].set_xlabel('Width', fontsize=12) \nax[0][0].set_title('Iris Petal Width', fontsize=14, y=1.01) \n\nax[0][1].hist(df['petal length (cm)'], color='black'); \nax[0][1].set_ylabel('Count', fontsize=12) \nax[0][1].set_xlabel('Length', fontsize=12) \nax[0][1].set_title('Iris Petal Length', fontsize=14, y=1.01) \n\nax[1][0].hist(df['sepal width (cm)'], color='black'); \nax[1][0].set_ylabel('Count', fontsize=12) \nax[1][0].set_xlabel('Width', fontsize=12) \nax[1][0].set_title('Iris Sepal Width', fontsize=14, y=1.01) \n\nax[1][1].hist(df['sepal length (cm)'], color='black'); \nax[1][1].set_ylabel('Count', fontsize=12) \nax[1][1].set_xlabel('Length', fontsize=12) \nax[1][1].set_title('Iris Sepal Length', fontsize=14, y=1.01) \n\nplt.tight_layout() \n```", "```py\nfig, ax = plt.subplots(figsize=(6,6)) \nax.scatter(df['petal width (cm)'],df['petal length (cm)'],                      color='green') \nax.set_xlabel('Petal Width') \nax.set_ylabel('Petal Length') \nax.set_title('Petal Scatterplot') \n```", "```py\nfig, ax = plt.subplots(figsize=(6,6)) \nax.plot(df['petal length (cm)'], color='blue') \nax.set_xlabel('Specimen Number') \nax.set_ylabel('Petal Length') \nax.set_title('Petal Length Plot') \n```", "```py\nimport numpy as np\nfig, ax = plt.subplots(figsize=(6,6))\nbar_width = .8\nlabels = [x for x in df.columns if 'length' in x or 'width' in x]\nset_y = [df[df['species']==0][x].mean() for x in labels]\nver_y = [df[df['species']==1][x].mean() for x in labels]\nvir_y = [df[df['species']==2][x].mean() for x in labels]\nx = np.arange(len(labels))\nax.bar(x, set_y, bar_width, color='black')\nax.bar(x, ver_y, bar_width, bottom=set_y, color='darkgrey')\nax.bar(x, vir_y, bar_width, bottom=[i+j for i,j in zip(set_y, ver_y)], color='white')\nax.set_xticks(x + (bar_width/2))\nax.set_xticklabels(labels, rotation=-70, fontsize=12);\nax.set_title('Mean Feature Measurement By Species', y=1.01)\nax.legend(['Setosa','Versicolor','Virginica'])   \n```", "```py\nimport seaborn as sns \nsns.pairplot(df, hue='species') \n```", "```py\nfig, ax = plt.subplots(2, 2, figsize=(7, 7)) \nsns.set(style='white', palette='muted') \nsns.violinplot(x=df['species'], y=df['sepal length (cm)'], ax=ax[0,0]) sns.violinplot(x=df['species'], y=df['sepal width (cm)'], ax=ax[0,1]) sns.violinplot(x=df['species'], y=df['petal length (cm)'], ax=ax[1,0]) sns.violinplot(x=df['species'], y=df['petal width (cm)'], ax=ax[1,1]) fig.suptitle('Violin Plots', fontsize=16, y=1.03) \nfor i in ax.flat:\n plt.setp(i.get_xticklabels(), rotation=-90) \nfig.tight_layout() \n```", "```py\nfig, ax = plt.subplots(figsize=(7,7)) \nax.scatter(df['sepal width (cm)'][:50], df['sepal length (cm)'][:50]) \nax.set_ylabel('Sepal Length') \nax.set_xlabel('Sepal Width') \nax.set_title('Setosa Sepal Width vs. Sepal Length', fontsize=14, y=1.02) \n```", "```py\nimport statsmodels.api as sm \n\ny = df['sepal length'][:50] \nx = df['sepal width'][:50] \nX = sm.add_constant(x) \n\nresults = sm.OLS(y, X).fit() \nprint results.summary() \n```", "```py\nfig, ax = plt.subplots(figsize=(7,7)) \nax.plot(x, results.fittedvalues, label='regression line') \nax.scatter(x, y, label='data point', color='r') \nax.set_ylabel('Sepal Length') \nax.set_xlabel('Sepal Width') \nax.set_title('Setosa Sepal Width vs. Sepal Length', fontsize=14, y=1.02) \nax.legend(loc=2) \n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier \nfrom sklearn.cross_validation import train_test_split \n\nclf = RandomForestClassifier(max_depth=5, n_estimators=10) \n\nX = df.ix[:,:4] \ny = df.ix[:,4] \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3) \n\nclf.fit(X_train,y_train) \n\ny_pred = clf.predict(X_test) \n\nrf = pd.DataFrame(zip(y_pred, y_test), columns=['predicted', 'actual']) \nrf['correct'] = rf.apply(lambda r: 1 if r['predicted'] == r['actual'] else 0, axis=1) \n\nrf \n```", "```py\nrf['correct'].sum()/rf['correct'].count() \n```", "```py\nf_importances = clf.feature_importances_ \nf_names = df.columns[:4] \nf_std = np.std([tree.feature_importances_ for tree in clf.estimators_], axis=0) \n\nzz = zip(f_importances, f_names, f_std) \nzzs = sorted(zz, key=lambda x: x[0], reverse=True) \n\nimps = [x[0] for x in zzs] \nlabels = [x[1] for x in zzs] \nerrs = [x[2] for x in zzs] \n\nplt.bar(range(len(f_importances)), imps, color=\"r\", yerr=errs, align=\"center\") \nplt.xticks(range(len(f_importances)), labels); \n```", "```py\nfrom sklearn.multiclass import OneVsRestClassifier \nfrom sklearn.svm import SVC \nfrom sklearn.cross_validation import train_test_split \n\nclf = OneVsRestClassifier(SVC(kernel='linear')) \n\nX = df.ix[:,:4] \ny = np.array(df.ix[:,4]).astype(str) \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.3) \n\nclf.fit(X_train,y_train) \n\ny_pred = clf.predict(X_test) \n\nrf = pd.DataFrame(zip(y_pred, y_test), columns=['predicted', 'actual']) \nrf['correct'] = rf.apply(lambda r: 1 if r['predicted'] == r['actual'] else 0, axis=1) \n\nrf \n```", "```py\nrf['correct'].sum()/rf['correct'].count() \n```"]