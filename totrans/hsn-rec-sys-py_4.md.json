["```py\n#Convert the cleaned (non-exploded) dataframe df into a CSV file and save it in the data folder\n#Set parameter index to False as the index of the DataFrame has no inherent meaning.\ndf.to_csv('../data/metadata_clean.csv', index=False)\n```", "```py\nimport pandas as pd\nimport numpy as np\n\n#Import data from the clean file \ndf = pd.read_csv('../data/metadata_clean.csv')\n\n#Print the head of the cleaned DataFrame\ndf.head()\n```", "```py\n#Import the original file\norig_df = pd.read_csv('../data/movies_metadata.csv', low_memory=False)\n\n#Add the useful features into the cleaned dataframe\ndf['overview'], df['id'] = orig_df['overview'], orig_df['id']\n\ndf.head()\n```", "```py\n#Import TfIdfVectorizer from the scikit-learn library\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\n#Define a TF-IDF Vectorizer Object. Remove all english stopwords\ntfidf = TfidfVectorizer(stop_words='english')\n\n#Replace NaN with an empty string\ndf['overview'] = df['overview'].fillna('')\n\n#Construct the required TF-IDF matrix by applying the fit_transform method on the overview feature\ntfidf_matrix = tfidf.fit_transform(df['overview'])\n\n#Output the shape of tfidf_matrix\ntfidf_matrix.shape\n\nOUTPUT:\n(45466, 75827)\n```", "```py\n# Import linear_kernel to compute the dot product\nfrom sklearn.metrics.pairwise import linear_kernel\n\n# Compute the cosine similarity matrix\ncosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)\n```", "```py\n#Construct a reverse mapping of indices and movie titles, and drop duplicate titles, if any\nindices = pd.Series(df.index, index=df['title']).drop_duplicates()\n```", "```py\n# Function that takes in movie title as input and gives recommendations \ndef content_recommender(title, cosine_sim=cosine_sim, df=df, indices=indices):\n    # Obtain the index of the movie that matches the title\n    idx = indices[title]\n\n    # Get the pairwsie similarity scores of all movies with that movie\n    # And convert it into a list of tuples as described above\n    sim_scores = list(enumerate(cosine_sim[idx]))\n\n    # Sort the movies based on the cosine similarity scores\n    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)\n\n    # Get the scores of the 10 most similar movies. Ignore the first movie.\n    sim_scores = sim_scores[1:11]\n\n    # Get the movie indices\n    movie_indices = [i[0] for i in sim_scores]\n\n    # Return the top 10 most similar movies\n    return df['title'].iloc[movie_indices]\n```", "```py\n#Get recommendations for The Lion King\ncontent_recommender('The Lion King')\n```", "```py\n# Load the keywords and credits files\ncred_df = pd.read_csv('../data/credits.csv')\nkey_df = pd.read_csv('../data/keywords.csv')\n\n#Print the head of the credit dataframe\ncred_df.head()\n```", "```py\n#Print the head of the keywords dataframe\nkey_df.head()\n```", "```py\n#Convert the IDs of df into int\ndf['id'] = df['id'].astype('int')\n```", "```py\n# Function to convert all non-integer IDs to NaN\ndef clean_ids(x):\n    try:\n        return int(x)\n    except:\n        return np.nan\n\n#Clean the ids of df\ndf['id'] = df['id'].apply(clean_ids)\n\n#Filter all rows that have a null ID\ndf = df[df['id'].notnull()]\n```", "```py\n# Convert IDs into integer\ndf['id'] = df['id'].astype('int')\nkey_df['id'] = key_df['id'].astype('int')\ncred_df['id'] = cred_df['id'].astype('int')\n\n# Merge keywords and credits into your main metadata dataframe\ndf = df.merge(cred_df, on='id')\ndf = df.merge(key_df, on='id')\n\n#Display the head of the merged df\ndf.head()\n```", "```py\n# Convert the stringified objects into the native python objects\nfrom ast import literal_eval\n\nfeatures = ['cast', 'crew', 'keywords', 'genres']\nfor feature in features:\n    df[feature] = df[feature].apply(literal_eval)\n```", "```py\n#Print the first cast member of the first movie in df\ndf.iloc[0]['crew'][0]\n\nOUTPUT:\n{'credit_id': '52fe4284c3a36847f8024f49',\n 'department': 'Directing',\n 'gender': 2,\n 'id': 7879,\n 'job': 'Director',\n 'name': 'John Lasseter',\n 'profile_path': '/7EdqiNbr4FRjIhKHyPPdFfEEEFG.jpg'}\n```", "```py\n# Extract the director's name. If director is not listed, return NaN\ndef get_director(x):\n    for crew_member in x:\n        if crew_member['job'] == 'Director':\n            return crew_member['name']\n    return np.nan\n\n```", "```py\n#Define the new director feature\ndf['director'] = df['crew'].apply(get_director)\n\n#Print the directors of the first five movies\ndf['director'].head()\n\nOUTPUT:\n0 John Lasseter\n1 Joe Johnston\n2 Howard Deutch\n3 Forest Whitaker\n4 Charles Shyer\nName: director, dtype: object\n```", "```py\n# Returns the list top 3 elements or entire list; whichever is more.\ndef generate_list(x):\n    if isinstance(x, list):\n        names = [ele['name'] for ele in x]\n        #Check if more than 3 elements exist. If yes, return only first three. \n        #If no, return entire list.\n        if len(names) > 3:\n            names = names[:3]\n        return names\n\n    #Return empty list in case of missing/malformed data\n    return []\n```", "```py\n#Apply the generate_list function to cast and keywords\ndf['cast'] = df['cast'].apply(generate_list)\ndf['keywords'] = df['keywords'].apply(generate_list)\n\n#Only consider a maximum of 3 genres\ndf['genres'] = df['genres'].apply(lambda x: x[:3])\n```", "```py\n# Print the new features of the first 5 movies along with title\ndf[['title', 'cast', 'director', 'keywords', 'genres']].head(3)\n```", "```py\n# Function to sanitize data to prevent ambiguity. \n# Removes spaces and converts to lowercase\ndef sanitize(x):\n    if isinstance(x, list):\n        #Strip spaces and convert to lowercase\n        return [str.lower(i.replace(\" \", \"\")) for i in x]\n    else:\n        #Check if director exists. If not, return empty string\n        if isinstance(x, str):\n            return str.lower(x.replace(\" \", \"\"))\n        else:\n            return ''\n#Apply the generate_list function to cast, keywords, director and genres\nfor feature in ['cast', 'director', 'genres', 'keywords']:\n    df[feature] = df[feature].apply(sanitize)\n```", "```py\n#Function that creates a soup out of the desired metadata\ndef create_soup(x):\n    return ' '.join(x['keywords']) + ' ' + ' '.join(x['cast']) + ' ' + x['director'] + ' ' + ' '.join(x['genres'])\n```", "```py\n# Create the new soup feature\ndf['soup'] = df.apply(create_soup, axis=1)\n```", "```py\n#Display the soup of the first movie\ndf.iloc[0]['soup']\n\nOUTPUT:\n'jealousy toy boy tomhanks timallen donrickles johnlasseter animation comedy family'\n```", "```py\n#Define a new CountVectorizer object and create vectors for the soup\ncount = CountVectorizer(stop_words='english')\ncount_matrix = count.fit_transform(df['soup'])\n```", "```py\n#Import cosine_similarity function\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n#Compute the cosine similarity score (equivalent to dot product for tf-idf vectors)\ncosine_sim2 = cosine_similarity(count_matrix, count_matrix)\n```", "```py\n# Reset index of your df and construct reverse mapping again\ndf = df.reset_index()\nindices2 = pd.Series(df.index, index=df['title'])\n```", "```py\ncontent_recommender('The Lion King', cosine_sim2, df, indices2)\n```"]