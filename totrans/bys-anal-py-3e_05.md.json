["```py\nwith pm.Model() as lm: \n    Intercept = pm.Normal(\"Intercept\", 0, 1) \n    x = pm.Normal(\"x\", 0, 1) \n    y_sigma = pm.HalfNormal(\"sigma\", 1) \n    y_mean = Intercept + x * data[\"x\"] \n    y = pm.Normal(\"y\", y_mean, y_sigma, observed=data[\"y\"])\n```", "```py\na_model = bmb.Model(\"y ∼ x\", data)\n```", "```py\n    Formula: y ~ x      Family: gaussian          Link: mu = identity  Observations: 117      Priors:  target = mu      Common-level effects          Intercept ~ Normal(mu: 0.02, sigma: 2.8414)          x ~ Normal(mu: 0.0, sigma: 3.1104)        Auxiliary parameters          sigma ~ HalfStudentT(nu: 4.0, sigma: 1.1348)\n```", "```py\npriors = {\"x\": bmb.Prior(\"HalfNormal\", sigma=3), \n          \"sigma\": bmb.Prior(\"Gamma\",  mu=1, sigma=2), \n          } \na_model_wcp = bmb.Model(\"y ∼ x\", data, priors=priors)\n```", "```py\n       Formula: y ~ x          Family: gaussian            Link: mu = identity    Observations: 117          Priors:      target = mu          Common-level effects              Intercept ~ Normal(mu: 0.02, sigma: 2.837)              x ~ HalfNormal(sigma: 3.0)            Auxiliary parameters              sigma ~ Gamma(mu: 1.0, sigma: 2.0)\n```", "```py\nno_intercept_model = bmb.Model(\"y ∼ 0 + x\", data)\n```", "```py\nno_intercept_model = bmb.Model(\"y ∼ -1 + x\", data)\n```", "```py\nmodel_2 = bmb.Model(\"y ∼ x + z\", data)\n```", "```py\nmodel_h = bmb.Model(\"y ∼ x + z + (x | g)\", data)\n```", "```py\nbikes = pd.read_csv(\"data/bikes.csv\")\n```", "```py\nmodel_t = bmb.Model(\"rented ∼ temperature\", bikes, family=\"negativebinomial\") \nidata_t = model_t.fit()\n```", "```py\n_, axes = plt.subplots(1, 2, sharey=True, figsize=(12, 4)) \nbmb.interpret.plot_predictions(model_t, idata_t, \n                               \"temperature\", ax=axes[0]) \nbmb.interpret.plot_predictions(model_t, idata_t, \n                               \"temperature\", pps=True, ax=axes[1])\n```", "```py\nmodel_th = bmb.Model(\"rented ∼ temperature + humidity\", bikes, \n                     family=\"negativebinomial\") \n\nidata_th = model_th.fit() \n\nbmb.interpret.plot_predictions(model_th, idata_th, [\"temperature\", \"humidity\"], \n                               subplot_kwargs={\"group\":None, \"panel\":\"humidity\"})\n```", "```py\n\"y ∼ x + I(x ** 2) + I(x ** 3) + I(x ** 4)\"\n```", "```py\n\"y ∼ poly(x, 4)\"\n```", "```py\nmodel_poly4 = bmb.Model(\"rented ∼ poly(temperature, degree=4)\", bikes, \n                       family=\"negativebinomial\") \nidata_poly4 = model_poly4.fit()\n```", "```py\nnum_knots = 6 \nknots = np.linspace(0, 23, num_knots+2)[1:-1] \nmodel_spline = bmb.Model(\"rented ∼ bs(hour, degree=3, knots=knots)\", bikes, \n                         family=\"negativebinomial\") \nidata_spline = model_spline.fit()\n```", "```py\nformula = bmb.Formula( \n    \"length ∼ np.sqrt(month)\", \n    \"sigma ∼ month\" \n) \nmodel_dis = bmb.Model(formula, babies) \nidata_dis = model_dis.fit()\n```", "```py\nmodel_dis.predict(idata_dis, kind=\"pps\", data=pd.DataFrame({\"month\":[0.5]}))\n```", "```py\npenguins = pd.read_csv(\"data/penguins.csv\").dropna() \n\nmodel_p = bmb.Model(\"body_mass ∼ bill_length + species\", data=penguins) \nidata_p = model_p.fit()\n```", "```py\n# No interaction \nmodel_noint = bmb.Model(\"body_mass ∼ bill_depth + bill_length\", \n                        data=penguins) \n\n#Interaction \nmodel_int = bmb.Model(\"body_mass ∼ bill_depth + bill_length + \n                      bill_depth:bill_length\", \n                      data=penguins) \n\nidata_noint = model_noint.fit() \nidata_int = model_int.fit()\n```", "```py\nbmb.interpret.plot_comparisons(model_int, idata_int, \n                               contrast={\"bill_depth\":[1.4, 1.8]}, \n                               conditional={\"bill_length\":[3.5, 4.5, 5.5]})\n```", "```py\nbmb.interpret.plot_slopes(model_int, idata_int, \n                          wrt={\"bill_depth\":1.8}, \n                          conditional={\"bill_length\":[3.5, 4.5, 5.5]},\n```", "```py\nmodel = bmb.Model(\"siri ∼ age + weight + height + abdomen + thigh + wrist\", \n                  data=body) \nidata = model.fit(idata_kwargs={'log_likelihood': True})\n```", "```py\nppi = kpt.ProjectionPredictive(model, idata) \nppi.search()\n```", "```py\nprint(ppi)\n```", "```py\n  0 siri ~ 1\n  1 siri ~ abdomen\n  2 siri ~ abdomen + wrist\n  3 siri ~ abdomen + wrist + height\n  4 siri ~ abdomen + wrist + height + age\n  5 siri ~ abdomen + wrist + height + age + weight\n  6 siri ~ abdomen + wrist + height + age + weight + thigh\n```", "```py\nsubmodel = ppi.project(3)\n```"]