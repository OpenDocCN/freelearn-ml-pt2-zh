["```py\n# --- SECTION 1 ---\n# Libraries and data loading\nfrom sklearn.datasets import load_digits\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn import metrics\nimport numpy as np\n\ndigits = load_digits()\n\ntrain_size = 1500\ntrain_x, train_y = digits.data[:train_size], digits.target[:train_size]\ntest_x, test_y = digits.data[train_size:], digits.target[train_size:]\n\nnp.random.seed(123456)\n```", "```py\n# --- SECTION 2 ---\n# Create the ensemble\nensemble_size = 500\nensemble = RandomForestClassifier(n_estimators=ensemble_size, n_jobs=4)\n\n# --- SECTION 3 ---\n# Train the ensemble\nensemble.fit(train_x, train_y)\n\n# --- SECTION 4 ---\n# Evaluate the ensemble\nensemble_predictions = ensemble.predict(test_x)\n\nensemble_acc = metrics.accuracy_score(test_y, ensemble_predictions)\n\n# --- SECTION 5 ---\n# Print the accuracy\nprint('Random Forest: %.2f' % ensemble_acc)\n```", "```py\n# --- SECTION 1 ---\n# Libraries and data loading\nfrom copy import deepcopy\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import RandomForestRegressor\nfrom sklearn import metrics\n\nimport numpy as np\n\ndiabetes = load_diabetes()\n\ntrain_size = 400\ntrain_x, train_y = diabetes.data[:train_size], diabetes.target[:train_size]\ntest_x, test_y = diabetes.data[train_size:], diabetes.target[train_size:]\n\nnp.random.seed(123456)\n\n# --- SECTION 2 ---\n# Create the ensemble\nensemble_size = 100\nensemble = RandomForestRegressor(n_estimators=ensemble_size, n_jobs=4)\n\n# --- SECTION 3 ---\n# Evaluate the ensemble\nensemble.fit(train_x, train_y)\npredictions = ensemble.predict(test_x)\n\n# --- SECTION 4 ---\n# Print the metrics\nr2 = metrics.r2_score(test_y, predictions)\nmse = metrics.mean_squared_error(test_y, predictions)\n\nprint('Random Forest:')\nprint('R-squared: %.2f' % r2)\nprint('MSE: %.2f' % mse)\n```", "```py\n\n# --- SECTION 1 ---\n# Libraries and data loading\nfrom sklearn.datasets import load_digits\nfrom sklearn.ensemble import ExtraTreesClassifier\nfrom sklearn import metrics\nimport numpy as np\n\ndigits = load_digits()\n\ntrain_size = 1500\ntrain_x, train_y = digits.data[:train_size], digits.target[:train_size]\ntest_x, test_y = digits.data[train_size:], digits.target[train_size:]\n\nnp.random.seed(123456)\n# --- SECTION 2 ---\n# Create the ensemble\nensemble_size = 500\nensemble = ExtraTreesClassifier(n_estimators=ensemble_size, n_jobs=4)\n\n# --- SECTION 3 ---\n# Train the ensemble\nensemble.fit(train_x, train_y)\n\n# --- SECTION 4 ---\n# Evaluate the ensemble\nensemble_predictions = ensemble.predict(test_x)\n\nensemble_acc = metrics.accuracy_score(test_y, ensemble_predictions)\n\n# --- SECTION 5 ---\n# Print the accuracy\nprint('Extra Tree Forest: %.2f' % ensemble_acc)\n```", "```py\n# --- SECTION 1 ---\n# Libraries and data loading\nfrom copy import deepcopy\nfrom sklearn.datasets import load_diabetes\nfrom sklearn.ensemble import ExtraTreesRegressor\nfrom sklearn import metrics\n\nimport numpy as np\n\ndiabetes = load_diabetes()\n\ntrain_size = 400\ntrain_x, train_y = diabetes.data[:train_size], diabetes.target[:train_size]\ntest_x, test_y = diabetes.data[train_size:], diabetes.target[train_size:]\n\nnp.random.seed(123456)\n\n# --- SECTION 2 ---\n# Create the ensemble\nensemble_size = 100\nensemble = ExtraTreesRegressor(n_estimators=ensemble_size, n_jobs=4)\n\n# --- SECTION 3 ---\n# Evaluate the ensemble\nensemble.fit(train_x, train_y)\npredictions = ensemble.predict(test_x)\n\n# --- SECTION 4 ---\n# Print the metrics\nr2 = metrics.r2_score(test_y, predictions)\nmse = metrics.mean_squared_error(test_y, predictions)\n\nprint('Extra Trees:')\nprint('R-squared: %.2f' % r2)\nprint('MSE: %.2f' % mse)\n```"]