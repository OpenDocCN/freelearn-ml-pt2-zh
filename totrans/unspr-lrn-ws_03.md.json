["```py\n    Clusters (4): [ (1,7) ], [ (-5,9) ], [ (-9,4) ] , [ (4, -2) ]\n    Centroids (4): [ (1,7) ], [ (-5,9) ], [ (-9,4) ] , [ (4, -2) ]\n    ```", "```py\n    [ [1,7], [-5,9] ]\n    [-9,4]\n    [4,-2] \n    ```", "```py\n    mean([ [1,7], [-5,9] ]) = [-2,8]\n    ```", "```py\n    Clusters (3): \n    [ [1,7], [-5,9] ]\n    [-9,4]\n    [4,-2] \n    ```", "```py\n    [-2,8]\n    [-9,4]\n    [4,-2]\n    ```", "```py\n    Clusters (2): \n    [ [1,7], [-5,9], [-9,4] ]\n    [4,-2] \n    ```", "```py\n    Clusters (1): \n    [ [ [1,7], [-5,9], [-9,4], [4,-2] ] ]\n    ```", "```py\n    from scipy.cluster.hierarchy import linkage, dendrogram, fcluster\n    from sklearn.datasets import make_blobs\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    ```", "```py\n    X, y = make_blobs(n_samples=1000, centers=8, \\\n                      n_features=2, random_state=800)\n    ```", "```py\n    plt.scatter(X[:,0], X[:,1])\n    plt.show()\n    ```", "```py\n    # Generate distance matrix with 'linkage' function\n    distances = linkage(X, method=\"centroid\", metric=\"euclidean\")\n    print(distances)\n    ```", "```py\n    # Take normal dendrogram output and stylize in cleaner way\n    def annotated_dendrogram(*args, **kwargs):\n        # Standard dendrogram from SciPy\n        scipy_dendro = dendrogram(*args, truncate_mode='lastp', \\\n                                  show_contracted=True,\\\n                                  leaf_rotation=90.)\n        plt.title('Blob Data Dendrogram')\n        plt.xlabel('cluster size')\n        plt.ylabel('distance')\n        for i, d, c in zip(scipy_dendro['icoord'], \\\n                           scipy_dendro['dcoord'], \\\n                           scipy_dendro['color_list']):\n            x = 0.5 * sum(i[1:3])\n            y = d[1]\n            if y > 10:\n                plt.plot(x, y, 'o', c=c)\n                plt.annotate(\"%.3g\" % y, (x, y), xytext=(0, -5), \\\n                             textcoords='offset points', \\\n                             va='top', ha='center')\n        return scipy_dendro\n    dn = annotated_dendrogram(distances)\n    plt.show()\n    ```", "```py\n    scipy_clusters = fcluster(distances, 3, criterion=\"distance\")\n    plt.scatter(X[:,0], X[:,1], c=scipy_clusters)\n    plt.show()\n    ```", "```py\ndist(a,b) = min( dist( a[i]), b[j] ) )\n```", "```py\ndist(a,b) = max( dist( a[i]), b[j] ) )\n```", "```py\n['centroid', 'single', 'complete', 'average', 'weighted']\n```", "```py\n    from scipy.cluster.hierarchy import linkage, dendrogram, fcluster\n    from sklearn.datasets import make_blobs\n    import matplotlib.pyplot as plt\n    %matplotlib inline\n    ```", "```py\n    X, y = make_blobs(n_samples=1000, centers=8, \\\n                      n_features=2, random_state=800)\n    ```", "```py\n    plt.scatter(X[:,0], X[:,1])\n    plt.show()\n    ```", "```py\n    methods = ['centroid', 'single', 'complete', \\\n               'average', 'weighted']\n    ```", "```py\n    for method in methods:\n        distances = linkage(X, method=method, metric=\"euclidean\")\n        clusters = fcluster(distances, 3, criterion=\"distance\") \n        plt.title('linkage: ' + method)\n        plt.scatter(X[:,0], X[:,1], c=clusters, cmap='tab20b')\n        plt.show()\n    ```", "```py\n    from sklearn.cluster import AgglomerativeClustering\n    from sklearn.datasets import make_blobs\n    import matplotlib.pyplot as plt\n    from scipy.cluster.hierarchy import linkage, dendrogram, fcluster\n    ac = AgglomerativeClustering(n_clusters = 8, \\\n                                 affinity=\"euclidean\", \\\n                                 linkage=\"average\")\n    X, y = make_blobs(n_samples=1000, centers=8, \\\n                      n_features=2, random_state=800)\n    ```", "```py\n    distances = linkage(X, method=\"centroid\", metric=\"euclidean\")\n    sklearn_clusters = ac.fit_predict(X)\n    scipy_clusters = fcluster(distances, 3, criterion=\"distance\")\n    ```", "```py\n    plt.figure(figsize=(6,4))\n    plt.title(\"Clusters from Sci-Kit Learn Approach\")\n    plt.scatter(X[:, 0], X[:, 1], c = sklearn_clusters ,\\\n                s=50, cmap='tab20b')\n    plt.show()\n    ```", "```py\nplt.figure(figsize=(6,4))\nplt.title(\"Clusters from SciPy Approach\")\nplt.scatter(X[:, 0], X[:, 1], c = scipy_clusters ,\\\n            s=50, cmap='tab20b')\nplt.show()\n```"]