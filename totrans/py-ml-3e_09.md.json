["```py\n>>> import pickle\n>>> import os\n>>> dest = os.path.join('movieclassifier', 'pkl_objects')\n>>> if not os.path.exists(dest):\n...     os.makedirs(dest)\n>>> pickle.dump(stop,\n...             open(os.path.join(dest, 'stopwords.pkl'), 'wb'),\n...             protocol=4)\n>>> pickle.dump(clf,\n...             open(os.path.join(dest, 'classifier.pkl'), 'wb'),\n...             protocol=4) \n```", "```py\nfrom sklearn.feature_extraction.text import HashingVectorizer\nimport re\nimport os\nimport pickle\ncur_dir = os.path.dirname(__file__)\nstop = pickle.load(open(os.path.join(\n                   cur_dir, 'pkl_objects', 'stopwords.pkl'),\n                   'rb'))\ndef tokenizer(text):\n    text = re.sub('<[^>]*>', '', text)\n    emoticons = re.findall('(?::|;|=)(?:-)?(?:\\)|\\(|D|P)',\n                           text.lower())\n    text = re.sub('[\\W]+', ' ', text.lower()) \\\n                  + ' '.join(emoticons).replace('-', '')\n    tokenized = [w for w in text.split() if w not in stop]\n    return tokenized\n\nvect = HashingVectorizer(decode_error='ignore',\n                         n_features=2**21,\n                         preprocessor=None,\n                         tokenizer=tokenizer) \n```", "```py\n>>> import pickle\n>>> import re\n>>> import os\n>>> from vectorizer import vect\n>>> clf = pickle.load(open(os.path.join(\n...                   'pkl_objects', 'classifier.pkl'),\n...                   'rb')) \n```", "```py\n>>> import numpy as np\n>>> label = {0:'negative', 1:'positive'}\n>>> example = [\"I love this movie. It's amazing.\"]\n>>> X = vect.transform(example)\n>>> print('Prediction: %s\\nProbability: %.2f%%' %\\\n...       (label[clf.predict(X)[0]],\n...        np.max(clf.predict_proba(X))*100))\nPrediction: positive\nProbability: 95.55% \n```", "```py\n>>> import sqlite3\n>>> import os\n>>> conn = sqlite3.connect('reviews.sqlite')\n>>> c = conn.cursor()\n>>> c.execute('DROP TABLE IF EXISTS review_db')\n>>> c.execute('CREATE TABLE review_db'\\\n...           ' (review TEXT, sentiment INTEGER, date TEXT)')\n>>> example1 = 'I love this movie'\n>>> c.execute(\"INSERT INTO review_db\"\\\n...           \" (review, sentiment, date) VALUES\"\\\n...           \" (?, ?, DATETIME('now'))\", (example1, 1))\n>>> example2 = 'I disliked this movie'\n>>> c.execute(\"INSERT INTO review_db\"\\\n...           \" (review, sentiment, date) VALUES\"\\\n...           \" (?, ?, DATETIME('now'))\", (example2, 0))\n>>> conn.commit()\n>>> conn.close() \n```", "```py\n>>> conn = sqlite3.connect('reviews.sqlite')\n>>> c = conn.cursor()\n>>> c.execute(\"SELECT * FROM review_db WHERE date\"\\\n...           \" BETWEEN '2017-01-01 00:00:00' AND DATETIME('now')\")\n>>> results = c.fetchall()\n>>> conn.close()\n>>> print(results)\n[('I love this movie', 1, '2019-06-15 17:53:46'), ('I disliked this movie', 0, '2019-06-15 17:53:46')] \n```", "```py\nconda install flask\n# or: pip install flask \n```", "```py\n1st_flask_app_1/\n    app.py\n    templates/\n        first_app.html \n```", "```py\nfrom flask import Flask, render_template\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('first_app.html')\nif __name__ == '__main__':\n    app.run() \n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>First app</title>\n  </head>\n  <body>\n    <div>Hi, this is my first Flask web app!</div>\n  </body>\n</html> \n```", "```py\npython3 app.py \n```", "```py\n* Running on http://127.0.0.1:5000/ \n```", "```py\nconda install wtforms\n# or pip install wtforms \n```", "```py\n1st_flask_app_2/\n    app.py\n    static/\n        style.css\n    templates/\n        _formhelpers.html\n        first_app.html\n        hello.html \n```", "```py\nfrom flask import Flask, render_template, request\nfrom wtforms import Form, TextAreaField, validators\napp = Flask(__name__)\nclass HelloForm(Form):\n    sayhello = TextAreaField('',[validators.DataRequired()])\n@app.route('/')\ndef index():\n    form = HelloForm(request.form)\n    return render_template('first_app.html', form=form)\n@app.route('/hello', methods=['POST'])\ndef hello():\n    form = HelloForm(request.form)\n    if request.method == 'POST' and form.validate():\n        name = request.form['sayhello']\n        return render_template('hello.html', name=name)\n    return render_template('first_app.html', form=form)\nif __name__ == '__main__':\n    app.run(debug=True) \n```", "```py\n{% macro render_field(field) %}\n  <dt>{{ field.label }}\n  <dd>{{ field(**kwargs)|safe }}\n  {% if field.errors %}\n    <ul class=errors>\n    {% for error in field.errors %}\n      <li>{{ error }}</li>\n    {% endfor %}\n    </ul>\n  {% endif %}\n  </dd>\n  </dt>\n{% endmacro %} \n```", "```py\nbody {\n     font-size: 2em;\n} \n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>First app</title>\n      <link rel=\"stylesheet\"\n       href=\"{{ url_for('static', filename='style.css') }}\">\n  </head>\n  <body>\n    {% from \"_formhelpers.html\" import render_field %}\n    <div>What's your name?</div>\n    <form method=post action=\"/hello\">\n      <dl>\n        {{ render_field(form.sayhello) }}\n      </dl>\n      <input type=submit value='Say Hello' name='submit_btn'>\n    </form>\n  </body>\n</html> \n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>First app</title>\n      <link rel=\"stylesheet\"\n       href=\"{{ url_for('static', filename='style.css') }}\">\n  </head>\n  <body>\n    <div>Hello {{ name }}</div>\n  </body>\n</html> \n```", "```py\npython3 app.py \n```", "```py\nfrom flask import Flask, render_template, request\nfrom wtforms import Form, TextAreaField, validators\nimport pickle\nimport sqlite3\nimport os\nimport numpy as np\n# import HashingVectorizer from local dir\nfrom vectorizer import vect\napp = Flask(__name__)\n######## Preparing the Classifier\ncur_dir = os.path.dirname(__file__)\nclf = pickle.load(open(os.path.join(cur_dir,\n                  'pkl_objects', 'classifier.pkl'),\n                  'rb'))\ndb = os.path.join(cur_dir, 'reviews.sqlite')\ndef classify(document):\n    label = {0: 'negative', 1: 'positive'}\n    X = vect.transform([document])\n    y = clf.predict(X)[0]\n    proba = np.max(clf.predict_proba(X))\n    return label[y], proba\ndef train(document, y):\n    X = vect.transform([document])\n    clf.partial_fit(X, [y])\ndef sqlite_entry(path, document, y):\n    conn = sqlite3.connect(path)\n    c = conn.cursor()\n    c.execute(\"INSERT INTO review_db (review, sentiment, date)\"\\\n              \" VALUES (?, ?, DATETIME('now'))\", (document, y))\n    conn.commit()\n    conn.close() \n```", "```py\n######## Flask\nclass ReviewForm(Form):\n    moviereview = TextAreaField('',\n                                [validators.DataRequired(),\n                                 validators.length(min=15)])\n@app.route('/')\ndef index():\n    form = ReviewForm(request.form)\n    return render_template('reviewform.html', form=form)\n@app.route('/results', methods=['POST'])\ndef results():\n    form = ReviewForm(request.form)\n    if request.method == 'POST' and form.validate():\n        review = request.form['moviereview']\n        y, proba = classify(review)\n        return render_template('results.html',\n                               content=review,\n                               prediction=y,\n                               probability=round(proba*100, 2))\n    return render_template('reviewform.html', form=form)\n@app.route('/thanks', methods=['POST'])\ndef feedback():\n    feedback = request.form['feedback_button']\n    review = request.form['review']\n    prediction = request.form['prediction']\n\n    inv_label = {'negative': 0, 'positive': 1}\n    y = inv_label[prediction]\n    if feedback == 'Incorrect':\n        y = int(not(y))\n    train(review, y)\n    sqlite_entry(db, review, y)\n    return render_template('thanks.html')\nif __name__ == '__main__':\n    app.run(debug=True) \n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>Movie Classification</title>\n      <link rel=\"stylesheet\"\n       href=\"{{ url_for('static', filename='style.css') }}\">\n  </head>\n  <body>\n\n    <h2>Please enter your movie review:</h2>\n\n    {% from \"_formhelpers.html\" import render_field %}\n\n    <form method=post action=\"/results\">\n      <dl>\n        {{ render_field(form.moviereview, cols='30', rows='10') }}\n      </dl>\n      <div>\n        <input type=submit value='Submit review' name='submit_btn'>\n      </div>\n    </form>\n\n  </body>\n</html> \n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>Movie Classification</title>\n      <link rel=\"stylesheet\"\n       href=\"{{ url_for('static', filename='style.css') }}\">\n  </head>\n  <body>\n\n    <h3>Your movie review:</h3>\n    <div>{{ content }}</div>\n\n    <h3>Prediction:</h3>\n    <div>This movie review is <strong>{{ prediction }}</strong>\n    (probability: {{ probability }}%).</div>\n\n    <div id='button'>\n      <form action=\"/thanks\" method=\"post\">\n        <input type=submit value='Correct' name='feedback_button'>\n        <input type=submit value='Incorrect' name='feedback_button'>\n        <input type=hidden value='{{ prediction }}' name='prediction'>\n        <input type=hidden value='{{ content }}' name='review'>\n      </form>\n    </div>\n\n    <div id='button'>\n      <form action=\"/\">\n        <input type=submit value='Submit another review'>\n      </form>\n    </div>\n\n  </body>\n</html> \n```", "```py\nbody{\n  width:600px;\n}\n.button{\n  padding-top: 20px;\n} \n```", "```py\n<!doctype html>\n<html>\n  <head>\n    <title>Movie Classification</title>\n      <link rel=\"stylesheet\"\n       href=\"{{ url_for('static', filename='style.css') }}\">\n  </head>\n  <body>\n\n    <h3>Thank you for your feedback!</h3>\n\n    <div id='button'>\n      <form action=\"/\">\n        <input type=submit value='Submit another review'>\n      </form>\n    </div>\n\n  </body>\n</html> \n```", "```py\npython3 app.py \n```", "```py\nimport pickle\nimport sqlite3\nimport numpy as np\nimport os\n# import HashingVectorizer from local dir\nfrom vectorizer import vect\ndef update_model(db_path, model, batch_size=10000):\n    conn = sqlite3.connect(db_path)\n    c = conn.cursor()\n    c.execute('SELECT * from review_db')\n\n    results = c.fetchmany(batch_size)\n    while results:\n        data = np.array(results)\n        X = data[:, 0]\n        y = data[:, 1].astype(int)\n\n        classes = np.array([0, 1])\n        X_train = vect.transform(X)\n        model.partial_fit(X_train, y, classes=classes)\n        results = c.fetchmany(batch_size)\n\n    conn.close()\n    return model\ncur_dir = os.path.dirname(__file__)\nclf = pickle.load(open(os.path.join(cur_dir,\n                  'pkl_objects',\n                  'classifier.pkl'), 'rb'))\ndb = os.path.join(cur_dir, 'reviews.sqlite')\nclf = update_model(db_path=db, model=clf, batch_size=10000)\n# Uncomment the following lines if you are sure that\n# you want to update your classifier.pkl file\n# permanently.\n# pickle.dump(clf, open(os.path.join(cur_dir,\n#             'pkl_objects', 'classifier.pkl'), 'wb'),\n#             protocol=4) \n```", "```py\n# import update function from local dir\nfrom update import update_model \n```", "```py\n...\nif __name__ == '__main__':\n    clf = update_model(db_path=db,\n                       model=clf,\n                       batch_size=10000)\n... \n```", "```py\nfrom shutil import copyfile\nimport time \n```", "```py\npickle.dump(\n    clf, open(\n        os.path.join(\n            cur_dir, 'pkl_objects',\n            'classifier.pkl'),\n        'wb'),\n    protocol=4) \n```", "```py\ntimestr = time.strftime(\"%Y%m%d-%H%M%S\")\norig_path = os.path.join(\n    cur_dir, 'pkl_objects', 'classifier.pkl')\nbackup_path = os.path.join(\n    cur_dir, 'pkl_objects',\n    'classifier_%s.pkl' % timestr)\ncopyfile(orig_path, backup_path) \n```"]