["```py\n> predicted_prob <- predict(credit_model, credit_test, type = \"prob\")\n\n```", "```py\n> sms_test_prob <- predict(sms_classifier, sms_test, type = \"raw\")\n\n```", "```py\n> head(sms_test_prob)\n ham         spam\n[1,] 9.999995e-01 4.565938e-07\n[2,] 9.999995e-01 4.540489e-07\n[3,] 9.998418e-01 1.582360e-04\n[4,] 9.999578e-01 4.223125e-05\n[5,] 4.816137e-10 1.000000e+00\n[6,] 9.997970e-01 2.030033e-04\n\n```", "```py\n> head(sms_results)\n actual_type predict_type prob_spam prob_ham\n1         ham          ham   0.00000  1.00000\n2         ham          ham   0.00000  1.00000\n3         ham          ham   0.00016  0.99984\n4         ham          ham   0.00004  0.99996\n5        spam         spam   1.00000  0.00000\n6         ham          ham   0.00020  0.99980\n\n```", "```py\n> head(subset(sms_results, prob_spam > 0.40 & prob_spam < 0.60))\n actual_type predict_type prob_spam prob_ham\n377         spam          ham   0.47536  0.52464\n717          ham         spam   0.56188  0.43812\n1311         ham         spam   0.57917  0.42083\n\n```", "```py\n> head(subset(sms_results, actual_type != predict_type))\n actual_type predict_type prob_spam prob_ham\n53         spam          ham   0.00071  0.99929\n59         spam          ham   0.00156  0.99844\n73         spam          ham   0.01708  0.98292\n76         spam          ham   0.00851  0.99149\n184        spam          ham   0.01243  0.98757\n332        spam          ham   0.00003  0.99997\n\n```", "```py\n> table(sms_results$actual_type, sms_results$predict_type)\n\n ham spam\n ham  1203    4\n spam   31  152\n\n```", "```py\n> library(gmodels)\n> CrossTable(sms_results$actual_type, sms_results$predict_type)\n\n```", "```py\n> (152 + 1203) / (152 + 1203 + 4 + 31)\n[1] 0.9748201\n\n```", "```py\n> (4 + 31) / (152 + 1203 + 4 + 31)\n[1] 0.02517986\n\n```", "```py\n> 1 - 0.9748201\n[1] 0.0251799\n\n```", "```py\n> library(caret)\n> confusionMatrix(sms_results$predict_type,\n sms_results$actual_type, positive = \"spam\")\n\n```", "```py\n> pr_a <- 0.865 + 0.109\n> pr_a\n[1] 0.974\n\n```", "```py\n> pr_e <- 0.868 * 0.888 + 0.132 * 0.112\n> pr_e\n[1] 0.785568\n\n```", "```py\n> k <- (pr_a - pr_e) / (1 - pr_e)\n> k\n[1] 0.8787494\n\n```", "```py\n> library(vcd)\n> Kappa(table(sms_results$actual_type, sms_results$predict_type))\n value        ASE\nUnweighted 0.8825203 0.01949315\nWeighted   0.8825203 0.01949315\n\n```", "```py\n> kappa2(sms_results[1:2])\n Cohen's Kappa for 2 Raters (Weights: unweighted)\n\n Subjects = 1390 \n Raters = 2 \n Kappa = 0.883 \n\n z = 33 \n p-value = 0\n\n```", "```py\n> sens <- 152 / (152 + 31)\n> sens\n[1] 0.8306011\n\n```", "```py\n> spec <- 1203 / (1203 + 4)\n> spec\n[1] 0.996686\n\n```", "```py\n> library(caret)\n> sensitivity(sms_results$predict_type, sms_results$actual_type,\n positive = \"spam\")\n[1] 0.8306011\n\n> specificity(sms_results$predict_type, sms_results$actual_type,\n negative = \"ham\")\n[1] 0.996686\n\n```", "```py\n> prec <- 152 / (152 + 4)\n> prec\n[1] 0.974359\n\n```", "```py\n> rec <- 152 / (152 + 31)\n> rec\n[1] 0.8306011\n\n```", "```py\n> library(caret)\n> posPredValue(sms_results$predict_type, sms_results$actual_type,\n positive = \"spam\")\n[1] 0.974359\n\n```", "```py\n> sensitivity(sms_results$predict_type, sms_results$actual_type, \n positive = \"spam\")\n[1] 0.8306011\n\n```", "```py\n> f <- (2 * prec * rec) / (prec + rec)\n> f\n[1] 0.8967552\n\n```", "```py\n> f <- (2 * 152) / (2 * 152 + 4 + 31)\n> f\n[1] 0.8967552\n\n```", "```py\n> library(ROCR)\n> pred <- prediction(predictions = sms_results$prob_spam,\n labels = sms_results$actual_type)\n\n```", "```py\n> perf <- performance(pred, measure = \"tpr\", x.measure = \"fpr\")\n\n```", "```py\n> plot(perf, main = \"ROC curve for SMS spam filter\",\n col = \"blue\", lwd = 3)\n\n```", "```py\n> abline(a = 0, b = 1, lwd = 2, lty = 2)\n\n```", "```py\n> perf.auc <- performance(pred, measure = \"auc\")\n\n```", "```py\n> str(perf.auc)\nFormal class 'performance' [package \"ROCR\"] with 6 slots\n ..@ x.name      : chr \"None\"\n ..@ y.name      : chr \"Area under the ROC curve\"\n ..@ alpha.name  : chr \"none\"\n ..@ x.values    : list()\n ..@ y.values    :List of 1\n .. ..$ : num 0.984\n ..@ alpha.values: list()\n\n```", "```py\n> unlist(perf.auc@y.values)\n[1] 0.9835862\n\n```", "```py\n> random_ids <- order(runif(1000))\n\n```", "```py\n> credit_train <- credit[random_ids[1:500], ]\n> credit_validate <- credit[random_ids[501:750], ]\n> credit_test <- credit[random_ids[751:1000], ]\n\n```", "```py\n> in_train <- createDataPartition(credit$default, p = 0.75,\n list = FALSE)\n> credit_train <- credit[in_train, ]\n> credit_test <- credit[-in_train, ]\n\n```", "```py\n> folds <- createFolds(credit$default, k = 10)\n\n```", "```py\n> str(folds)\nList of 10\n $ Fold01: int [1:100] 1 5 12 13 19 21 25 32 36 38 ...\n $ Fold02: int [1:100] 16 49 78 81 84 93 105 108 128 134 ...\n $ Fold03: int [1:100] 15 48 60 67 76 91 102 109 117 123 ...\n $ Fold04: int [1:100] 24 28 59 64 75 85 95 97 99 104 ...\n $ Fold05: int [1:100] 9 10 23 27 29 34 37 39 53 61 ...\n $ Fold06: int [1:100] 4 8 41 55 58 103 118 121 144 146 ...\n $ Fold07: int [1:100] 2 3 7 11 14 33 40 45 51 57 ...\n $ Fold08: int [1:100] 17 30 35 52 70 107 113 129 133 137 ...\n $ Fold09: int [1:100] 6 20 26 31 42 44 46 63 79 101 ...\n $ Fold10: int [1:100] 18 22 43 50 68 77 80 88 106 111 ...\n\n```", "```py\n> credit01_test <- credit[folds$Fold01, ]\n> credit01_train <- credit[-folds$Fold01, ]\n\n```", "```py\n> library(caret)\n> library(C50)\n> library(irr)\n\n```", "```py\n> set.seed(123)\n> folds <- createFolds(credit$default, k = 10)\n\n```", "```py\n> cv_results <- lapply(folds, function(x) {\n credit_train <- credit[-x, ]\n credit_test <- credit[x, ]\n credit_model <- C5.0(default ~ ., data = credit_train)\n credit_pred <- predict(credit_model, credit_test)\n credit_actual <- credit_test$default\n kappa <- kappa2(data.frame(credit_actual, credit_pred))$value\n return(kappa)\n })\n\n```", "```py\n> str(cv_results)\nList of 10\n $ Fold01: num 0.343\n $ Fold02: num 0.255\n $ Fold03: num 0.109\n $ Fold04: num 0.107\n $ Fold05: num 0.338\n $ Fold06: num 0.474\n $ Fold07: num 0.245\n $ Fold08: num 0.0365\n $ Fold09: num 0.425\n $ Fold10: num 0.505\n\n```", "```py\n> mean(unlist(cv_results))\n[1] 0.283796\n\n```"]