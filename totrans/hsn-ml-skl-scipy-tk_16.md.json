["```py\n          pip install -U scikit-surprise==1.1.0\n\n```", "```py\nfrom sklearn.datasets import fetch_openml\n\ndata = fetch_openml(data_id=1220)\n\ndf = pd.DataFrame(\n    data['data'],\n    columns=data['feature_names']\n)[['user_id', 'ad_id']].astype(int)\n\ndf['user_rating'] = pd.Series(data['target']).astype(int)\n```", "```py\ndf['user_rating'].mean()\n```", "```py\ndf.head(10).groupby(\n    ['user_id', 'ad_id']\n).max().reset_index().pivot(\n    'user_id', 'ad_id', 'user_rating'\n).fillna(0).astype(int)\n```", "```py\nfrom surprise.dataset import Dataset\nfrom surprise import Reader\n\nreader = Reader(rating_scale=(0, 1))\ndataset = Dataset.load_from_df(df, reader)\n```", "```py\nfrom surprise.model_selection import train_test_split\ntrainset, testset = train_test_split(dataset, test_size=0.25)\n```", "```py\nfrom surprise.model_selection import cross_validate\n\ndef predict_evaluate(recsys, dataset, name='Algorithm'):\n    scores = cross_validate(\n        recsys, dataset, measures=['RMSE', 'MAE'], cv=4\n    )\n    print(\n        'Testset Avg. MAE: {:.2f} & Avg. RMSE: {:.2f} [{}]'.format(\n            scores['test_mae'].mean(),\n            scores['test_rmse'].mean(),\n            name\n        )\n    )\n```", "```py\nfrom surprise import AlgoBase\n\nclass RandomRating(AlgoBase):\n\n    def __init__(self, p=0.5):\n        self.p = p\n        AlgoBase.__init__(self)\n\n    def estimate(self, u, i):\n        return np.random.binomial(n=1, p=self.p, size=1)[0]\n```", "```py\nrecsys = RandomRating(p=0.168)\npredict_evaluate(recsys, dataset, 'RandomRating')\n```", "```py\nfrom surprise.prediction_algorithms.knns import KNNBasic\nrecsys = KNNBasic()\npredict_evaluate(recsys, dataset, 'KNNBasic')\n```", "```py\nfrom surprise.prediction_algorithms.knns import KNNBasic\n\nsim_options = {\n    'name': 'cosine', 'user_based': False\n}\nrecsys = KNNBasic(k=20, sim_options=sim_options, verbose=False)\npredict_evaluate(recsys, dataset, 'KNNBasic')\n```", "```py\nfrom surprise.model_selection import GridSearchCV\nfrom surprise.prediction_algorithms.knns import KNNBasic\n\nparam_grid = {\n    'sim_options': {\n        'name':['cosine', 'pearson'],\n    },\n    'k': [5, 10, 20, 40],\n    'verbose': [True],\n}\n\ndataset_subset = Dataset.load_from_df(\n    df.sample(frac=0.25, random_state=0), reader\n)\ngscv = GridSearchCV(\n    KNNBasic, param_grid, measures=['rmse', 'mae'], \n    cv=4, n_jobs=-1\n)\ngscv.fit(dataset_subset)\n\nprint('Best MAE:', gscv.best_score['mae'].round(2))\nprint('Best RMSE:', gscv.best_score['rmse'].round(2))\nprint('Best Params', gscv.best_params['rmse'])\n```", "```py\nfrom surprise.prediction_algorithms.baseline_only import BaselineOnly\nrecsys = BaselineOnly(verbose=False)\npredict_evaluate(recsys, dataset, 'BaselineOnly')\n```", "```py\nmusic_ratings = [('U1', 'Metallica'), ('U1', 'Rammstein'), ('U2', 'Rammstein'), ('U3', 'Tiesto'), ('U3', 'Paul van Dyk'), ('U2', 'Metallica'), ('U4', 'Tiesto'), ('U4', 'Paul van Dyk'), ('U5', 'Metallica'), ('U5', 'Slipknot'), ('U6', 'Tiesto'), ('U6', 'Aly & Fila'), ('U3', 'Aly & Fila')]\n```", "```py\ndf_music_ratings = pd.DataFrame(music_ratings, columns=['User', 'Artist'])\ndf_music_ratings['Rating'] = 1\n\ndf_music_ratings_pivoted = df_music_ratings.pivot(\n    'User', 'Artist', 'Rating'\n).fillna(0)\n```", "```py\nfrom sklearn.decomposition import TruncatedSVD\nsvd = TruncatedSVD(n_components=2)\nsvd.fit_transform(df_music_ratings_pivoted).round(2)\n```", "```py\npd.DataFrame(\n    svd.fit_transform(df_music_ratings_pivoted),\n    index=df_music_ratings_pivoted.index,\n    columns=['SV1', 'SV2'], \n).round(2).style.bar(\n    subset=['SV1', 'SV2'], align='mid', color='#AAA'\n)\n```", "```py\nfrom sklearn.metrics.pairwise import cosine_similarity\n\nuser_ids = ['U1', 'U2', 'U3', 'U5']\n\npd.DataFrame(\n    cosine_similarity(\n        df_music_ratings_pivoted.loc[user_ids, :].values\n    ),\n    index=user_ids,\n    columns=user_ids\n).round(2).style.bar(\n    subset=user_ids, align='mid', color='#AAA'\n)\n```", "```py\nfrom sklearn.metrics.pairwise import cosine_similarity\nfrom sklearn.decomposition import TruncatedSVD\n\nuser_ids = ['U1', 'U2', 'U3', 'U5']\n\nsvd = TruncatedSVD(n_components=2)\ndf_user_svd = pd.DataFrame(\n    svd.fit_transform(df_music_ratings_pivoted),\n    index=df_music_ratings_pivoted.index,\n    columns=['SV1', 'SV2'], \n)\n\npd.DataFrame(\n    cosine_similarity(\n        df_user_svd.loc[user_ids, :].values\n    ),\n    index=user_ids,\n    columns=user_ids\n).round(2).style.bar(\n    subset=user_ids, align='mid', color='#AAA'\n)\n```", "```py\nfrom surprise.prediction_algorithms.matrix_factorization import SVD\nrecsys = SVD()\npredict_evaluate(recsys, dataset, 'SVD')\n```", "```py\n          pip\n          install\n          joblib\n\n```", "```py\nimport joblib\nfrom surprise.prediction_algorithms.baseline_only import BaselineOnly\n\nrecsys = BaselineOnly()\nrecsys.fit(trainset)\njoblib.dump(recsys, 'recsys.pkl') \n```", "```py\nfrom surprise import accuracy\nrecsys = joblib.load('recsys.pkl') \npredictions = recsys.test(testset)\n```"]