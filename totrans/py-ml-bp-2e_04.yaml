- en: Forecast the IPO Market Using Logistic Regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the late 1990s, getting in on the right **Initial Public Offering** (**IPO**)
    was like winning the lottery. First-day returns for some technology companies
    were many times their initial offering price, and if you were lucky enough to
    get in on an allocation, you were in for a windfall. Here are a few of the top
    first-day performers from the period:'
  prefs: []
  type: TYPE_NORMAL
- en: VA Linux up 697%, 12/09/99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Globe.com up 606%, 11/13/98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Foundry Networks up 525%, 9/28/99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'While the days of dotcom mania are far behind us, IPOs can still have outsized
    first-day returns. Here are just a few that rose substantially on their first
    day of trading in the past year:'
  prefs: []
  type: TYPE_NORMAL
- en: Bloom Energy up 67%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pinduoduo up 32%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tenable up 32%
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, this is still a market worth paying attention to. In this chapter,
    we'll take a closer look at the IPO market. We'll see how we can use machine learning
    to help us decide which IPOs are worth a closer look and which ones we may want
    to take a pass on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what we''ll cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: The IPO market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data cleansing and feature engineering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary classification with logistic regression
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Feature importance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IPO market
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we jump in and begin modeling, let's first discuss what an IPO, or initial
    public offering, is, and what research tells us about this market. After that,
    we'll discuss a number of strategies that we can apply.
  prefs: []
  type: TYPE_NORMAL
- en: What is an IPO?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An IPO is the process whereby a private company becomes a public company. Public
    offerings raise capital for the company and give the general public an opportunity
    to invest in the company by buying its shares.
  prefs: []
  type: TYPE_NORMAL
- en: Though there are variations in how this occurs, in a typical offering, a company
    enlists the help of one or more investment banks to underwrite their offering.
    This means that the banks make a guarantee to the company that they will purchase
    all of the shares being offered at the IPO price on the day of the IPO. The underwriters,
    of course, do not intend to keep all of the shares themselves. With the help of
    the offering company, they go on what's called a **roadshow** to drum up interest
    from institutional clients. These clients put in a **subscription** for the shares,
    which indicates their interest in buying shares on the day of the IPO. This is
    a non-binding contract, as the price of the offering is not finalized until the
    day of the IPO. The underwriter will then set the offer price, given the level
    of interest expressed.
  prefs: []
  type: TYPE_NORMAL
- en: What is interesting from our perspective is that research has consistently shown
    a systematic underpricing of IPOs. There are a number of theories as to why this
    happens, and why this level of underpricing seems to vary over time, but studies
    have shown that billions of dollars are left on the table every year.
  prefs: []
  type: TYPE_NORMAL
- en: In an IPO, **money left on the table**, is the difference between the offering
    price of shares and the first day's closing price.
  prefs: []
  type: TYPE_NORMAL
- en: One other point that should be mentioned before we move on is the difference
    between the offering price and the opening price. While you can occasionally get
    in on the deal through your broker and receive the IPO at its offering price,
    in nearly all instances, you, as a member of the general public, will have to
    purchase the IPO at the (typically higher) opening price. We'll build our models
    under this assumption.
  prefs: []
  type: TYPE_NORMAL
- en: Recent IPO market performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now take a look at the performance of the IPO market. We are going to
    pull down data from `IPOScoop.com`, which is a service that provides ratings for
    upcoming IPOs. Go to [https://www.iposcoop.com/scoop-track-record-from-2000-to-present/](https://www.iposcoop.com/scoop-track-record-from-2000-to-present/)
    and click on the button at the bottom of the page to download the spreadsheet.
    We'll load this into pandas and run a number of visualizations using our Jupyter
    notebook.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, the data is in a format that makes it impossible to just read
    into pandas with the normal `.read_csv()` method. What we''ll need to do is use
    a library that lets us read Excel files into Python lists and then perform some
    preprocessing to filter out those rows that aren''t of interest, primarily, header
    rows, and some extraneous information. Follow the steps to set up notebook:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now begin in our notebook by setting up the libraries we''ll need:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `xlrd` libraryÂ is what we'll be using to work with the Excel spreadsheet
    we downloaded earlier. If you don't have it installed already, it can be added
    to your Python distribution at the command line with `pip install xlrd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to load the workbook, as seen in the following block of code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have loaded the entire Excel workbook, let''s target the sheet
    we''ll be working with, in this instance, the first one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s now check that we have the data we are expecting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line of code generates the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3dda75ad-b2a1-4060-ac9f-fafd553a3531.png)'
  prefs: []
  type: TYPE_IMG
- en: 'That number looks about right from comparing it against the spreadsheet, so
    let''s now move on to incorporating the data row by row:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/48a7dd95-c7a0-439f-8fa4-9ac061ccd8dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's talk about what happened in that code block. First, we create an empty
    list to which we will add the rows. Then, we loop over each row in the spreadsheet,
    checking whether the first value (the left most cell) is a float. If it is, then
    we add all the cells' values to our list. This works because the `Date` column,
    when read in, appears as a float, and we are only interested in those rows in
    the sheet that start with a date. Note that we also start our loop on line 36
    to skip over the summary data in the sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now again check that the number of rows we expect are in our list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e32104a5-8946-4314-a073-970f3b20cf9c.png)'
  prefs: []
  type: TYPE_IMG
- en: After eliminating the header and other rows we aren't interested in, this looks
    about right.
  prefs: []
  type: TYPE_NORMAL
- en: Working on the DataFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now move on to getting our DataFrame ready to work with:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3bfc736d-8024-4705-a0d1-c49641e15a64.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The data looks good, so let''s now add our columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0284d547-a23d-4365-839d-3b6d69003869.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now convert that `Date` column from a float to a proper date. The `xlrd`
    library has some functionality that can help us with that. We''ll use it in a
    function to get our dates in the proper format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7f0fc1b4-4790-439d-8069-25b0ed825600.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have dates that we can work with, let''s add some additional date-related
    columns that can help us work with the data better:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6bbdc76b-d8ad-4758-8f33-eabf61700a67.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we''ve completed those steps, let''s check our data in the DataFrame
    against the data in the original spreadsheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c309883c-42d1-4bad-8c0b-8a50b891b555.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparing this to the same values in the spreadsheet shows us that we have nearly
    identical values, so we should be good to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll take one additional step here to eliminate what are sometimes referred
    to as *penny stocks*, or particularly low-priced stocks. Then, we''ll check the
    data types to ensure they look appropriate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/370f1607-7f12-4a06-8d8c-7a7d759cad45.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This looks to be in line with what we expect, with the exception of the `1st
    Day % Chg` column. We''ll correct that now by changing the data type to a float:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65e42628-6df9-4efc-b3b3-de5e128c6278.png)'
  prefs: []
  type: TYPE_IMG
- en: Analyzing the data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data types all look good now, so we''ll begin our exploratory analysis
    by graphing the number of IPOs since 2000:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/05867657-fc25-4603-a6d9-75ee6f6c1d4e.png)'
  prefs: []
  type: TYPE_IMG
- en: From the chart, we can see that most years have over 100 IPOs, but that in the
    years after and including 2001 and 2008, there was a notable reduction, mostly
    likely due to the aftermath of 9/11 and the financial crisis.
  prefs: []
  type: TYPE_NORMAL
- en: Summarizing the performance of the stocks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll get a quick summary of the performance of the stocks over the past 18
    years by executing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4a07bde7-f25a-4c6e-8694-c1ad1b8a207d.png)'
  prefs: []
  type: TYPE_IMG
- en: From the table, we can see the extraordinary average return of the IPO market
    in 2000\. At over 35%, it is more than double any other year on the list. Also
    notable is the fact that every year has had a positive average return for first-day
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s plot first-day performance to get a better feel for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8aa3123a-73f8-4315-a7c7-902a9b17dd2e.png)'
  prefs: []
  type: TYPE_IMG
- en: The important point about these numbers is that they are not the first-day performance
    that the general investing public could expect to receive on that first-day. Only
    investors who got in on the offering could expect to see these numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first-day return that the general public could expect to receive would
    be the difference between the opening price and the closing price. This is entirely
    different, and much less lucrative. Let''s now add a column of data to reflect
    that value and see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a89b4db2-aff1-4b2f-958a-a6394553c6f5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This shows returns that are markedly less exciting. Let''s now plot them as
    before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/327d4037-ffc3-4ce8-a799-3cf7b6010f6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Comparing the preceding chart to the earlier one, it is clear that annual average
    returns on the first day are displayed in the range of their order of magnitude
    which is lower in many cases.
  prefs: []
  type: TYPE_NORMAL
- en: Baseline IPO strategy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now suppose that we bought one share of every IPO at the exact opening
    tick and sold them at the precise closing price listed in these figures; what
    would our returns look like in terms of dollars earned?
  prefs: []
  type: TYPE_NORMAL
- en: 'To answer this question, let''s look at the actual dollar price change from
    open to close:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b34983d-50e4-4e45-905e-4f60e13f57ce.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this, we see the first day open-to-close dollar total is just above $28\.
    That number is for over 173 IPOs so far in 2018:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a2d76b57-b913-4569-9139-4a971495708b.png)'
  prefs: []
  type: TYPE_IMG
- en: That reflects a mean first-day gain of just over 16 cents per IPO. And remember,
    this is under ideal conditions where we ignore transaction costs and slippage.
  prefs: []
  type: TYPE_NORMAL
- en: Slippage is the difference between your attempted entry or exit price for a
    target stock and the price at which your order is actually fulfilled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s now take a look at what the distribution of returns for these IPOs look
    like. This may help us understand how to improve our returns over the baseline
    NaÃ¯ve Bayes strategy of just buying every IPO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/06922374-0015-4d9f-9f14-9a8b766491d7.png)'
  prefs: []
  type: TYPE_IMG
- en: We see that returns are centered around zero, but there is a long tail to the
    right where there are some exceptional returns. It would be quite financially
    rewarding if we were able to identify some of the commonalities that these exceptional
    IPOs have that we could capitalize on.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see whether we can use machine learning to help improve our results from
    a NaÃ¯veÂ Bayes approach. A reasonable strategy would seem to be targeting that
    long tail on the right, so we'll focus on feature engineering in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Data cleansing and feature engineering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What might impact the performance of an offering as it begins trading? Perhaps
    the performance of the market in general or the prestige of the underwriters could
    impact it? Perhaps the day of the week or the month that it trades is important?
    The consideration and inclusion of these factors in a model is called **feature
    engineering**, and modeling this is nearly as important as the data that you use
    to build the model. If your features aren't informative, your model simply won't
    have value.
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin this process by adding a few features that we expect may influence
    the performance of an IPO.
  prefs: []
  type: TYPE_NORMAL
- en: Adding features to influence the performance of an IPO
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One measure of demand that could be informative is the **opening gap**. This
    is the difference between the offer price and the opening price of the issue.
    Let''s add that to our DataFrame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s get a count of the number of underwriters on the offering. Perhaps
    having more banks involved leads to better marketing of the issue? This is demonstrated
    in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s quickly see whether there might be anything to this hypothesis by means
    of a visualization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e3847001-bd88-42f6-ae8c-37227a67f80e.png)'
  prefs: []
  type: TYPE_IMG
- en: It's not apparent what the relationship might be from this chart, but clearly
    nine bankers is the sweet spot!
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, let''s move on to extracting the first underwriter in the list. This
    would be the lead, and perhaps the prestige of this bank is important to the first-day
    gains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let''s take a quick peek at the data in the new column that we have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e94235ea-9f21-4a44-a527-a30e63bfeb41.png)'
  prefs: []
  type: TYPE_IMG
- en: Even a cursory examination of the preceding shows us that we have some genuine
    issues with the data. Many names are replicated with different spellings and punctuation.
    We could, at this point, stop and attempt to clean up the data, and this would
    be the proper course of action if we were going to rely on our model for anything
    serious, but as this is just a toy project, we'll forge ahead and hope that the
    impact is minimal.
  prefs: []
  type: TYPE_NORMAL
- en: Binary classification with logistic regression
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of attempting to predict what the total first-day return will be, we
    are going to attempt to predict whether the IPO will be one we should buy for
    a trade or not. It is here that we should point out that this is not investment
    advice and is for illustrative purposes only. Please don't run out and start day
    trading IPOs with this model willy-nilly. It will end badly.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to predict a binary outcome (that's a `1` or `0`/yes or no), we will start
    with a model calledÂ **logistic regression**. Logistic regression is actually a
    binary classification model rather than regression. But it does utilize the typical
    form of a linear regression; it just does so within a logistic function.
  prefs: []
  type: TYPE_NORMAL
- en: 'A typical single variable regression model takes the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d94c1fc8-a2fd-4207-b16e-74cb93920de1.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, *t* is a linear function of a single explanatory variable, *x*. This can,
    of course, be expanded to be a linear combination of many variables. The problem
    with this form for a binary outcome variable is that *t* does not naturally fall
    between 1 and 0.
  prefs: []
  type: TYPE_NORMAL
- en: 'The logistic function seen in the following equation has some quite favorable
    mathematical properties, including the fact that it can take any number as an
    input (*t* here) and return a result that falls between 0 and 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1de20958-589d-49e8-8675-5e536390b8ff.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The graph is represented as below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4c9c4dcc-4129-444c-99c2-b6be33706634.png)'
  prefs: []
  type: TYPE_IMG
- en: 'By replacing *t* with our regression function, we now have a model that is
    able to both give us information on the importance of each predictor (the beta
    coefficients) and provide a form that can be used to give us a binary prediction
    that represents the probability of *success*, or a *positive result*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/51a0d4c3-1ecd-4071-bb70-e46a5d019cfc.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we can move on to modeling our data, we need to put it in a form that
    is appropriate for scikit-learn.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll start by importing a library that can help us with this task; it''s
    called `patsy`. It can be pip-installed if necessary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Creating the target for our model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we''ll create the target for our model. This is the column that will tell
    our model whether each IPO should have been invested in or not. We are going to
    say that we should invest in any IPO that has a 2.5% or greater return on day
    one. Obviously, this is an arbitrary number, but it seems like a reasonable value
    for the investment to be worthy of our attention:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have set our target column, we need to set up our predictor variables.
    We''ll again use `patsy` for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s discuss what''s going on in that line of code. `X` here is our design
    matrix, or the matrix that contains our predictor variables. We have included
    the things we discussed earlier that could have some impact on the performance:
    the size of the opening gap, the month and day of the IPO, the offering price,
    the lead manager, the number of managers, and finally, the star rating that `IPOScoop.com`
    provides in advance of the IPO''s listing.'
  prefs: []
  type: TYPE_NORMAL
- en: To give some explanation regarding the Qs and Cs found in the lines of code,
    the Qs are simply used to provide quotes in the formula for columns that have
    white space in their names, and the Cs are used to indicate that the referenced
    column should be treated as categorical features and dummy-coded.
  prefs: []
  type: TYPE_NORMAL
- en: Dummy coding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dummy coding is a method where, if we had one column that had a student''s
    favorite class as a predictor variable in one column, we would turn each class
    into its own column and then place a `1` in that column if it was the favorite
    class of the student, as seen in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8b57015a-328b-48af-97e7-734144a3cf04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source: http://www.statisticssolutions.com/dummy-coding-the-how-and-why/'
  prefs: []
  type: TYPE_NORMAL
- en: Once that is done, then the next step is to actually drop one of those columns.
    The dropped column then becomes the **base case**. All the other cases are then
    compared to that case. In our IPO example using months as predictors, we will
    drop January, for example, and then all the other months will be judged against
    January's performance. The same goes for the days of the week or any other categorical
    predictor. This dropping of a column is to prevent multicollinearity, which would
    have a negative impact on the explanatory power of the model.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at what this coding looks like by running the following
    in a Jupyter cell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2576a82c-f579-492b-afc4-9bd9705c0051.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that we have both our `X` and `*y*`, we are ready to fit our model. We
    are going use a very basic train/test split and simply train our model on all
    but the last 200 IPOs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: And, with that, we have our model. Let's examine the performance of this very
    simple model.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the model performance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''ll start by making predictions on our test data and then we''ll examine
    whether our predictions were correct:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5c6ec647-0a8f-4d55-984e-cd3266527bf4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now look at what percentage of the 200 IPOs in our `test` dataset we
    should have invested inâremember, that means they rose over 2.5% from the open
    to the close:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/512daffe-e875-446f-a0dc-81284e18eb29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, just north of half the IPOs rose over 2.5% from their opening tick to the
    closing tick. Let''s see how accurate our model''s calls were:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9138b386-ade9-4755-af1a-c2908790aed9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Well, it looks like our model was about as accurate as a coin flip. That doesn''t
    seem too promising. But with investing, what is important is not the accuracy
    but the expectancy. If we had a number of small losses, but a couple of huge wins,
    overall, the model could still be very profitable. Let''s examine whether that''s
    the case here. We''ll join our results data with the first-day change data to
    explore this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d010855b-3879-4bd6-8c26-094f84c74061.png)'
  prefs: []
  type: TYPE_IMG
- en: 'First, let''s see what our results would have looked like for one share of
    every one of the 200 IPOs in our test data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/120d38b6-ac84-463f-94f6-e2543c3ec39f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'From this, we see that we would have gained over $215 in an ideal cost-free
    scenario. Now, let''s examine some of the other statistics concerning these IPOs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1d9c6402-1bcf-4a5e-b16f-e9f769afd5b2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Based on the preceding, we see that the average gain was just over $1, and
    the largest loss was 15 times that. How does our model fare against those numbers?
    First, we look at the trades our model said we should take and the resulting gains:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/feddf7fe-8c00-4af2-8e50-b34aa1a4e4c2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s look at the other statistics as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f1480c1-5494-4988-942a-70e7de78c7de.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, we see that our model suggested investing in only 34 IPOs, the mean gain
    rose to $1.50, the largest loss was reduced to under $10, and we still were able
    to capture the best performing IPO. It's not stellar, but we may be on to something.
    We'd need to explore further to really know whether we do have something worth
    expanding further.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's move on to examine the factors that seem to influence our model's
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: Generating the importance of a feature from our model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the nice features of logistic regression is that it offers predictor
    coefficients that can tell us the relative importance of the predictor variables
    or features. For categorical features, a positive sign on a feature's coefficient
    tells us that, when present, this feature increases the probability of a positive
    outcome versus the baseline. For continuous features, a positive sign tells us
    that an increase in the value of a feature corresponds to an increase in the probability
    of a positive outcome. The size of the coefficient tells us the magnitude of the
    increase in probability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s generate the importance of the feature from our model, and then we can
    examine the impact it has:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0a7f800c-e6c7-4719-b911-69b28c47bb4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding screenshot, we see those features with the largest coefficients.
    Let''s look at days of the week and their impact there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/215fc453-b07c-458f-b65c-65c5472cb9d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Here, the first day of the week would be Monday and would be coded as `T.0`,
    or the base case. All the other days of the week would be compared to Monday.
    From the preceding screenshot, we see that Thursday appears to be the best day
    of the week. Saturday appears to be a terrible day of the week to have an IPO,
    most likely because the market is closed that day. (In all likelihood, those dates
    are just incorrectly recorded.)
  prefs: []
  type: TYPE_NORMAL
- en: Looking further at the features with the highest coefficients, we can now appreciate
    that extracting useful information for the predictive value of each is difficult,
    since many of those features are for things that no longer exist. For example,
    while Deutsche Bank still exists, it no longer underwrites as Deutsche Banc Alex.
    Brown, so that is actually conveying historical information rather than information
    that can be useful going forward.
  prefs: []
  type: TYPE_NORMAL
- en: Another issue is that features do not reflect how frequently they had an impact.
    The appearance of a bank that was only in business in 2000 and had 3 hugely successful
    IPOs would have a very large positive coefficient, but would be meaningless in
    our modeling efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Random forest classifier method
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another method of modeling that tells us which features have an impact on our
    model is the feature importance that comes out of a random forest classifier.
    This more accurately reflects the true impact of a given feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run our data through this type of model and examine the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code generates the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b8c70794-d65c-417b-9ddf-c1bfdde03488.png)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding code, we ran a random forest classifier, extracted and sorted
    the importance of the features, and then graphed those values with their error
    bars.
  prefs: []
  type: TYPE_NORMAL
- en: From this data, we see that what has the most impact on the model is the opening
    gap, the offer price, and the number of managers involved in the deal. These would
    all seem to make sense as having predictive values, since they indicate that there
    is strong demand for the deal.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered a lot of ground in this chapter, but we've only just scratched the
    surface in terms of how to build this type of model. Hopefully, you've gained
    a better understanding of the modeling process, from cleaning the data, to engineering
    the features, to testing. And hopefully, you'll use this information to extend
    the model on your own and improve upon it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll turn our attention to a very different domain, as
    we move from numeric data to text-based data.
  prefs: []
  type: TYPE_NORMAL
