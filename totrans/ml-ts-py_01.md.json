["```py\npip install -U dython scipy numpy pandas seaborn scikit-learn \n```", "```py\nfrom datetime import date \n```", "```py\ntoday = date.today() \n```", "```py\nother_date = date(2021, 3, 24) \n```", "```py\nfrom datetime import datetime\nnow = datetime.now() \n```", "```py\nsome_date = datetime(2021, 5, 18, 15, 39, 0)\nsome_date.isoformat() \n```", "```py\n'2021-05-18T15:39:00' \n```", "```py\nfrom datetime import timedelta \nyear = timedelta(days=365) \n```", "```py\nyear * 10 \n```", "```py\ndatetime.timedelta(days=3650) \n```", "```py\nfrom datetime import date\nsome_date = date.fromisoformat('2021-03-24') \n```", "```py\nsome_date = datetime.date(2021, 3, 24) \n```", "```py\nsome_date.strftime('%A %d. %B %Y') \n```", "```py\n'Wednesday 24\\. March 2021' \n```", "```py\nfrom datetime import datetime\ndt = datetime.strptime('24/03/21 15:48', '%d/%m/%y %H:%M') \n```", "```py\n'%d/%m/%Y' \n```", "```py\nimport pandas as pd\npd.date_range(start='2021-03-24', end='2021-09-01') \n```", "```py\nDatetimeIndex(['2021-03-24', '2021-03-25', '2021-03-26', '2021-03-27',\n               '2021-03-28', '2021-03-29', '2021-03-30', '2021-03-31',\n               '2021-04-01', '2021-04-02',\n               ...\n               '2021-08-23', '2021-08-24', '2021-08-25', '2021-08-26',\n               '2021-08-27', '2021-08-28', '2021-08-29', '2021-08-30',\n               '2021-08-31', '2021-09-01'],\n              dtype='datetime64[ns]', length=162, freq='D') \n```", "```py\npd.Series(pd.date_range(\"2021\", freq=\"D\", periods=3)) \n```", "```py\n0   2021-01-01\n1   2021-01-02\n2   2021-01-03\ndtype: datetime64[ns] \n```", "```py\nimport pandas as pd\ndf = pd.DataFrame({'year': [2021, 2022],\n    'month': [3, 4],\n    'day': [24, 25]}\n)\nts1 = pd.to_datetime(df)\nts2 = pd.to_datetime('20210324', format='%Y%m%d') \n```", "```py\ns = pd.Series([1, 2, 3, 4, 5])\ns.rolling(3).sum() \n```", "```py\nimport numpy as np \nrng = pd.date_range('2021-03-24', '2021-09-01', freq='D')\nts = pd.Series(np.random.randn(len(rng)), index=rng) \n```", "```py\n2021-03-24   -2.332713\n2021-03-25    0.177074\n2021-03-26   -2.136295\n2021-03-27    2.992240\n2021-03-28   -0.457537\n                 ...\n2021-08-28   -0.705022\n2021-08-29    1.089697\n2021-08-30    0.384947\n2021-08-31    1.003391\n2021-09-01   -1.021058\nFreq: D, Length: 162, dtype: float64 \n```", "```py\nDatetimeIndex(['2021-03-24', '2021-03-25'], dtype='datetime64[ns]', freq='D') \n```", "```py\n2021-03-28   -0.457537\n2021-03-29   -1.089423\n2021-03-30   -0.708091\nFreq: D, dtype: float64 \n```", "```py\nts.shift(1)[:5] \n```", "```py\nts.asfreq('M') \n```", "```py\nimport datetime\nimport pandas as pd\nimport matplotlib.pyplot as plt \n```", "```py\npollution = pd.read_csv(\n    'https://raw.githubusercontent.com/owid/owid-datasets/master/datasets/Air%20pollution%20by%20city%20-%20Fouquet%20and%20DPCC%20(2011)/Air%20pollution%20by%20city%20-%20Fouquet%20and%20DPCC%20(2011).csv'\n)\nlen(pollution) \n```", "```py\n331 \n```", "```py\npollution.columns \n```", "```py\nIndex(['Entity', 'Year', 'Smoke (Fouquet and DPCC (2011))',\n       'Suspended Particulate Matter (SPM) (Fouquet and DPCC (2011))'],\n      dtype='object') \n```", "```py\npollution = pollution.rename(\n    columns={\n        'Suspended Particulate Matter (SPM) (Fouquet and DPCC (2011))':            'SPM',\n           'Smoke (Fouquet and DPCC (2011))' : 'Smoke',\n        'Entity': 'City'\n    }\n)\npollution.dtypes \n```", "```py\nCity                                object\nYear                                 int64\nSmoke                              float64\nSPM                                float64\ndtype: object \n```", "```py\npollution.City.unique() \n```", "```py\narray(['Delhi', 'London'], dtype=object) \n```", "```py\npollution.Year.min(), pollution.Year.max() \n```", "```py\n(1700, 2016) \n```", "```py\npollution['Year'] = pollution['Year'].apply(\n    lambda x: datetime.datetime.strptime(str(x), '%Y')\n)\npollution.dtypes \n```", "```py\nCity             object\nYear     datetime64[ns]\nSmoke           float64\nSPM             float64\ndtype: object \n```", "```py\npollution.isnull().mean() \n```", "```py\nCity                               0.000000\nYear                               0.000000\nSmoke                              0.090634\nSPM                                0.000000\ndtype: float64 \n```", "```py\npollution.describe() \n```", "```py\n Smoke    SPM\ncount    301.000000    331.000000\nmean     210.296440    365.970050\nstd      88.543288     172.512674\nmin      13.750000     15.000000\n25%      168.571429    288.474026\n50%      208.214286    375.324675\n75%      291.818182    512.609209\nmax      342.857143    623.376623 \n```", "```py\nn, bins, patches = plt.hist(\n    x=pollution['SPM'], bins='auto',\n    alpha=0.7, rwidth=0.85\n)\nplt.grid(axis='y', alpha=0.75)\nplt.xlabel('SPM')\nplt.ylabel('Frequency') \n```", "```py\nfrom scipy import stats\ndef ignore_nans(a, b):\n    index = ~a.isnull() & ~b.isnull()\n    return a[index], b[index]\nstats.pearsonr(*ignore_nans(pollution['Smoke'], pollution['SPM'])) \n```", "```py\n(0.9454809183096181, 3.313283689287137e-10 \n```", "```py\nimport dython\ndython.nominal.associations(child_mortality[countries], figsize=(12, 6)); \n```", "```py\nplt.figure(figsize=(12, 6))\nsns.jointplot(\n    x=\"Smoke\", y=\"SPM\",\n    edgecolor=\"white\",\n    data=pollution\n)\nplt.xlabel(\"Smoke\")\nplt.ylabel(\"SPM\"); \n```", "```py\npollution = pollution.pivot(\"Year\", \"City\", \"SPM\")\nplt.figure(figsize=(12, 6))\nsns.lineplot(data=pollution)\nplt.ylabel('SPM'); \n```", "```py\ntemperatures = pd.read_csv('/Users/ben/Downloads/monthly_csv.csv')\ntemperatures['Date'] = pd.to_datetime(temperatures['Date'])\ntemperatures = temperatures.pivot('Date', 'Source', 'Mean') \n```", "```py\nfrom numpy import polyfit\ndef fit(X, y, degree=3):\n    coef = polyfit(X, y, degree)\n    trendpoly = np.poly1d(coef)\n    return trendpoly(X)\ndef get_season(s, yearly_periods=4, degree=3):\n    X = [i%(365/4) for i in range(0, len(s))]\n    seasonal = fit(X, s.values, degree)\n    return pd.Series(data=seasonal, index=s.index)\ndef get_trend(s, degree=3):\n    X = list(range(len(s)))\n    trend = fit(X, s.values, degree)\n    return pd.Series(data=trend, index=s.index) \n```", "```py\nimport seaborn as sns\nplt.figure(figsize=(12, 6))\ntemperatures['trend'] = get_trend(temperatures['GCAG'])\ntemperatures['season'] = get_season(temperatures['GCAG'] - temperatures['trend'])\nsns.lineplot(data=temperatures[['GCAG', 'season', 'trend']])\nplt.ylabel('Temperature change'); \n```", "```py\npollution = pollution.pivot(\"Year\", \"City\", \"SPM\")\npd.plotting.autocorrelation_plot(pollution['London']) \n```", "```py\nfrom statsmodels.tsa import stattools\nstattools.adfuller(pollution['London']) \n```", "```py\n(-0.33721640804242853,\n 0.9200654843183897,\n 13,\n 303,\n {'1%': -3.4521175397304784,\n  '5%': -2.8711265007266666,\n  '10%': -2.571877823851692},\n 1684.6992663493872) \n```", "```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom matplotlib.dates import DateFormatter\nimport seaborn as sns\nfrom sklearn.datasets import fetch_openml \n```", "```py\neeg = fetch_openml(data_id=1471, as_frame=True)\nincrement = 117 / len(eeg['data'])\nimport numpy as np\nindex = np.linspace(\n    start=0,\n    stop=increment*len(eeg['data']),\n    num=len(eeg['data'])\n)\nts_index = pd.to_datetime(index, unit='s')\nv1 = pd.Series(name='V1', data=eeg['data']['V1'].values, index=ts_index) \n```", "```py\nslicing = (v1.index >= '1970-01-01 00:00:08') & (v1.index <='1970-01-01 00:01:10.000000000')\nv1[slicing] \n```", "```py\n1970-01-01 00:00:08.006208692    4289.74\n1970-01-01 00:00:08.014019627    4284.10\n1970-01-01 00:00:08.021830563    4280.00\n1970-01-01 00:00:08.029641498    4289.74\n1970-01-01 00:00:08.037452433    4298.46\n                                  ...   \n1970-01-01 00:01:09.962547567    4289.74\n1970-01-01 00:01:09.970358502    4283.08\n1970-01-01 00:01:09.978169437    4284.62\n1970-01-01 00:01:09.985980373    4289.23\n1970-01-01 00:01:09.993791308    4290.77\nName: V1, Length: 7937, dtype: float64 \n```", "```py\ndate_formatter = DateFormatter(\"%S\")\nax = v1[slicing].plot(figsize=(12, 6))\nax.xaxis.set_major_formatter(date_formatter)\nplt.ylabel('voltage') \n```", "```py\nplt.subplot(311)\nax1 = v1[slicing].resample('1s').mean().plot(figsize=(12, 6))\nax1.xaxis.set_major_formatter(date_formatter)\nplt.subplot(312)\nax1 = v1[slicing].resample('2s').mean().plot(figsize=(12, 6))\nax1.xaxis.set_major_formatter(date_formatter)\nplt.subplot(313)\nax2 = v1[slicing].resample('5s').mean().plot(figsize=(12, 6))\nax2.xaxis.set_major_formatter(date_formatter) \nplt.xlabel('seconds'); \n```", "```py\nfrom scipy import signal\nfs = len(eeg['data']) // 117\nf, Pxx_den = signal.welch(\n    v1[slicing].values,\n    fs,\n    nperseg=2048,\n    scaling='spectrum'\n)\nplt.semilogy(f, Pxx_den)\nplt.xlabel('frequency [Hz]')\nplt.ylabel('PSD [V**2/Hz]') \n```"]