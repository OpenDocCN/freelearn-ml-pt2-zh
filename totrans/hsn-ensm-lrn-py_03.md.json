["```py\n# --- SECTION 1 ---\n# Libraries and data loading\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.model_selection import validation_curve\nfrom sklearn.neighbors import KNeighborsClassifier\nbc = load_breast_cancer()\n```", "```py\n# --- SECTION 2 ---\n# Create in-sample and out-of-sample scores\nx, y = bc.data, bc.target\nlearner = KNeighborsClassifier()\nparam_range = [2,3,4,5]\ntrain_scores, test_scores = validation_curve(learner, x, y,\n                                             param_name='n_neighbors',\n                                             param_range=param_range,\n                                             cv=10,\n                                             scoring=\"accuracy\")\n```", "```py\n# --- SECTION 3 ---\n# Calculate the average and standard deviation for each hyperparameter\ntrain_scores_mean = np.mean(train_scores, axis=1)\ntrain_scores_std = np.std(train_scores, axis=1)\ntest_scores_mean = np.mean(test_scores, axis=1)\ntest_scores_std = np.std(test_scores, axis=1)\n```", "```py\n# --- SECTION 4 ---\n# Plot the scores\nplt.figure()\nplt.title('Validation curves')\n# Plot the standard deviations\nplt.fill_between(param_range, train_scores_mean - train_scores_std,\n                 train_scores_mean + train_scores_std, alpha=0.1,\n                 color=\"C1\")\nplt.fill_between(param_range, test_scores_mean - test_scores_std,\n                 test_scores_mean + test_scores_std, alpha=0.1, color=\"C0\")\n\n# Plot the means\nplt.plot(param_range, train_scores_mean, 'o-', color=\"C1\",\n         label=\"Training score\")\nplt.plot(param_range, test_scores_mean, 'o-', color=\"C0\",\n         label=\"Cross-validation score\")\nplt.xticks(param_range)\nplt.xlabel('Number of neighbors')\nplt.ylabel('Accuracy')\nplt.legend(loc=\"best\")\nplt.show()\n\n```", "```py\n# --- SECTION 1 ---\n# Libraries and data loading\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfrom sklearn.datasets import load_breast_cancer\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.model_selection import learning_curve\nbc = load_breast_cancer()\n```", "```py\n# --- SECTION 2 ---\n# Create in-sample and out-of-sample scores\nx, y = bc.data, bc.target\nlearner = KNeighborsClassifier()\ntrain_sizes = [50, 100, 150, 200, 250, 300]\ntrain_sizes, train_scores, test_scores = learning_curve(learner, x,                                 y,  train_sizes=train_sizes, cv=10)\n```", "```py\n# --- SECTION 3 ---\n# Calculate the average and standard deviation for each hyperparameter\ntrain_scores_mean = np.mean(train_scores, axis=1)\ntrain_scores_std = np.std(train_scores, axis=1)\ntest_scores_mean = np.mean(test_scores, axis=1)\ntest_scores_std = np.std(test_scores, axis=1)\n```", "```py\n# --- SECTION 4 ---\n# Plot the scores\nplt.figure()\nplt.title('Learning curves')\n# Plot the standard deviations\nplt.fill_between(train_sizes, train_scores_mean - train_scores_std,\n train_scores_mean + train_scores_std, alpha=0.1,\n color=\"C1\")\nplt.fill_between(train_sizes, test_scores_mean - test_scores_std,\n test_scores_mean + test_scores_std, alpha=0.1, color=\"C0\")\n\n# Plot the means\nplt.plot(train_sizes, train_scores_mean, 'o-', color=\"C1\",\n label=\"Training score\")\nplt.plot(train_sizes, test_scores_mean, 'o-', color=\"C0\",\n label=\"Cross-validation score\")\n\nplt.xticks(train_sizes)\nplt.xlabel('Size of training set (instances)')\nplt.ylabel('Accuracy')\nplt.legend(loc=\"best\")\nplt.show()\n\n```"]