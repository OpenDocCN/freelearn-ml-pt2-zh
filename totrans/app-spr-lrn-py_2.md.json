["```py\n    import json\n    import pandas as pd\n    import numpy as np\n    import missingno as msno\n    from sklearn.impute import SimpleImputer\n    %matplotlib inline\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    ```", "```py\n    with open('dtypes.json', 'r') as jsonfile:\n        dtyp = json.load(jsonfile)\n    ```", "```py\n    data = pd.read_csv('earthquake_data.csv', dtype=dtyp)\n    ```", "```py\n    data.info()\n    ```", "```py\n    data.head()\n    ```", "```py\n    data.tail()\n    ```", "```py\n    data.describe().T\n    ```", "```py\n    mask = data.isnull()\n    total = mask.sum()\n    percent = 100*mask.mean()\n    missing_data = pd.concat([total, percent], axis=1,join='outer',\n                   keys=['count_missing', 'perc_missing'])\n    missing_data.sort_values(by='perc_missing', ascending=False, inplace=True)\n    missing_data\n    ```", "```py\n    nullable_columns = data.columns[mask.any()].tolist()\n    msno.matrix(data[nullable_columns].sample(500))\n    plt.show()\n    ```", "```py\n    msno.heatmap(data[nullable_columns], figsize=(18,18))\n    plt.show()\n    ```", "```py\n    time_features = ['month', 'day', 'hour', 'minute', 'second']\n    ```", "```py\n    data[time_features] = data[time_features].fillna(0)\n    ```", "```py\n    data[time_features].info()\n    ```", "```py\n    description_features = [\n        'injuries_description', 'damage_description',\n        'total_injuries_description', 'total_damage_description'\n    ]\n    ```", "```py\n    imp = SimpleImputer(missing_values=np.nan, strategy='constant', fill_value='NA')\n    ```", "```py\n    data[description_features] = imp.fit_transform(data[description_features])\n    ```", "```py\n    data[description_features].info()\n    ```", "```py\n    print(data[pd.isnull(data.damage_millions_dollars)].shape[0])\n    print(data[pd.isnull(data.damage_millions_dollars) & (data.damage_description != 'NA')].shape[0])\n    ```", "```py\n    category_means = data[['damage_description', 'damage_millions_dollars']].groupby('damage_description').mean()\n    category_means\n    ```", "```py\n    replacement_values = category_means.damage_millions_dollars.to_dict()\n    replacement_values['NA'] = -1\n    replacement_values['0'] = 0\n    replacement_values\n    ```", "```py\n    imputed_values = data.damage_description.map(replacement_values)\n    ```", "```py\n    data['damage_millions_dollars'] = np.where(condition=data.damage_millions_dollars.isnull(),\n                                   x=imputed_values,\n                                   y=data.damage_millions_dollars)\n    ```", "```py\n    data[['damage_millions_dollars']].info()\n    ```", "```py\n    plt.figure(figsize=(8,6))\n    ```", "```py\n    data.flag_tsunami.value_counts().plot(kind='bar')\n    ```", "```py\n    plt.ylabel('Number of data points')\n    plt.xlabel('flag_tsunami')\n    plt.show()\n    ```", "```py\n    numeric_variables = data.select_dtypes(include=[np.number])\n    numeric_variables.columns\n    ```", "```py\n    object_variables = data.select_dtypes(include=[np.object])\n    Object_variables.columns\n    ```", "```py\n    numeric_variables.nunique().sort_values()\n    ```", "```py\nobject_variables.nunique().sort_values()\n```", "```py\n    counts = data.injuries_description.value_counts(dropna=False)\n    counts\n    ```", "```py\n    counts.reset_index().sort_values(by='index')\n    ```", "```py\n    counts = data.damage_description.value_counts()\n    counts = counts.sort_index()\n    ```", "```py\n    plt.figure(figsize=(10,10))\n    plt.pie(counts, labels=counts.index)\n    plt.title('Pie chart showing counts for\\ndamage_description categories')\n    plt.show()\n    ```", "```py\n    plt.figure(figsize=(10,7))\n    ```", "```py\n    sns.distplot(data.eq_primary.dropna(), bins=np.linspace(0,10,21))\n    ```", "```py\n    plt.show()\n    ```", "```py\n    data.skew().sort_values()\n    ```", "```py\n    data.kurt()\n    ```", "```py\n    data_to_plot = data[~pd.isnull(data.injuries) & ~pd.isnull(data.eq_primary)]\n    ```", "```py\n    plt.figure(figsize=(12,9))\n    plt.scatter(x=data_to_plot.eq_primary, y=data_to_plot.injuries)\n    plt.xlabel('Primary earthquake magnitude')\n    plt.ylabel('No. of injuries')\n    plt.show()\n    ```", "```py\n    plt.figure(figsize = (12,10))\n    sns.heatmap(data.corr(), square=True, cmap=\"YlGnBu\")\n    plt.show()\n    ```", "```py\n    feature_subset = [\n        'focal_depth', 'eq_primary', 'eq_mag_mw', 'eq_mag_ms', 'eq_mag_mb', 'intensity',\n        'latitude', 'longitude', 'injuries', 'damage_millions_dollars',\n        'total_injuries', 'total_damage_millions_dollars']\n    plt.figure(figsize = (12,10))\n    sns.heatmap(data[feature_subset].corr(), square=True, annot=True, cmap=\"RdBu\", vmin=-1, vmax=1)\n    plt.show()\n    ```", "```py\n    feature_subset = [\n        'focal_depth', 'eq_primary', 'eq_mag_mw', 'eq_mag_ms', 'eq_mag_mb', 'intensity',\n        'latitude', 'longitude', 'injuries', 'damage_millions_dollars',\n        'total_injuries', 'total_damage_millions_dollars']\n    ```", "```py\n    plt.figure(figsize = (12,10))\n    sns.heatmap(data[feature_subset].corr(), square=True, annot=True, cmap=\"RdBu\", vmin=-1, vmax=1)\n    plt.show()\n    ```", "```py\n    data.loc[:,'flag_tsunami'] = data.flag_tsunami.apply(lambda t: int(str(t) == 'Tsu'))\n    ```", "```py\n    subset = data[~pd.isnull(data.intensity)][['intensity','flag_tsunami']]\n    ```", "```py\n    data_to_plot = subset.groupby('intensity').sum()\n    data_to_plot\n    ```", "```py\n    plt.figure(figsize=(12,9))\n    plt.bar(x=data_to_plot.index, height=data_to_plot.flag_tsunami)\n    plt.xlabel('Earthquake intensity')\n    plt.ylabel('No. of tsunamis')\n    plt.show()\n    ```", "```py\n    country_counts = data.country.value_counts()\n    top_countries = country_counts[country_counts > 100]\n    top_countries\n    ```", "```py\n    subset = data[data.country.isin(top_countries.index)]\n    ```", "```py\n    plt.figure(figsize=(15, 15))\n    sns.boxplot(x='country', y=\"eq_primary\", data=subset, order=top_countries.index)\n    plt.show()\n    ```", "```py\n    grouped_data = data.groupby(['intensity', 'flag_tsunami']).size()\n    grouped_data\n    ```", "```py\n    data_to_plot = grouped_data.unstack()\n    data_to_plot\n    ```", "```py\n    sns.set()\n    data_to_plot.plot(kind='bar', stacked=True, figsize=(12,8))\n    plt.show()\n    ```", "```py\n    feature_subset = [\n        'GarageArea', 'GarageCars','GarageCond','GarageFinish','GarageQual','GarageType',\n        'GarageYrBlt','GrLivArea','LotArea','MasVnrArea','SalePrice'\n    ]\n    ```"]